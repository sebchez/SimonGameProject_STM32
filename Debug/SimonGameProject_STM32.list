
SimonGameProject_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000762c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080077b4  080077b4  000177b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077e0  080077e0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077e8  080077e8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e8  080077e8  000177e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077ec  080077ec  000177ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080077f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000008fc  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000984  20000984  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012a26  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000334e  00000000  00000000  00032b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fd0  00000000  00000000  00035e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bfc  00000000  00000000  00036e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023d7b  00000000  00000000  00037a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014b2e  00000000  00000000  0005b7b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000caba6  00000000  00000000  000702e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000047d0  00000000  00000000  0013ae8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0013f65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800779c 	.word	0x0800779c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	0800779c 	.word	0x0800779c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fc38 	bl	8000d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f858 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f924 	bl	800071c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d4:	f000 f8be 	bl	8000654 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004d8:	f000 f8ea 	bl	80006b0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004dc:	f006 f9bc 	bl	8006858 <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    printf("Hello World!!!\n");
 80004e0:	4804      	ldr	r0, [pc, #16]	; (80004f4 <main+0x30>)
 80004e2:	f006 fe73 	bl	80071cc <puts>

	/* USER CODE END WHILE */
	MX_USB_HOST_Process();
 80004e6:	f006 f9dd 	bl	80068a4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	SimonGameWelcome();
 80004ea:	f000 f805 	bl	80004f8 <SimonGameWelcome>

	MX_USB_HOST_Process();
 80004ee:	f006 f9d9 	bl	80068a4 <MX_USB_HOST_Process>
  {
 80004f2:	e7f5      	b.n	80004e0 <main+0x1c>
 80004f4:	080077b4 	.word	0x080077b4

080004f8 <SimonGameWelcome>:
  }
  /* USER CODE END 3 */
}

void SimonGameWelcome() {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2108      	movs	r1, #8
 8000500:	481c      	ldr	r0, [pc, #112]	; (8000574 <SimonGameWelcome+0x7c>)
 8000502:	f000 ff5f 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000506:	2064      	movs	r0, #100	; 0x64
 8000508:	f000 fc8a 	bl	8000e20 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2108      	movs	r1, #8
 8000510:	4818      	ldr	r0, [pc, #96]	; (8000574 <SimonGameWelcome+0x7c>)
 8000512:	f000 ff57 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000516:	2201      	movs	r2, #1
 8000518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051c:	4816      	ldr	r0, [pc, #88]	; (8000578 <SimonGameWelcome+0x80>)
 800051e:	f000 ff51 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000522:	2064      	movs	r0, #100	; 0x64
 8000524:	f000 fc7c 	bl	8000e20 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052e:	4812      	ldr	r0, [pc, #72]	; (8000578 <SimonGameWelcome+0x80>)
 8000530:	f000 ff48 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	2140      	movs	r1, #64	; 0x40
 8000538:	4810      	ldr	r0, [pc, #64]	; (800057c <SimonGameWelcome+0x84>)
 800053a:	f000 ff43 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800053e:	2064      	movs	r0, #100	; 0x64
 8000540:	f000 fc6e 	bl	8000e20 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2140      	movs	r1, #64	; 0x40
 8000548:	480c      	ldr	r0, [pc, #48]	; (800057c <SimonGameWelcome+0x84>)
 800054a:	f000 ff3b 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2180      	movs	r1, #128	; 0x80
 8000552:	480a      	ldr	r0, [pc, #40]	; (800057c <SimonGameWelcome+0x84>)
 8000554:	f000 ff36 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000558:	2064      	movs	r0, #100	; 0x64
 800055a:	f000 fc61 	bl	8000e20 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2180      	movs	r1, #128	; 0x80
 8000562:	4806      	ldr	r0, [pc, #24]	; (800057c <SimonGameWelcome+0x84>)
 8000564:	f000 ff2e 	bl	80013c4 <HAL_GPIO_WritePin>

	HAL_Delay(2500);
 8000568:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800056c:	f000 fc58 	bl	8000e20 <HAL_Delay>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40020400 	.word	0x40020400
 8000578:	40020000 	.word	0x40020000
 800057c:	40020800 	.word	0x40020800

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	; 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f006 fefc 	bl	800738c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b28      	ldr	r3, [pc, #160]	; (800064c <SystemClock_Config+0xcc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	4a27      	ldr	r2, [pc, #156]	; (800064c <SystemClock_Config+0xcc>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	; 0x40
 80005b4:	4b25      	ldr	r3, [pc, #148]	; (800064c <SystemClock_Config+0xcc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <SystemClock_Config+0xd0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <SystemClock_Config+0xd0>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <SystemClock_Config+0xd0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f0:	2308      	movs	r3, #8
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005fe:	2307      	movs	r3, #7
 8000600:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	4618      	mov	r0, r3
 8000608:	f002 fc44 	bl	8002e94 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000612:	f000 f9b1 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000622:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2105      	movs	r1, #5
 8000634:	4618      	mov	r0, r3
 8000636:	f002 fea5 	bl	8003384 <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000640:	f000 f99a 	bl	8000978 <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3750      	adds	r7, #80	; 0x50
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_I2C1_Init+0x50>)
 800065a:	4a13      	ldr	r2, [pc, #76]	; (80006a8 <MX_I2C1_Init+0x54>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000660:	4a12      	ldr	r2, [pc, #72]	; (80006ac <MX_I2C1_Init+0x58>)
 8000662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000672:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000676:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000692:	f002 fabb 	bl	8002c0c <HAL_I2C_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800069c:	f000 f96c 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000a4 	.word	0x200000a4
 80006a8:	40005400 	.word	0x40005400
 80006ac:	000186a0 	.word	0x000186a0

080006b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <MX_SPI1_Init+0x64>)
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <MX_SPI1_Init+0x68>)
 80006b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_SPI1_Init+0x64>)
 80006bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_SPI1_Init+0x64>)
 80006dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_SPI1_Init+0x64>)
 80006fc:	220a      	movs	r2, #10
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_SPI1_Init+0x64>)
 8000702:	f003 f84b 	bl	800379c <HAL_SPI_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800070c:	f000 f934 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200000f8 	.word	0x200000f8
 8000718:	40013000 	.word	0x40013000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	; 0x30
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
 8000736:	4b8a      	ldr	r3, [pc, #552]	; (8000960 <MX_GPIO_Init+0x244>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a89      	ldr	r2, [pc, #548]	; (8000960 <MX_GPIO_Init+0x244>)
 800073c:	f043 0310 	orr.w	r3, r3, #16
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b87      	ldr	r3, [pc, #540]	; (8000960 <MX_GPIO_Init+0x244>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0310 	and.w	r3, r3, #16
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	4b83      	ldr	r3, [pc, #524]	; (8000960 <MX_GPIO_Init+0x244>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a82      	ldr	r2, [pc, #520]	; (8000960 <MX_GPIO_Init+0x244>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b80      	ldr	r3, [pc, #512]	; (8000960 <MX_GPIO_Init+0x244>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b7c      	ldr	r3, [pc, #496]	; (8000960 <MX_GPIO_Init+0x244>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a7b      	ldr	r2, [pc, #492]	; (8000960 <MX_GPIO_Init+0x244>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b79      	ldr	r3, [pc, #484]	; (8000960 <MX_GPIO_Init+0x244>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b75      	ldr	r3, [pc, #468]	; (8000960 <MX_GPIO_Init+0x244>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a74      	ldr	r2, [pc, #464]	; (8000960 <MX_GPIO_Init+0x244>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b72      	ldr	r3, [pc, #456]	; (8000960 <MX_GPIO_Init+0x244>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b6e      	ldr	r3, [pc, #440]	; (8000960 <MX_GPIO_Init+0x244>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a6d      	ldr	r2, [pc, #436]	; (8000960 <MX_GPIO_Init+0x244>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b6b      	ldr	r3, [pc, #428]	; (8000960 <MX_GPIO_Init+0x244>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b67      	ldr	r3, [pc, #412]	; (8000960 <MX_GPIO_Init+0x244>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a66      	ldr	r2, [pc, #408]	; (8000960 <MX_GPIO_Init+0x244>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b64      	ldr	r3, [pc, #400]	; (8000960 <MX_GPIO_Init+0x244>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|CS_I2C_SPI_Pin|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	210f      	movs	r1, #15
 80007de:	4861      	ldr	r0, [pc, #388]	; (8000964 <MX_GPIO_Init+0x248>)
 80007e0:	f000 fdf0 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2101      	movs	r1, #1
 80007e8:	485f      	ldr	r0, [pc, #380]	; (8000968 <MX_GPIO_Init+0x24c>)
 80007ea:	f000 fdeb 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 7103 	mov.w	r1, #524	; 0x20c
 80007f4:	485d      	ldr	r0, [pc, #372]	; (800096c <MX_GPIO_Init+0x250>)
 80007f6:	f000 fde5 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007fa:	2200      	movs	r2, #0
 80007fc:	f24f 0117 	movw	r1, #61463	; 0xf017
 8000800:	485b      	ldr	r0, [pc, #364]	; (8000970 <MX_GPIO_Init+0x254>)
 8000802:	f000 fddf 	bl	80013c4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	21c0      	movs	r1, #192	; 0xc0
 800080a:	4857      	ldr	r0, [pc, #348]	; (8000968 <MX_GPIO_Init+0x24c>)
 800080c:	f000 fdda 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2108      	movs	r1, #8
 8000814:	4857      	ldr	r0, [pc, #348]	; (8000974 <MX_GPIO_Init+0x258>)
 8000816:	f000 fdd5 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 CS_I2C_SPI_Pin PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|CS_I2C_SPI_Pin|GPIO_PIN_0|GPIO_PIN_1;
 800081a:	230f      	movs	r3, #15
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	484c      	ldr	r0, [pc, #304]	; (8000964 <MX_GPIO_Init+0x248>)
 8000832:	f000 fc2b 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC6 PC7 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8000836:	23c1      	movs	r3, #193	; 0xc1
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4846      	ldr	r0, [pc, #280]	; (8000968 <MX_GPIO_Init+0x24c>)
 800084e:	f000 fc1d 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000852:	2303      	movs	r3, #3
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000862:	2308      	movs	r3, #8
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	483f      	ldr	r0, [pc, #252]	; (800096c <MX_GPIO_Init+0x250>)
 800086e:	f000 fc0d 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9;
 8000872:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4838      	ldr	r0, [pc, #224]	; (800096c <MX_GPIO_Init+0x250>)
 800088c:	f000 fbfe 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin PB4 PB5 */
  GPIO_InitStruct.Pin = BOOT1_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8000890:	2334      	movs	r3, #52	; 0x34
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4834      	ldr	r0, [pc, #208]	; (8000974 <MX_GPIO_Init+0x258>)
 80008a4:	f000 fbf2 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ba:	2305      	movs	r3, #5
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	482b      	ldr	r0, [pc, #172]	; (8000974 <MX_GPIO_Init+0x258>)
 80008c6:	f000 fbe1 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d0:	2312      	movs	r3, #18
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008dc:	2304      	movs	r3, #4
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4823      	ldr	r0, [pc, #140]	; (8000974 <MX_GPIO_Init+0x258>)
 80008e8:	f000 fbd0 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           PD0 PD1 PD2 Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ec:	f24f 0317 	movw	r3, #61463	; 0xf017
 80008f0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	481a      	ldr	r0, [pc, #104]	; (8000970 <MX_GPIO_Init+0x254>)
 8000906:	f000 fbc1 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800090a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	4812      	ldr	r0, [pc, #72]	; (8000968 <MX_GPIO_Init+0x24c>)
 8000920:	f000 fbb4 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000924:	2320      	movs	r3, #32
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	480e      	ldr	r0, [pc, #56]	; (8000970 <MX_GPIO_Init+0x254>)
 8000938:	f000 fba8 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800093c:	2308      	movs	r3, #8
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4808      	ldr	r0, [pc, #32]	; (8000974 <MX_GPIO_Init+0x258>)
 8000954:	f000 fb9a 	bl	800108c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000958:	bf00      	nop
 800095a:	3730      	adds	r7, #48	; 0x30
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40023800 	.word	0x40023800
 8000964:	40021000 	.word	0x40021000
 8000968:	40020800 	.word	0x40020800
 800096c:	40020000 	.word	0x40020000
 8000970:	40020c00 	.word	0x40020c00
 8000974:	40020400 	.word	0x40020400

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	e7fe      	b.n	8000980 <Error_Handler+0x8>
	...

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <HAL_MspInit+0x4c>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009c2:	2007      	movs	r0, #7
 80009c4:	f000 fb20 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800

080009d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <HAL_I2C_MspInit+0x84>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d12c      	bne.n	8000a50 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a12:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a18:	2312      	movs	r3, #18
 8000a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a24:	2304      	movs	r3, #4
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480c      	ldr	r0, [pc, #48]	; (8000a60 <HAL_I2C_MspInit+0x8c>)
 8000a30:	f000 fb2c 	bl	800108c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a42:	6413      	str	r3, [r2, #64]	; 0x40
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	; 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020400 	.word	0x40020400

08000a64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a21      	ldr	r2, [pc, #132]	; (8000b08 <HAL_SPI_MspInit+0xa4>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d13b      	bne.n	8000afe <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <HAL_SPI_MspInit+0xa8>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a1f      	ldr	r2, [pc, #124]	; (8000b0c <HAL_SPI_MspInit+0xa8>)
 8000a90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <HAL_SPI_MspInit+0xa8>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <HAL_SPI_MspInit+0xa8>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <HAL_SPI_MspInit+0xa8>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <HAL_SPI_MspInit+0xa8>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000abe:	2310      	movs	r3, #16
 8000ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ace:	2305      	movs	r3, #5
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <HAL_SPI_MspInit+0xac>)
 8000ada:	f000 fad7 	bl	800108c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ade:	23e0      	movs	r3, #224	; 0xe0
 8000ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aee:	2305      	movs	r3, #5
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <HAL_SPI_MspInit+0xac>)
 8000afa:	f000 fac7 	bl	800108c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000afe:	bf00      	nop
 8000b00:	3728      	adds	r7, #40	; 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40013000 	.word	0x40013000
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020000 	.word	0x40020000

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <NMI_Handler+0x4>

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <MemManage_Handler+0x4>

08000b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b60:	f000 f93e 	bl	8000de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <OTG_FS_IRQHandler+0x10>)
 8000b6e:	f000 fead 	bl	80018cc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000534 	.word	0x20000534

08000b7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	e00a      	b.n	8000ba4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b8e:	f3af 8000 	nop.w
 8000b92:	4601      	mov	r1, r0
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	60ba      	str	r2, [r7, #8]
 8000b9a:	b2ca      	uxtb	r2, r1
 8000b9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	dbf0      	blt.n	8000b8e <_read+0x12>
  }

  return len;
 8000bac:	687b      	ldr	r3, [r7, #4]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b086      	sub	sp, #24
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	e009      	b.n	8000bdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	60ba      	str	r2, [r7, #8]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	dbf1      	blt.n	8000bc8 <_write+0x12>
  }
  return len;
 8000be4:	687b      	ldr	r3, [r7, #4]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <_close>:

int _close(int file)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
 8000c0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c16:	605a      	str	r2, [r3, #4]
  return 0;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <_isatty>:

int _isatty(int file)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c60:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <_sbrk+0x5c>)
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <_sbrk+0x60>)
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <_sbrk+0x64>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <_sbrk+0x68>)
 8000c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d207      	bcs.n	8000c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c88:	f006 fbde 	bl	8007448 <__errno>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	220c      	movs	r2, #12
 8000c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	e009      	b.n	8000cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <_sbrk+0x64>)
 8000ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000caa:	68fb      	ldr	r3, [r7, #12]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20020000 	.word	0x20020000
 8000cb8:	00000400 	.word	0x00000400
 8000cbc:	20000150 	.word	0x20000150
 8000cc0:	20000988 	.word	0x20000988

08000cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <SystemInit+0x20>)
 8000cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <SystemInit+0x20>)
 8000cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cee:	490e      	ldr	r1, [pc, #56]	; (8000d28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf0:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d04:	4c0b      	ldr	r4, [pc, #44]	; (8000d34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d12:	f7ff ffd7 	bl	8000cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d16:	f006 fb9d 	bl	8007454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1a:	f7ff fbd3 	bl	80004c4 <main>
  bx  lr    
 8000d1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000d2c:	080077f0 	.word	0x080077f0
  ldr r2, =_sbss
 8000d30:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000d34:	20000984 	.word	0x20000984

08000d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC_IRQHandler>
	...

08000d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <HAL_Init+0x40>)
 8000d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_Init+0x40>)
 8000d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_Init+0x40>)
 8000d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f000 f94f 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f000 f808 	bl	8000d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d70:	f7ff fe08 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023c00 	.word	0x40023c00

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x54>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_InitTick+0x58>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f967 	bl	8001072 <HAL_SYSTICK_Config>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00e      	b.n	8000dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b0f      	cmp	r3, #15
 8000db2:	d80a      	bhi.n	8000dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	2200      	movs	r2, #0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f000 f92f 	bl	800101e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <HAL_InitTick+0x5c>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e000      	b.n	8000dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000004 	.word	0x20000004

08000de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x20>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x24>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <HAL_IncTick+0x24>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000154 	.word	0x20000154

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000154 	.word	0x20000154

08000e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff ffee 	bl	8000e08 <HAL_GetTick>
 8000e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e38:	d005      	beq.n	8000e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_Delay+0x44>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4413      	add	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e46:	bf00      	nop
 8000e48:	f7ff ffde 	bl	8000e08 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d8f7      	bhi.n	8000e48 <HAL_Delay+0x28>
  {
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000008 	.word	0x20000008

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff29 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff3e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff8e 	bl	8000f5c <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff31 	bl	8000ecc <__NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa2 	bl	8000fc4 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
 80010a6:	e16b      	b.n	8001380 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a8:	2201      	movs	r2, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	f040 815a 	bne.w	800137a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d005      	beq.n	80010de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d130      	bne.n	8001140 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	2203      	movs	r2, #3
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	091b      	lsrs	r3, r3, #4
 800112a:	f003 0201 	and.w	r2, r3, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b03      	cmp	r3, #3
 800114a:	d017      	beq.n	800117c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d123      	bne.n	80011d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	08da      	lsrs	r2, r3, #3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3208      	adds	r2, #8
 8001190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	220f      	movs	r2, #15
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	691a      	ldr	r2, [r3, #16]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	08da      	lsrs	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3208      	adds	r2, #8
 80011ca:	69b9      	ldr	r1, [r7, #24]
 80011cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0203 	and.w	r2, r3, #3
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 80b4 	beq.w	800137a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b60      	ldr	r3, [pc, #384]	; (8001398 <HAL_GPIO_Init+0x30c>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	4a5f      	ldr	r2, [pc, #380]	; (8001398 <HAL_GPIO_Init+0x30c>)
 800121c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001220:	6453      	str	r3, [r2, #68]	; 0x44
 8001222:	4b5d      	ldr	r3, [pc, #372]	; (8001398 <HAL_GPIO_Init+0x30c>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800122e:	4a5b      	ldr	r2, [pc, #364]	; (800139c <HAL_GPIO_Init+0x310>)
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	3302      	adds	r3, #2
 8001236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	220f      	movs	r2, #15
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a52      	ldr	r2, [pc, #328]	; (80013a0 <HAL_GPIO_Init+0x314>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d02b      	beq.n	80012b2 <HAL_GPIO_Init+0x226>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a51      	ldr	r2, [pc, #324]	; (80013a4 <HAL_GPIO_Init+0x318>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d025      	beq.n	80012ae <HAL_GPIO_Init+0x222>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a50      	ldr	r2, [pc, #320]	; (80013a8 <HAL_GPIO_Init+0x31c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d01f      	beq.n	80012aa <HAL_GPIO_Init+0x21e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4f      	ldr	r2, [pc, #316]	; (80013ac <HAL_GPIO_Init+0x320>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d019      	beq.n	80012a6 <HAL_GPIO_Init+0x21a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4e      	ldr	r2, [pc, #312]	; (80013b0 <HAL_GPIO_Init+0x324>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d013      	beq.n	80012a2 <HAL_GPIO_Init+0x216>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4d      	ldr	r2, [pc, #308]	; (80013b4 <HAL_GPIO_Init+0x328>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d00d      	beq.n	800129e <HAL_GPIO_Init+0x212>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4c      	ldr	r2, [pc, #304]	; (80013b8 <HAL_GPIO_Init+0x32c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d007      	beq.n	800129a <HAL_GPIO_Init+0x20e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4b      	ldr	r2, [pc, #300]	; (80013bc <HAL_GPIO_Init+0x330>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d101      	bne.n	8001296 <HAL_GPIO_Init+0x20a>
 8001292:	2307      	movs	r3, #7
 8001294:	e00e      	b.n	80012b4 <HAL_GPIO_Init+0x228>
 8001296:	2308      	movs	r3, #8
 8001298:	e00c      	b.n	80012b4 <HAL_GPIO_Init+0x228>
 800129a:	2306      	movs	r3, #6
 800129c:	e00a      	b.n	80012b4 <HAL_GPIO_Init+0x228>
 800129e:	2305      	movs	r3, #5
 80012a0:	e008      	b.n	80012b4 <HAL_GPIO_Init+0x228>
 80012a2:	2304      	movs	r3, #4
 80012a4:	e006      	b.n	80012b4 <HAL_GPIO_Init+0x228>
 80012a6:	2303      	movs	r3, #3
 80012a8:	e004      	b.n	80012b4 <HAL_GPIO_Init+0x228>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e002      	b.n	80012b4 <HAL_GPIO_Init+0x228>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <HAL_GPIO_Init+0x228>
 80012b2:	2300      	movs	r3, #0
 80012b4:	69fa      	ldr	r2, [r7, #28]
 80012b6:	f002 0203 	and.w	r2, r2, #3
 80012ba:	0092      	lsls	r2, r2, #2
 80012bc:	4093      	lsls	r3, r2
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c4:	4935      	ldr	r1, [pc, #212]	; (800139c <HAL_GPIO_Init+0x310>)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3302      	adds	r3, #2
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d2:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <HAL_GPIO_Init+0x334>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f6:	4a32      	ldr	r2, [pc, #200]	; (80013c0 <HAL_GPIO_Init+0x334>)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012fc:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <HAL_GPIO_Init+0x334>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001320:	4a27      	ldr	r2, [pc, #156]	; (80013c0 <HAL_GPIO_Init+0x334>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <HAL_GPIO_Init+0x334>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800134a:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <HAL_GPIO_Init+0x334>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <HAL_GPIO_Init+0x334>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001374:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <HAL_GPIO_Init+0x334>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3301      	adds	r3, #1
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	2b0f      	cmp	r3, #15
 8001384:	f67f ae90 	bls.w	80010a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40013800 	.word	0x40013800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40020800 	.word	0x40020800
 80013ac:	40020c00 	.word	0x40020c00
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40021400 	.word	0x40021400
 80013b8:	40021800 	.word	0x40021800
 80013bc:	40021c00 	.word	0x40021c00
 80013c0:	40013c00 	.word	0x40013c00

080013c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
 80013d0:	4613      	mov	r3, r2
 80013d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d4:	787b      	ldrb	r3, [r7, #1]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e0:	e003      	b.n	80013ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013e2:	887b      	ldrh	r3, [r7, #2]
 80013e4:	041a      	lsls	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	619a      	str	r2, [r3, #24]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f8:	b08f      	sub	sp, #60	; 0x3c
 80013fa:	af0a      	add	r7, sp, #40	; 0x28
 80013fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e054      	b.n	80014b2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d106      	bne.n	8001428 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f005 fa76 	bl	8006914 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2203      	movs	r2, #3
 800142c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f002 faa3 	bl	8003992 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	687e      	ldr	r6, [r7, #4]
 8001454:	466d      	mov	r5, sp
 8001456:	f106 0410 	add.w	r4, r6, #16
 800145a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001462:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001466:	e885 0003 	stmia.w	r5, {r0, r1}
 800146a:	1d33      	adds	r3, r6, #4
 800146c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800146e:	6838      	ldr	r0, [r7, #0]
 8001470:	f002 fa1d 	bl	80038ae <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2101      	movs	r1, #1
 800147a:	4618      	mov	r0, r3
 800147c:	f002 fa9a 	bl	80039b4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	687e      	ldr	r6, [r7, #4]
 8001488:	466d      	mov	r5, sp
 800148a:	f106 0410 	add.w	r4, r6, #16
 800148e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001496:	e894 0003 	ldmia.w	r4, {r0, r1}
 800149a:	e885 0003 	stmia.w	r5, {r0, r1}
 800149e:	1d33      	adds	r3, r6, #4
 80014a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a2:	6838      	ldr	r0, [r7, #0]
 80014a4:	f002 fc22 	bl	8003cec <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014ba <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80014ba:	b590      	push	{r4, r7, lr}
 80014bc:	b089      	sub	sp, #36	; 0x24
 80014be:	af04      	add	r7, sp, #16
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	4608      	mov	r0, r1
 80014c4:	4611      	mov	r1, r2
 80014c6:	461a      	mov	r2, r3
 80014c8:	4603      	mov	r3, r0
 80014ca:	70fb      	strb	r3, [r7, #3]
 80014cc:	460b      	mov	r3, r1
 80014ce:	70bb      	strb	r3, [r7, #2]
 80014d0:	4613      	mov	r3, r2
 80014d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d101      	bne.n	80014e2 <HAL_HCD_HC_Init+0x28>
 80014de:	2302      	movs	r3, #2
 80014e0:	e076      	b.n	80015d0 <HAL_HCD_HC_Init+0x116>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	212c      	movs	r1, #44	; 0x2c
 80014f0:	fb01 f303 	mul.w	r3, r1, r3
 80014f4:	4413      	add	r3, r2
 80014f6:	333d      	adds	r3, #61	; 0x3d
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	212c      	movs	r1, #44	; 0x2c
 8001502:	fb01 f303 	mul.w	r3, r1, r3
 8001506:	4413      	add	r3, r2
 8001508:	3338      	adds	r3, #56	; 0x38
 800150a:	787a      	ldrb	r2, [r7, #1]
 800150c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	212c      	movs	r1, #44	; 0x2c
 8001514:	fb01 f303 	mul.w	r3, r1, r3
 8001518:	4413      	add	r3, r2
 800151a:	3340      	adds	r3, #64	; 0x40
 800151c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800151e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	212c      	movs	r1, #44	; 0x2c
 8001526:	fb01 f303 	mul.w	r3, r1, r3
 800152a:	4413      	add	r3, r2
 800152c:	3339      	adds	r3, #57	; 0x39
 800152e:	78fa      	ldrb	r2, [r7, #3]
 8001530:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	212c      	movs	r1, #44	; 0x2c
 8001538:	fb01 f303 	mul.w	r3, r1, r3
 800153c:	4413      	add	r3, r2
 800153e:	333f      	adds	r3, #63	; 0x3f
 8001540:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001544:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	78ba      	ldrb	r2, [r7, #2]
 800154a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800154e:	b2d0      	uxtb	r0, r2
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	212c      	movs	r1, #44	; 0x2c
 8001554:	fb01 f303 	mul.w	r3, r1, r3
 8001558:	4413      	add	r3, r2
 800155a:	333a      	adds	r3, #58	; 0x3a
 800155c:	4602      	mov	r2, r0
 800155e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001560:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001564:	2b00      	cmp	r3, #0
 8001566:	da09      	bge.n	800157c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	212c      	movs	r1, #44	; 0x2c
 800156e:	fb01 f303 	mul.w	r3, r1, r3
 8001572:	4413      	add	r3, r2
 8001574:	333b      	adds	r3, #59	; 0x3b
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	e008      	b.n	800158e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	212c      	movs	r1, #44	; 0x2c
 8001582:	fb01 f303 	mul.w	r3, r1, r3
 8001586:	4413      	add	r3, r2
 8001588:	333b      	adds	r3, #59	; 0x3b
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	212c      	movs	r1, #44	; 0x2c
 8001594:	fb01 f303 	mul.w	r3, r1, r3
 8001598:	4413      	add	r3, r2
 800159a:	333c      	adds	r3, #60	; 0x3c
 800159c:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015a0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	787c      	ldrb	r4, [r7, #1]
 80015a8:	78ba      	ldrb	r2, [r7, #2]
 80015aa:	78f9      	ldrb	r1, [r7, #3]
 80015ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015ae:	9302      	str	r3, [sp, #8]
 80015b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	4623      	mov	r3, r4
 80015be:	f002 fd1b 	bl	8003ff8 <USB_HC_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd90      	pop	{r4, r7, pc}

080015d8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d101      	bne.n	80015f6 <HAL_HCD_HC_Halt+0x1e>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e00f      	b.n	8001616 <HAL_HCD_HC_Halt+0x3e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	78fa      	ldrb	r2, [r7, #3]
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f002 ff6b 	bl	80044e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	4608      	mov	r0, r1
 800162a:	4611      	mov	r1, r2
 800162c:	461a      	mov	r2, r3
 800162e:	4603      	mov	r3, r0
 8001630:	70fb      	strb	r3, [r7, #3]
 8001632:	460b      	mov	r3, r1
 8001634:	70bb      	strb	r3, [r7, #2]
 8001636:	4613      	mov	r3, r2
 8001638:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	212c      	movs	r1, #44	; 0x2c
 8001640:	fb01 f303 	mul.w	r3, r1, r3
 8001644:	4413      	add	r3, r2
 8001646:	333b      	adds	r3, #59	; 0x3b
 8001648:	78ba      	ldrb	r2, [r7, #2]
 800164a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	212c      	movs	r1, #44	; 0x2c
 8001652:	fb01 f303 	mul.w	r3, r1, r3
 8001656:	4413      	add	r3, r2
 8001658:	333f      	adds	r3, #63	; 0x3f
 800165a:	787a      	ldrb	r2, [r7, #1]
 800165c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800165e:	7c3b      	ldrb	r3, [r7, #16]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d112      	bne.n	800168a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	212c      	movs	r1, #44	; 0x2c
 800166a:	fb01 f303 	mul.w	r3, r1, r3
 800166e:	4413      	add	r3, r2
 8001670:	3342      	adds	r3, #66	; 0x42
 8001672:	2203      	movs	r2, #3
 8001674:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001676:	78fb      	ldrb	r3, [r7, #3]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	212c      	movs	r1, #44	; 0x2c
 800167c:	fb01 f303 	mul.w	r3, r1, r3
 8001680:	4413      	add	r3, r2
 8001682:	333d      	adds	r3, #61	; 0x3d
 8001684:	7f3a      	ldrb	r2, [r7, #28]
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	e008      	b.n	800169c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	212c      	movs	r1, #44	; 0x2c
 8001690:	fb01 f303 	mul.w	r3, r1, r3
 8001694:	4413      	add	r3, r2
 8001696:	3342      	adds	r3, #66	; 0x42
 8001698:	2202      	movs	r2, #2
 800169a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800169c:	787b      	ldrb	r3, [r7, #1]
 800169e:	2b03      	cmp	r3, #3
 80016a0:	f200 80c6 	bhi.w	8001830 <HAL_HCD_HC_SubmitRequest+0x210>
 80016a4:	a201      	add	r2, pc, #4	; (adr r2, 80016ac <HAL_HCD_HC_SubmitRequest+0x8c>)
 80016a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016aa:	bf00      	nop
 80016ac:	080016bd 	.word	0x080016bd
 80016b0:	0800181d 	.word	0x0800181d
 80016b4:	08001721 	.word	0x08001721
 80016b8:	0800179f 	.word	0x0800179f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016bc:	7c3b      	ldrb	r3, [r7, #16]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	f040 80b8 	bne.w	8001834 <HAL_HCD_HC_SubmitRequest+0x214>
 80016c4:	78bb      	ldrb	r3, [r7, #2]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f040 80b4 	bne.w	8001834 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80016cc:	8b3b      	ldrh	r3, [r7, #24]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d108      	bne.n	80016e4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	212c      	movs	r1, #44	; 0x2c
 80016d8:	fb01 f303 	mul.w	r3, r1, r3
 80016dc:	4413      	add	r3, r2
 80016de:	3355      	adds	r3, #85	; 0x55
 80016e0:	2201      	movs	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	212c      	movs	r1, #44	; 0x2c
 80016ea:	fb01 f303 	mul.w	r3, r1, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	3355      	adds	r3, #85	; 0x55
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d109      	bne.n	800170c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	212c      	movs	r1, #44	; 0x2c
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	3342      	adds	r3, #66	; 0x42
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800170a:	e093      	b.n	8001834 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	212c      	movs	r1, #44	; 0x2c
 8001712:	fb01 f303 	mul.w	r3, r1, r3
 8001716:	4413      	add	r3, r2
 8001718:	3342      	adds	r3, #66	; 0x42
 800171a:	2202      	movs	r2, #2
 800171c:	701a      	strb	r2, [r3, #0]
      break;
 800171e:	e089      	b.n	8001834 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001720:	78bb      	ldrb	r3, [r7, #2]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d11d      	bne.n	8001762 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	212c      	movs	r1, #44	; 0x2c
 800172c:	fb01 f303 	mul.w	r3, r1, r3
 8001730:	4413      	add	r3, r2
 8001732:	3355      	adds	r3, #85	; 0x55
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d109      	bne.n	800174e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	212c      	movs	r1, #44	; 0x2c
 8001740:	fb01 f303 	mul.w	r3, r1, r3
 8001744:	4413      	add	r3, r2
 8001746:	3342      	adds	r3, #66	; 0x42
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800174c:	e073      	b.n	8001836 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	212c      	movs	r1, #44	; 0x2c
 8001754:	fb01 f303 	mul.w	r3, r1, r3
 8001758:	4413      	add	r3, r2
 800175a:	3342      	adds	r3, #66	; 0x42
 800175c:	2202      	movs	r2, #2
 800175e:	701a      	strb	r2, [r3, #0]
      break;
 8001760:	e069      	b.n	8001836 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	212c      	movs	r1, #44	; 0x2c
 8001768:	fb01 f303 	mul.w	r3, r1, r3
 800176c:	4413      	add	r3, r2
 800176e:	3354      	adds	r3, #84	; 0x54
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d109      	bne.n	800178a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	212c      	movs	r1, #44	; 0x2c
 800177c:	fb01 f303 	mul.w	r3, r1, r3
 8001780:	4413      	add	r3, r2
 8001782:	3342      	adds	r3, #66	; 0x42
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
      break;
 8001788:	e055      	b.n	8001836 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	212c      	movs	r1, #44	; 0x2c
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	4413      	add	r3, r2
 8001796:	3342      	adds	r3, #66	; 0x42
 8001798:	2202      	movs	r2, #2
 800179a:	701a      	strb	r2, [r3, #0]
      break;
 800179c:	e04b      	b.n	8001836 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800179e:	78bb      	ldrb	r3, [r7, #2]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d11d      	bne.n	80017e0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	212c      	movs	r1, #44	; 0x2c
 80017aa:	fb01 f303 	mul.w	r3, r1, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	3355      	adds	r3, #85	; 0x55
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d109      	bne.n	80017cc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	212c      	movs	r1, #44	; 0x2c
 80017be:	fb01 f303 	mul.w	r3, r1, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	3342      	adds	r3, #66	; 0x42
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017ca:	e034      	b.n	8001836 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	212c      	movs	r1, #44	; 0x2c
 80017d2:	fb01 f303 	mul.w	r3, r1, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	3342      	adds	r3, #66	; 0x42
 80017da:	2202      	movs	r2, #2
 80017dc:	701a      	strb	r2, [r3, #0]
      break;
 80017de:	e02a      	b.n	8001836 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	212c      	movs	r1, #44	; 0x2c
 80017e6:	fb01 f303 	mul.w	r3, r1, r3
 80017ea:	4413      	add	r3, r2
 80017ec:	3354      	adds	r3, #84	; 0x54
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d109      	bne.n	8001808 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	212c      	movs	r1, #44	; 0x2c
 80017fa:	fb01 f303 	mul.w	r3, r1, r3
 80017fe:	4413      	add	r3, r2
 8001800:	3342      	adds	r3, #66	; 0x42
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
      break;
 8001806:	e016      	b.n	8001836 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	212c      	movs	r1, #44	; 0x2c
 800180e:	fb01 f303 	mul.w	r3, r1, r3
 8001812:	4413      	add	r3, r2
 8001814:	3342      	adds	r3, #66	; 0x42
 8001816:	2202      	movs	r2, #2
 8001818:	701a      	strb	r2, [r3, #0]
      break;
 800181a:	e00c      	b.n	8001836 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	212c      	movs	r1, #44	; 0x2c
 8001822:	fb01 f303 	mul.w	r3, r1, r3
 8001826:	4413      	add	r3, r2
 8001828:	3342      	adds	r3, #66	; 0x42
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
      break;
 800182e:	e002      	b.n	8001836 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001830:	bf00      	nop
 8001832:	e000      	b.n	8001836 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001834:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	212c      	movs	r1, #44	; 0x2c
 800183c:	fb01 f303 	mul.w	r3, r1, r3
 8001840:	4413      	add	r3, r2
 8001842:	3344      	adds	r3, #68	; 0x44
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001848:	78fb      	ldrb	r3, [r7, #3]
 800184a:	8b3a      	ldrh	r2, [r7, #24]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	202c      	movs	r0, #44	; 0x2c
 8001850:	fb00 f303 	mul.w	r3, r0, r3
 8001854:	440b      	add	r3, r1
 8001856:	334c      	adds	r3, #76	; 0x4c
 8001858:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	212c      	movs	r1, #44	; 0x2c
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	3360      	adds	r3, #96	; 0x60
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	212c      	movs	r1, #44	; 0x2c
 8001872:	fb01 f303 	mul.w	r3, r1, r3
 8001876:	4413      	add	r3, r2
 8001878:	3350      	adds	r3, #80	; 0x50
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	212c      	movs	r1, #44	; 0x2c
 8001884:	fb01 f303 	mul.w	r3, r1, r3
 8001888:	4413      	add	r3, r2
 800188a:	3339      	adds	r3, #57	; 0x39
 800188c:	78fa      	ldrb	r2, [r7, #3]
 800188e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	212c      	movs	r1, #44	; 0x2c
 8001896:	fb01 f303 	mul.w	r3, r1, r3
 800189a:	4413      	add	r3, r2
 800189c:	3361      	adds	r3, #97	; 0x61
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	222c      	movs	r2, #44	; 0x2c
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	3338      	adds	r3, #56	; 0x38
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	18d1      	adds	r1, r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	f002 fcbe 	bl	800423c <USB_HC_StartXfer>
 80018c0:	4603      	mov	r3, r0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop

080018cc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 f9bf 	bl	8003c66 <USB_GetMode>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	f040 80f6 	bne.w	8001adc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f002 f9a3 	bl	8003c40 <USB_ReadInterrupts>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 80ec 	beq.w	8001ada <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f002 f99a 	bl	8003c40 <USB_ReadInterrupts>
 800190c:	4603      	mov	r3, r0
 800190e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001912:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001916:	d104      	bne.n	8001922 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001920:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f002 f98a 	bl	8003c40 <USB_ReadInterrupts>
 800192c:	4603      	mov	r3, r0
 800192e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001936:	d104      	bne.n	8001942 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001940:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f002 f97a 	bl	8003c40 <USB_ReadInterrupts>
 800194c:	4603      	mov	r3, r0
 800194e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001952:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001956:	d104      	bne.n	8001962 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001960:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f002 f96a 	bl	8003c40 <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b02      	cmp	r3, #2
 8001974:	d103      	bne.n	800197e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2202      	movs	r2, #2
 800197c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f002 f95c 	bl	8003c40 <USB_ReadInterrupts>
 8001988:	4603      	mov	r3, r0
 800198a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800198e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001992:	d11c      	bne.n	80019ce <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800199c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10f      	bne.n	80019ce <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80019ae:	2110      	movs	r1, #16
 80019b0:	6938      	ldr	r0, [r7, #16]
 80019b2:	f002 f84b 	bl	8003a4c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80019b6:	6938      	ldr	r0, [r7, #16]
 80019b8:	f002 f87c 	bl	8003ab4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2101      	movs	r1, #1
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 fa52 	bl	8003e6c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f005 f813 	bl	80069f4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 f934 	bl	8003c40 <USB_ReadInterrupts>
 80019d8:	4603      	mov	r3, r0
 80019da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e2:	d102      	bne.n	80019ea <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f001 f89e 	bl	8002b26 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 f926 	bl	8003c40 <USB_ReadInterrupts>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d106      	bne.n	8001a0c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f004 ffdc 	bl	80069bc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2208      	movs	r2, #8
 8001a0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f002 f915 	bl	8003c40 <USB_ReadInterrupts>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f003 0310 	and.w	r3, r3, #16
 8001a1c:	2b10      	cmp	r3, #16
 8001a1e:	d101      	bne.n	8001a24 <HAL_HCD_IRQHandler+0x158>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <HAL_HCD_IRQHandler+0x15a>
 8001a24:	2300      	movs	r3, #0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d012      	beq.n	8001a50 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699a      	ldr	r2, [r3, #24]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0210 	bic.w	r2, r2, #16
 8001a38:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 ffa1 	bl	8002982 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	699a      	ldr	r2, [r3, #24]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0210 	orr.w	r2, r2, #16
 8001a4e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f002 f8f3 	bl	8003c40 <USB_ReadInterrupts>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a64:	d13a      	bne.n	8001adc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fd28 	bl	80044c0 <USB_HC_ReadInterrupt>
 8001a70:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	e025      	b.n	8001ac4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d018      	beq.n	8001abe <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	015a      	lsls	r2, r3, #5
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aa2:	d106      	bne.n	8001ab2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f8ab 	bl	8001c06 <HCD_HC_IN_IRQHandler>
 8001ab0:	e005      	b.n	8001abe <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fbf9 	bl	80022b0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d3d4      	bcc.n	8001a78 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ad6:	615a      	str	r2, [r3, #20]
 8001ad8:	e000      	b.n	8001adc <HAL_HCD_IRQHandler+0x210>
      return;
 8001ada:	bf00      	nop
    }
  }
}
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d101      	bne.n	8001af8 <HAL_HCD_Start+0x16>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e013      	b.n	8001b20 <HAL_HCD_Start+0x3e>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2101      	movs	r1, #1
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 fa14 	bl	8003f34 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f001 ff2d 	bl	8003970 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_HCD_Stop+0x16>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e00d      	b.n	8001b5a <HAL_HCD_Stop+0x32>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 fe02 	bl	8004754 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f002 f9b6 	bl	8003ee0 <USB_ResetPort>
 8001b74:	4603      	mov	r3, r0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	212c      	movs	r1, #44	; 0x2c
 8001b90:	fb01 f303 	mul.w	r3, r1, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	3360      	adds	r3, #96	; 0x60
 8001b98:	781b      	ldrb	r3, [r3, #0]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001bb2:	78fb      	ldrb	r3, [r7, #3]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	212c      	movs	r1, #44	; 0x2c
 8001bb8:	fb01 f303 	mul.w	r3, r1, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3350      	adds	r3, #80	; 0x50
 8001bc0:	681b      	ldr	r3, [r3, #0]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f002 f9fa 	bl	8003fd4 <USB_GetCurrentFrame>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 f9d5 	bl	8003fa6 <USB_GetHostSpeed>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	015a      	lsls	r2, r3, #5
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d11a      	bne.n	8001c6c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	015a      	lsls	r2, r3, #5
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c42:	461a      	mov	r2, r3
 8001c44:	2304      	movs	r3, #4
 8001c46:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	212c      	movs	r1, #44	; 0x2c
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	3361      	adds	r3, #97	; 0x61
 8001c56:	2206      	movs	r2, #6
 8001c58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f002 fc3c 	bl	80044e2 <USB_HC_Halt>
 8001c6a:	e0af      	b.n	8001dcc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	015a      	lsls	r2, r3, #5
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4413      	add	r3, r2
 8001c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c82:	d11b      	bne.n	8001cbc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	015a      	lsls	r2, r3, #5
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c90:	461a      	mov	r2, r3
 8001c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c96:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	212c      	movs	r1, #44	; 0x2c
 8001c9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3361      	adds	r3, #97	; 0x61
 8001ca6:	2207      	movs	r2, #7
 8001ca8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f002 fc14 	bl	80044e2 <USB_HC_Halt>
 8001cba:	e087      	b.n	8001dcc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	015a      	lsls	r2, r3, #5
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b20      	cmp	r3, #32
 8001cd0:	d109      	bne.n	8001ce6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	015a      	lsls	r2, r3, #5
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4413      	add	r3, r2
 8001cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cde:	461a      	mov	r2, r3
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	6093      	str	r3, [r2, #8]
 8001ce4:	e072      	b.n	8001dcc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	015a      	lsls	r2, r3, #5
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d11a      	bne.n	8001d32 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	015a      	lsls	r2, r3, #5
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4413      	add	r3, r2
 8001d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d08:	461a      	mov	r2, r3
 8001d0a:	2308      	movs	r3, #8
 8001d0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	212c      	movs	r1, #44	; 0x2c
 8001d14:	fb01 f303 	mul.w	r3, r1, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	3361      	adds	r3, #97	; 0x61
 8001d1c:	2205      	movs	r2, #5
 8001d1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f002 fbd9 	bl	80044e2 <USB_HC_Halt>
 8001d30:	e04c      	b.n	8001dcc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	015a      	lsls	r2, r3, #5
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d48:	d11b      	bne.n	8001d82 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	015a      	lsls	r2, r3, #5
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d56:	461a      	mov	r2, r3
 8001d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	212c      	movs	r1, #44	; 0x2c
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	3361      	adds	r3, #97	; 0x61
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	4611      	mov	r1, r2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f002 fbb1 	bl	80044e2 <USB_HC_Halt>
 8001d80:	e024      	b.n	8001dcc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d94:	2b80      	cmp	r3, #128	; 0x80
 8001d96:	d119      	bne.n	8001dcc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da4:	461a      	mov	r2, r3
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	212c      	movs	r1, #44	; 0x2c
 8001db0:	fb01 f303 	mul.w	r3, r1, r3
 8001db4:	4413      	add	r3, r2
 8001db6:	3361      	adds	r3, #97	; 0x61
 8001db8:	2206      	movs	r2, #6
 8001dba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f002 fb8b 	bl	80044e2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001de2:	d112      	bne.n	8001e0a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f002 fb77 	bl	80044e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	015a      	lsls	r2, r3, #5
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e00:	461a      	mov	r2, r3
 8001e02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e06:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e08:	e24e      	b.n	80022a8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	015a      	lsls	r2, r3, #5
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	f040 80df 	bne.w	8001fe0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d019      	beq.n	8001e5e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	212c      	movs	r1, #44	; 0x2c
 8001e30:	fb01 f303 	mul.w	r3, r1, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	3348      	adds	r3, #72	; 0x48
 8001e38:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	0159      	lsls	r1, r3, #5
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	440b      	add	r3, r1
 8001e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e4c:	1ad2      	subs	r2, r2, r3
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	202c      	movs	r0, #44	; 0x2c
 8001e54:	fb00 f303 	mul.w	r3, r0, r3
 8001e58:	440b      	add	r3, r1
 8001e5a:	3350      	adds	r3, #80	; 0x50
 8001e5c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	212c      	movs	r1, #44	; 0x2c
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	3361      	adds	r3, #97	; 0x61
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	212c      	movs	r1, #44	; 0x2c
 8001e76:	fb01 f303 	mul.w	r3, r1, r3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	335c      	adds	r3, #92	; 0x5c
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	015a      	lsls	r2, r3, #5
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2301      	movs	r3, #1
 8001e92:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	212c      	movs	r1, #44	; 0x2c
 8001e9a:	fb01 f303 	mul.w	r3, r1, r3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	333f      	adds	r3, #63	; 0x3f
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d009      	beq.n	8001ebc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	212c      	movs	r1, #44	; 0x2c
 8001eae:	fb01 f303 	mul.w	r3, r1, r3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	333f      	adds	r3, #63	; 0x3f
 8001eb6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d111      	bne.n	8001ee0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f002 fb0b 	bl	80044e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	015a      	lsls	r2, r3, #5
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2310      	movs	r3, #16
 8001edc:	6093      	str	r3, [r2, #8]
 8001ede:	e03a      	b.n	8001f56 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	212c      	movs	r1, #44	; 0x2c
 8001ee6:	fb01 f303 	mul.w	r3, r1, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	333f      	adds	r3, #63	; 0x3f
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d009      	beq.n	8001f08 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	212c      	movs	r1, #44	; 0x2c
 8001efa:	fb01 f303 	mul.w	r3, r1, r3
 8001efe:	4413      	add	r3, r2
 8001f00:	333f      	adds	r3, #63	; 0x3f
 8001f02:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d126      	bne.n	8001f56 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	015a      	lsls	r2, r3, #5
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	0151      	lsls	r1, r2, #5
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	440a      	add	r2, r1
 8001f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f26:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	212c      	movs	r1, #44	; 0x2c
 8001f2e:	fb01 f303 	mul.w	r3, r1, r3
 8001f32:	4413      	add	r3, r2
 8001f34:	3360      	adds	r3, #96	; 0x60
 8001f36:	2201      	movs	r2, #1
 8001f38:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	b2d9      	uxtb	r1, r3
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	202c      	movs	r0, #44	; 0x2c
 8001f44:	fb00 f303 	mul.w	r3, r0, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	3360      	adds	r3, #96	; 0x60
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f004 fd5d 	bl	8006a10 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d12b      	bne.n	8001fb6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	212c      	movs	r1, #44	; 0x2c
 8001f64:	fb01 f303 	mul.w	r3, r1, r3
 8001f68:	4413      	add	r3, r2
 8001f6a:	3348      	adds	r3, #72	; 0x48
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	202c      	movs	r0, #44	; 0x2c
 8001f74:	fb00 f202 	mul.w	r2, r0, r2
 8001f78:	440a      	add	r2, r1
 8001f7a:	3240      	adds	r2, #64	; 0x40
 8001f7c:	8812      	ldrh	r2, [r2, #0]
 8001f7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 818e 	beq.w	80022a8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	212c      	movs	r1, #44	; 0x2c
 8001f92:	fb01 f303 	mul.w	r3, r1, r3
 8001f96:	4413      	add	r3, r2
 8001f98:	3354      	adds	r3, #84	; 0x54
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	f083 0301 	eor.w	r3, r3, #1
 8001fa0:	b2d8      	uxtb	r0, r3
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	212c      	movs	r1, #44	; 0x2c
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	3354      	adds	r3, #84	; 0x54
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	701a      	strb	r2, [r3, #0]
}
 8001fb4:	e178      	b.n	80022a8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	212c      	movs	r1, #44	; 0x2c
 8001fbc:	fb01 f303 	mul.w	r3, r1, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3354      	adds	r3, #84	; 0x54
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	f083 0301 	eor.w	r3, r3, #1
 8001fca:	b2d8      	uxtb	r0, r3
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	212c      	movs	r1, #44	; 0x2c
 8001fd2:	fb01 f303 	mul.w	r3, r1, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3354      	adds	r3, #84	; 0x54
 8001fda:	4602      	mov	r2, r0
 8001fdc:	701a      	strb	r2, [r3, #0]
}
 8001fde:	e163      	b.n	80022a8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	f040 80f6 	bne.w	80021e4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	212c      	movs	r1, #44	; 0x2c
 8001ffe:	fb01 f303 	mul.w	r3, r1, r3
 8002002:	4413      	add	r3, r2
 8002004:	3361      	adds	r3, #97	; 0x61
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d109      	bne.n	8002020 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	212c      	movs	r1, #44	; 0x2c
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	4413      	add	r3, r2
 8002018:	3360      	adds	r3, #96	; 0x60
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	e0c9      	b.n	80021b4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	212c      	movs	r1, #44	; 0x2c
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4413      	add	r3, r2
 800202c:	3361      	adds	r3, #97	; 0x61
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b05      	cmp	r3, #5
 8002032:	d109      	bne.n	8002048 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	212c      	movs	r1, #44	; 0x2c
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	4413      	add	r3, r2
 8002040:	3360      	adds	r3, #96	; 0x60
 8002042:	2205      	movs	r2, #5
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	e0b5      	b.n	80021b4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	212c      	movs	r1, #44	; 0x2c
 800204e:	fb01 f303 	mul.w	r3, r1, r3
 8002052:	4413      	add	r3, r2
 8002054:	3361      	adds	r3, #97	; 0x61
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b06      	cmp	r3, #6
 800205a:	d009      	beq.n	8002070 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	212c      	movs	r1, #44	; 0x2c
 8002062:	fb01 f303 	mul.w	r3, r1, r3
 8002066:	4413      	add	r3, r2
 8002068:	3361      	adds	r3, #97	; 0x61
 800206a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800206c:	2b08      	cmp	r3, #8
 800206e:	d150      	bne.n	8002112 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	212c      	movs	r1, #44	; 0x2c
 8002076:	fb01 f303 	mul.w	r3, r1, r3
 800207a:	4413      	add	r3, r2
 800207c:	335c      	adds	r3, #92	; 0x5c
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	202c      	movs	r0, #44	; 0x2c
 8002088:	fb00 f303 	mul.w	r3, r0, r3
 800208c:	440b      	add	r3, r1
 800208e:	335c      	adds	r3, #92	; 0x5c
 8002090:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	212c      	movs	r1, #44	; 0x2c
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	335c      	adds	r3, #92	; 0x5c
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d912      	bls.n	80020cc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	212c      	movs	r1, #44	; 0x2c
 80020ac:	fb01 f303 	mul.w	r3, r1, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	335c      	adds	r3, #92	; 0x5c
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	212c      	movs	r1, #44	; 0x2c
 80020be:	fb01 f303 	mul.w	r3, r1, r3
 80020c2:	4413      	add	r3, r2
 80020c4:	3360      	adds	r3, #96	; 0x60
 80020c6:	2204      	movs	r2, #4
 80020c8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020ca:	e073      	b.n	80021b4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	212c      	movs	r1, #44	; 0x2c
 80020d2:	fb01 f303 	mul.w	r3, r1, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	3360      	adds	r3, #96	; 0x60
 80020da:	2202      	movs	r2, #2
 80020dc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020f4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020fc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210a:	461a      	mov	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002110:	e050      	b.n	80021b4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	212c      	movs	r1, #44	; 0x2c
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	4413      	add	r3, r2
 800211e:	3361      	adds	r3, #97	; 0x61
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d122      	bne.n	800216c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	212c      	movs	r1, #44	; 0x2c
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	4413      	add	r3, r2
 8002132:	3360      	adds	r3, #96	; 0x60
 8002134:	2202      	movs	r2, #2
 8002136:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4413      	add	r3, r2
 8002140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800214e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002156:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002164:	461a      	mov	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e023      	b.n	80021b4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	212c      	movs	r1, #44	; 0x2c
 8002172:	fb01 f303 	mul.w	r3, r1, r3
 8002176:	4413      	add	r3, r2
 8002178:	3361      	adds	r3, #97	; 0x61
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b07      	cmp	r3, #7
 800217e:	d119      	bne.n	80021b4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	212c      	movs	r1, #44	; 0x2c
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	335c      	adds	r3, #92	; 0x5c
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	202c      	movs	r0, #44	; 0x2c
 8002198:	fb00 f303 	mul.w	r3, r0, r3
 800219c:	440b      	add	r3, r1
 800219e:	335c      	adds	r3, #92	; 0x5c
 80021a0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	212c      	movs	r1, #44	; 0x2c
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	3360      	adds	r3, #96	; 0x60
 80021b0:	2204      	movs	r2, #4
 80021b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c0:	461a      	mov	r2, r3
 80021c2:	2302      	movs	r3, #2
 80021c4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	b2d9      	uxtb	r1, r3
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	202c      	movs	r0, #44	; 0x2c
 80021d0:	fb00 f303 	mul.w	r3, r0, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	3360      	adds	r3, #96	; 0x60
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f004 fc17 	bl	8006a10 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80021e2:	e061      	b.n	80022a8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	015a      	lsls	r2, r3, #5
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0310 	and.w	r3, r3, #16
 80021f6:	2b10      	cmp	r3, #16
 80021f8:	d156      	bne.n	80022a8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	212c      	movs	r1, #44	; 0x2c
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	333f      	adds	r3, #63	; 0x3f
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d111      	bne.n	8002232 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	212c      	movs	r1, #44	; 0x2c
 8002214:	fb01 f303 	mul.w	r3, r1, r3
 8002218:	4413      	add	r3, r2
 800221a:	335c      	adds	r3, #92	; 0x5c
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	4611      	mov	r1, r2
 800222a:	4618      	mov	r0, r3
 800222c:	f002 f959 	bl	80044e2 <USB_HC_Halt>
 8002230:	e031      	b.n	8002296 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	212c      	movs	r1, #44	; 0x2c
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	4413      	add	r3, r2
 800223e:	333f      	adds	r3, #63	; 0x3f
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d009      	beq.n	800225a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	212c      	movs	r1, #44	; 0x2c
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	4413      	add	r3, r2
 8002252:	333f      	adds	r3, #63	; 0x3f
 8002254:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002256:	2b02      	cmp	r3, #2
 8002258:	d11d      	bne.n	8002296 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	212c      	movs	r1, #44	; 0x2c
 8002260:	fb01 f303 	mul.w	r3, r1, r3
 8002264:	4413      	add	r3, r2
 8002266:	335c      	adds	r3, #92	; 0x5c
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d110      	bne.n	8002296 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3361      	adds	r3, #97	; 0x61
 8002282:	2203      	movs	r2, #3
 8002284:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f002 f926 	bl	80044e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4413      	add	r3, r2
 800229e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a2:	461a      	mov	r2, r3
 80022a4:	2310      	movs	r3, #16
 80022a6:	6093      	str	r3, [r2, #8]
}
 80022a8:	bf00      	nop
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d11a      	bne.n	8002316 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ec:	461a      	mov	r2, r3
 80022ee:	2304      	movs	r3, #4
 80022f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	212c      	movs	r1, #44	; 0x2c
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	3361      	adds	r3, #97	; 0x61
 8002300:	2206      	movs	r2, #6
 8002302:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f002 f8e7 	bl	80044e2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002314:	e331      	b.n	800297a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b20      	cmp	r3, #32
 800232a:	d12e      	bne.n	800238a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002338:	461a      	mov	r2, r3
 800233a:	2320      	movs	r3, #32
 800233c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	212c      	movs	r1, #44	; 0x2c
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	4413      	add	r3, r2
 800234a:	333d      	adds	r3, #61	; 0x3d
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	f040 8313 	bne.w	800297a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	333d      	adds	r3, #61	; 0x3d
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	212c      	movs	r1, #44	; 0x2c
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	4413      	add	r3, r2
 8002372:	3360      	adds	r3, #96	; 0x60
 8002374:	2202      	movs	r2, #2
 8002376:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f002 f8ad 	bl	80044e2 <USB_HC_Halt>
}
 8002388:	e2f7      	b.n	800297a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	4413      	add	r3, r2
 8002392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800239c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023a0:	d112      	bne.n	80023c8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ae:	461a      	mov	r2, r3
 80023b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023b4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 f88e 	bl	80044e2 <USB_HC_Halt>
}
 80023c6:	e2d8      	b.n	800297a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d140      	bne.n	8002460 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	212c      	movs	r1, #44	; 0x2c
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	335c      	adds	r3, #92	; 0x5c
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002402:	2b40      	cmp	r3, #64	; 0x40
 8002404:	d111      	bne.n	800242a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	333d      	adds	r3, #61	; 0x3d
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	4413      	add	r3, r2
 8002420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002424:	461a      	mov	r2, r3
 8002426:	2340      	movs	r3, #64	; 0x40
 8002428:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	4413      	add	r3, r2
 8002432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002436:	461a      	mov	r2, r3
 8002438:	2301      	movs	r3, #1
 800243a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	212c      	movs	r1, #44	; 0x2c
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	4413      	add	r3, r2
 8002448:	3361      	adds	r3, #97	; 0x61
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f002 f842 	bl	80044e2 <USB_HC_Halt>
}
 800245e:	e28c      	b.n	800297a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	4413      	add	r3, r2
 8002468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002472:	2b40      	cmp	r3, #64	; 0x40
 8002474:	d12c      	bne.n	80024d0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	212c      	movs	r1, #44	; 0x2c
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	4413      	add	r3, r2
 8002482:	3361      	adds	r3, #97	; 0x61
 8002484:	2204      	movs	r2, #4
 8002486:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	333d      	adds	r3, #61	; 0x3d
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	335c      	adds	r3, #92	; 0x5c
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	4611      	mov	r1, r2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f002 f813 	bl	80044e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c8:	461a      	mov	r2, r3
 80024ca:	2340      	movs	r3, #64	; 0x40
 80024cc:	6093      	str	r3, [r2, #8]
}
 80024ce:	e254      	b.n	800297a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d11a      	bne.n	800251c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f2:	461a      	mov	r2, r3
 80024f4:	2308      	movs	r3, #8
 80024f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	212c      	movs	r1, #44	; 0x2c
 80024fe:	fb01 f303 	mul.w	r3, r1, r3
 8002502:	4413      	add	r3, r2
 8002504:	3361      	adds	r3, #97	; 0x61
 8002506:	2205      	movs	r2, #5
 8002508:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f001 ffe4 	bl	80044e2 <USB_HC_Halt>
}
 800251a:	e22e      	b.n	800297a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b10      	cmp	r3, #16
 8002530:	d140      	bne.n	80025b4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	212c      	movs	r1, #44	; 0x2c
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	4413      	add	r3, r2
 800253e:	335c      	adds	r3, #92	; 0x5c
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3361      	adds	r3, #97	; 0x61
 8002552:	2203      	movs	r2, #3
 8002554:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	333d      	adds	r3, #61	; 0x3d
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d112      	bne.n	8002590 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	333c      	adds	r3, #60	; 0x3c
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d108      	bne.n	8002590 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	212c      	movs	r1, #44	; 0x2c
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	333d      	adds	r3, #61	; 0x3d
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f001 ffa1 	bl	80044e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ac:	461a      	mov	r2, r3
 80025ae:	2310      	movs	r3, #16
 80025b0:	6093      	str	r3, [r2, #8]
}
 80025b2:	e1e2      	b.n	800297a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c6:	2b80      	cmp	r3, #128	; 0x80
 80025c8:	d164      	bne.n	8002694 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d111      	bne.n	80025f6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	212c      	movs	r1, #44	; 0x2c
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	4413      	add	r3, r2
 80025de:	3361      	adds	r3, #97	; 0x61
 80025e0:	2206      	movs	r2, #6
 80025e2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 ff77 	bl	80044e2 <USB_HC_Halt>
 80025f4:	e044      	b.n	8002680 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	335c      	adds	r3, #92	; 0x5c
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	202c      	movs	r0, #44	; 0x2c
 800260e:	fb00 f303 	mul.w	r3, r0, r3
 8002612:	440b      	add	r3, r1
 8002614:	335c      	adds	r3, #92	; 0x5c
 8002616:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	335c      	adds	r3, #92	; 0x5c
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d920      	bls.n	800266e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	335c      	adds	r3, #92	; 0x5c
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	3360      	adds	r3, #96	; 0x60
 800264c:	2204      	movs	r2, #4
 800264e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	b2d9      	uxtb	r1, r3
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	202c      	movs	r0, #44	; 0x2c
 800265a:	fb00 f303 	mul.w	r3, r0, r3
 800265e:	4413      	add	r3, r2
 8002660:	3360      	adds	r3, #96	; 0x60
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f004 f9d2 	bl	8006a10 <HAL_HCD_HC_NotifyURBChange_Callback>
 800266c:	e008      	b.n	8002680 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	212c      	movs	r1, #44	; 0x2c
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	4413      	add	r3, r2
 800267a:	3360      	adds	r3, #96	; 0x60
 800267c:	2202      	movs	r2, #2
 800267e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	4413      	add	r3, r2
 8002688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268c:	461a      	mov	r2, r3
 800268e:	2380      	movs	r3, #128	; 0x80
 8002690:	6093      	str	r3, [r2, #8]
}
 8002692:	e172      	b.n	800297a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026aa:	d11b      	bne.n	80026e4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	212c      	movs	r1, #44	; 0x2c
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	3361      	adds	r3, #97	; 0x61
 80026ba:	2208      	movs	r2, #8
 80026bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 ff0a 	bl	80044e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	015a      	lsls	r2, r3, #5
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026da:	461a      	mov	r2, r3
 80026dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026e0:	6093      	str	r3, [r2, #8]
}
 80026e2:	e14a      	b.n	800297a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	f040 813f 	bne.w	800297a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	212c      	movs	r1, #44	; 0x2c
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	4413      	add	r3, r2
 8002708:	3361      	adds	r3, #97	; 0x61
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d17d      	bne.n	800280c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	212c      	movs	r1, #44	; 0x2c
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	3360      	adds	r3, #96	; 0x60
 800271e:	2201      	movs	r2, #1
 8002720:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	333f      	adds	r3, #63	; 0x3f
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d00a      	beq.n	800274c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	333f      	adds	r3, #63	; 0x3f
 8002744:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002746:	2b03      	cmp	r3, #3
 8002748:	f040 8100 	bne.w	800294c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d113      	bne.n	800277c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	212c      	movs	r1, #44	; 0x2c
 800275a:	fb01 f303 	mul.w	r3, r1, r3
 800275e:	4413      	add	r3, r2
 8002760:	3355      	adds	r3, #85	; 0x55
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	f083 0301 	eor.w	r3, r3, #1
 8002768:	b2d8      	uxtb	r0, r3
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	212c      	movs	r1, #44	; 0x2c
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	3355      	adds	r3, #85	; 0x55
 8002778:	4602      	mov	r2, r0
 800277a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	2b01      	cmp	r3, #1
 8002782:	f040 80e3 	bne.w	800294c <HCD_HC_OUT_IRQHandler+0x69c>
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	334c      	adds	r3, #76	; 0x4c
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80d8 	beq.w	800294c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	212c      	movs	r1, #44	; 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	334c      	adds	r3, #76	; 0x4c
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	202c      	movs	r0, #44	; 0x2c
 80027b2:	fb00 f202 	mul.w	r2, r0, r2
 80027b6:	440a      	add	r2, r1
 80027b8:	3240      	adds	r2, #64	; 0x40
 80027ba:	8812      	ldrh	r2, [r2, #0]
 80027bc:	4413      	add	r3, r2
 80027be:	3b01      	subs	r3, #1
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	202c      	movs	r0, #44	; 0x2c
 80027c6:	fb00 f202 	mul.w	r2, r0, r2
 80027ca:	440a      	add	r2, r1
 80027cc:	3240      	adds	r2, #64	; 0x40
 80027ce:	8812      	ldrh	r2, [r2, #0]
 80027d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80b5 	beq.w	800294c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	3355      	adds	r3, #85	; 0x55
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	f083 0301 	eor.w	r3, r3, #1
 80027f6:	b2d8      	uxtb	r0, r3
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4413      	add	r3, r2
 8002804:	3355      	adds	r3, #85	; 0x55
 8002806:	4602      	mov	r2, r0
 8002808:	701a      	strb	r2, [r3, #0]
 800280a:	e09f      	b.n	800294c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	212c      	movs	r1, #44	; 0x2c
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	4413      	add	r3, r2
 8002818:	3361      	adds	r3, #97	; 0x61
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b03      	cmp	r3, #3
 800281e:	d109      	bne.n	8002834 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	212c      	movs	r1, #44	; 0x2c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	3360      	adds	r3, #96	; 0x60
 800282e:	2202      	movs	r2, #2
 8002830:	701a      	strb	r2, [r3, #0]
 8002832:	e08b      	b.n	800294c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	212c      	movs	r1, #44	; 0x2c
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	4413      	add	r3, r2
 8002840:	3361      	adds	r3, #97	; 0x61
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b04      	cmp	r3, #4
 8002846:	d109      	bne.n	800285c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	212c      	movs	r1, #44	; 0x2c
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	4413      	add	r3, r2
 8002854:	3360      	adds	r3, #96	; 0x60
 8002856:	2202      	movs	r2, #2
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	e077      	b.n	800294c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	212c      	movs	r1, #44	; 0x2c
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	4413      	add	r3, r2
 8002868:	3361      	adds	r3, #97	; 0x61
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b05      	cmp	r3, #5
 800286e:	d109      	bne.n	8002884 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	212c      	movs	r1, #44	; 0x2c
 8002876:	fb01 f303 	mul.w	r3, r1, r3
 800287a:	4413      	add	r3, r2
 800287c:	3360      	adds	r3, #96	; 0x60
 800287e:	2205      	movs	r2, #5
 8002880:	701a      	strb	r2, [r3, #0]
 8002882:	e063      	b.n	800294c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	212c      	movs	r1, #44	; 0x2c
 800288a:	fb01 f303 	mul.w	r3, r1, r3
 800288e:	4413      	add	r3, r2
 8002890:	3361      	adds	r3, #97	; 0x61
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b06      	cmp	r3, #6
 8002896:	d009      	beq.n	80028ac <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	3361      	adds	r3, #97	; 0x61
 80028a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d14f      	bne.n	800294c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	212c      	movs	r1, #44	; 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	335c      	adds	r3, #92	; 0x5c
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	202c      	movs	r0, #44	; 0x2c
 80028c4:	fb00 f303 	mul.w	r3, r0, r3
 80028c8:	440b      	add	r3, r1
 80028ca:	335c      	adds	r3, #92	; 0x5c
 80028cc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	212c      	movs	r1, #44	; 0x2c
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	4413      	add	r3, r2
 80028da:	335c      	adds	r3, #92	; 0x5c
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d912      	bls.n	8002908 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	335c      	adds	r3, #92	; 0x5c
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	212c      	movs	r1, #44	; 0x2c
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	3360      	adds	r3, #96	; 0x60
 8002902:	2204      	movs	r2, #4
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	e021      	b.n	800294c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3360      	adds	r3, #96	; 0x60
 8002916:	2202      	movs	r2, #2
 8002918:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	4413      	add	r3, r2
 8002922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002930:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002938:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002946:	461a      	mov	r2, r3
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	461a      	mov	r2, r3
 800295a:	2302      	movs	r3, #2
 800295c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	b2d9      	uxtb	r1, r3
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	202c      	movs	r0, #44	; 0x2c
 8002968:	fb00 f303 	mul.w	r3, r0, r3
 800296c:	4413      	add	r3, r2
 800296e:	3360      	adds	r3, #96	; 0x60
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f004 f84b 	bl	8006a10 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800297a:	bf00      	nop
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b08a      	sub	sp, #40	; 0x28
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	0c5b      	lsrs	r3, r3, #17
 80029a8:	f003 030f 	and.w	r3, r3, #15
 80029ac:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029b6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d004      	beq.n	80029c8 <HCD_RXQLVL_IRQHandler+0x46>
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2b05      	cmp	r3, #5
 80029c2:	f000 80a9 	beq.w	8002b18 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80029c6:	e0aa      	b.n	8002b1e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 80a6 	beq.w	8002b1c <HCD_RXQLVL_IRQHandler+0x19a>
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	3344      	adds	r3, #68	; 0x44
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 809b 	beq.w	8002b1c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	3350      	adds	r3, #80	; 0x50
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	441a      	add	r2, r3
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	202c      	movs	r0, #44	; 0x2c
 8002a00:	fb00 f303 	mul.w	r3, r0, r3
 8002a04:	440b      	add	r3, r1
 8002a06:	334c      	adds	r3, #76	; 0x4c
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d87a      	bhi.n	8002b04 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	212c      	movs	r1, #44	; 0x2c
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3344      	adds	r3, #68	; 0x44
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	b292      	uxth	r2, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	f001 f8b2 	bl	8003b90 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	3344      	adds	r3, #68	; 0x44
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	441a      	add	r2, r3
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	202c      	movs	r0, #44	; 0x2c
 8002a46:	fb00 f303 	mul.w	r3, r0, r3
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3344      	adds	r3, #68	; 0x44
 8002a4e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	212c      	movs	r1, #44	; 0x2c
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3350      	adds	r3, #80	; 0x50
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	441a      	add	r2, r3
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	202c      	movs	r0, #44	; 0x2c
 8002a6a:	fb00 f303 	mul.w	r3, r0, r3
 8002a6e:	440b      	add	r3, r1
 8002a70:	3350      	adds	r3, #80	; 0x50
 8002a72:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	0cdb      	lsrs	r3, r3, #19
 8002a84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a88:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	212c      	movs	r1, #44	; 0x2c
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	3340      	adds	r3, #64	; 0x40
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d13c      	bne.n	8002b1c <HCD_RXQLVL_IRQHandler+0x19a>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d039      	beq.n	8002b1c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002abe:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ac6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3354      	adds	r3, #84	; 0x54
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	f083 0301 	eor.w	r3, r3, #1
 8002aee:	b2d8      	uxtb	r0, r3
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	3354      	adds	r3, #84	; 0x54
 8002afe:	4602      	mov	r2, r0
 8002b00:	701a      	strb	r2, [r3, #0]
      break;
 8002b02:	e00b      	b.n	8002b1c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	3360      	adds	r3, #96	; 0x60
 8002b12:	2204      	movs	r2, #4
 8002b14:	701a      	strb	r2, [r3, #0]
      break;
 8002b16:	e001      	b.n	8002b1c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002b18:	bf00      	nop
 8002b1a:	e000      	b.n	8002b1e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002b1c:	bf00      	nop
  }
}
 8002b1e:	bf00      	nop
 8002b20:	3728      	adds	r7, #40	; 0x28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b086      	sub	sp, #24
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b52:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d10b      	bne.n	8002b76 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d102      	bne.n	8002b6e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f003 ff35 	bl	80069d8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f043 0302 	orr.w	r3, r3, #2
 8002b74:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d132      	bne.n	8002be6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f043 0308 	orr.w	r3, r3, #8
 8002b86:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d126      	bne.n	8002be0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d113      	bne.n	8002bc2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002ba0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ba4:	d106      	bne.n	8002bb4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2102      	movs	r1, #2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f001 f95d 	bl	8003e6c <USB_InitFSLSPClkSel>
 8002bb2:	e011      	b.n	8002bd8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2101      	movs	r1, #1
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 f956 	bl	8003e6c <USB_InitFSLSPClkSel>
 8002bc0:	e00a      	b.n	8002bd8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d106      	bne.n	8002bd8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002bd6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f003 ff27 	bl	8006a2c <HAL_HCD_PortEnabled_Callback>
 8002bde:	e002      	b.n	8002be6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f003 ff31 	bl	8006a48 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	d103      	bne.n	8002bf8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f043 0320 	orr.w	r3, r3, #32
 8002bf6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	6013      	str	r3, [r2, #0]
}
 8002c04:	bf00      	nop
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e12b      	b.n	8002e76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fd fece 	bl	80009d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2224      	movs	r2, #36	; 0x24
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c70:	f000 fd80 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 8002c74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4a81      	ldr	r2, [pc, #516]	; (8002e80 <HAL_I2C_Init+0x274>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d807      	bhi.n	8002c90 <HAL_I2C_Init+0x84>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4a80      	ldr	r2, [pc, #512]	; (8002e84 <HAL_I2C_Init+0x278>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	bf94      	ite	ls
 8002c88:	2301      	movls	r3, #1
 8002c8a:	2300      	movhi	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	e006      	b.n	8002c9e <HAL_I2C_Init+0x92>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4a7d      	ldr	r2, [pc, #500]	; (8002e88 <HAL_I2C_Init+0x27c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	bf94      	ite	ls
 8002c98:	2301      	movls	r3, #1
 8002c9a:	2300      	movhi	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e0e7      	b.n	8002e76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4a78      	ldr	r2, [pc, #480]	; (8002e8c <HAL_I2C_Init+0x280>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	0c9b      	lsrs	r3, r3, #18
 8002cb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4a6a      	ldr	r2, [pc, #424]	; (8002e80 <HAL_I2C_Init+0x274>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d802      	bhi.n	8002ce0 <HAL_I2C_Init+0xd4>
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	e009      	b.n	8002cf4 <HAL_I2C_Init+0xe8>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ce6:	fb02 f303 	mul.w	r3, r2, r3
 8002cea:	4a69      	ldr	r2, [pc, #420]	; (8002e90 <HAL_I2C_Init+0x284>)
 8002cec:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf0:	099b      	lsrs	r3, r3, #6
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	495c      	ldr	r1, [pc, #368]	; (8002e80 <HAL_I2C_Init+0x274>)
 8002d10:	428b      	cmp	r3, r1
 8002d12:	d819      	bhi.n	8002d48 <HAL_I2C_Init+0x13c>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1e59      	subs	r1, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d22:	1c59      	adds	r1, r3, #1
 8002d24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d28:	400b      	ands	r3, r1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <HAL_I2C_Init+0x138>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1e59      	subs	r1, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d42:	e051      	b.n	8002de8 <HAL_I2C_Init+0x1dc>
 8002d44:	2304      	movs	r3, #4
 8002d46:	e04f      	b.n	8002de8 <HAL_I2C_Init+0x1dc>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d111      	bne.n	8002d74 <HAL_I2C_Init+0x168>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1e58      	subs	r0, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	440b      	add	r3, r1
 8002d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d62:	3301      	adds	r3, #1
 8002d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e012      	b.n	8002d9a <HAL_I2C_Init+0x18e>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1e58      	subs	r0, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	0099      	lsls	r1, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_I2C_Init+0x196>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e022      	b.n	8002de8 <HAL_I2C_Init+0x1dc>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10e      	bne.n	8002dc8 <HAL_I2C_Init+0x1bc>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1e58      	subs	r0, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6859      	ldr	r1, [r3, #4]
 8002db2:	460b      	mov	r3, r1
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	440b      	add	r3, r1
 8002db8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dc6:	e00f      	b.n	8002de8 <HAL_I2C_Init+0x1dc>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1e58      	subs	r0, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6859      	ldr	r1, [r3, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	0099      	lsls	r1, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dde:	3301      	adds	r3, #1
 8002de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	6809      	ldr	r1, [r1, #0]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69da      	ldr	r2, [r3, #28]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6911      	ldr	r1, [r2, #16]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68d2      	ldr	r2, [r2, #12]
 8002e22:	4311      	orrs	r1, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	000186a0 	.word	0x000186a0
 8002e84:	001e847f 	.word	0x001e847f
 8002e88:	003d08ff 	.word	0x003d08ff
 8002e8c:	431bde83 	.word	0x431bde83
 8002e90:	10624dd3 	.word	0x10624dd3

08002e94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e267      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d075      	beq.n	8002f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eb2:	4b88      	ldr	r3, [pc, #544]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d00c      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ebe:	4b85      	ldr	r3, [pc, #532]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d112      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eca:	4b82      	ldr	r3, [pc, #520]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed6:	d10b      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	4b7e      	ldr	r3, [pc, #504]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d05b      	beq.n	8002f9c <HAL_RCC_OscConfig+0x108>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d157      	bne.n	8002f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e242      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef8:	d106      	bne.n	8002f08 <HAL_RCC_OscConfig+0x74>
 8002efa:	4b76      	ldr	r3, [pc, #472]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a75      	ldr	r2, [pc, #468]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e01d      	b.n	8002f44 <HAL_RCC_OscConfig+0xb0>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x98>
 8002f12:	4b70      	ldr	r3, [pc, #448]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a6f      	ldr	r2, [pc, #444]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b6d      	ldr	r3, [pc, #436]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a6c      	ldr	r2, [pc, #432]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e00b      	b.n	8002f44 <HAL_RCC_OscConfig+0xb0>
 8002f2c:	4b69      	ldr	r3, [pc, #420]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a68      	ldr	r2, [pc, #416]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b66      	ldr	r3, [pc, #408]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a65      	ldr	r2, [pc, #404]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fd ff5c 	bl	8000e08 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f54:	f7fd ff58 	bl	8000e08 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e207      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	4b5b      	ldr	r3, [pc, #364]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0xc0>
 8002f72:	e014      	b.n	8002f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fd ff48 	bl	8000e08 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f7c:	f7fd ff44 	bl	8000e08 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e1f3      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8e:	4b51      	ldr	r3, [pc, #324]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0xe8>
 8002f9a:	e000      	b.n	8002f9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d063      	beq.n	8003072 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002faa:	4b4a      	ldr	r3, [pc, #296]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00b      	beq.n	8002fce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fb6:	4b47      	ldr	r3, [pc, #284]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d11c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fc2:	4b44      	ldr	r3, [pc, #272]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d116      	bne.n	8002ffc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fce:	4b41      	ldr	r3, [pc, #260]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x152>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d001      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e1c7      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4937      	ldr	r1, [pc, #220]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffa:	e03a      	b.n	8003072 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d020      	beq.n	8003046 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003004:	4b34      	ldr	r3, [pc, #208]	; (80030d8 <HAL_RCC_OscConfig+0x244>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300a:	f7fd fefd 	bl	8000e08 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003012:	f7fd fef9 	bl	8000e08 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e1a8      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003024:	4b2b      	ldr	r3, [pc, #172]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003030:	4b28      	ldr	r3, [pc, #160]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4925      	ldr	r1, [pc, #148]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8003040:	4313      	orrs	r3, r2
 8003042:	600b      	str	r3, [r1, #0]
 8003044:	e015      	b.n	8003072 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003046:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <HAL_RCC_OscConfig+0x244>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fd fedc 	bl	8000e08 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003054:	f7fd fed8 	bl	8000e08 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e187      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003066:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d036      	beq.n	80030ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d016      	beq.n	80030b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003086:	4b15      	ldr	r3, [pc, #84]	; (80030dc <HAL_RCC_OscConfig+0x248>)
 8003088:	2201      	movs	r2, #1
 800308a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308c:	f7fd febc 	bl	8000e08 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003094:	f7fd feb8 	bl	8000e08 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e167      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a6:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 80030a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0x200>
 80030b2:	e01b      	b.n	80030ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <HAL_RCC_OscConfig+0x248>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ba:	f7fd fea5 	bl	8000e08 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c0:	e00e      	b.n	80030e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c2:	f7fd fea1 	bl	8000e08 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d907      	bls.n	80030e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e150      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
 80030d4:	40023800 	.word	0x40023800
 80030d8:	42470000 	.word	0x42470000
 80030dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e0:	4b88      	ldr	r3, [pc, #544]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 80030e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1ea      	bne.n	80030c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8097 	beq.w	8003228 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030fa:	2300      	movs	r3, #0
 80030fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030fe:	4b81      	ldr	r3, [pc, #516]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10f      	bne.n	800312a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	4b7d      	ldr	r3, [pc, #500]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a7c      	ldr	r2, [pc, #496]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
 800311a:	4b7a      	ldr	r3, [pc, #488]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003126:	2301      	movs	r3, #1
 8003128:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312a:	4b77      	ldr	r3, [pc, #476]	; (8003308 <HAL_RCC_OscConfig+0x474>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003132:	2b00      	cmp	r3, #0
 8003134:	d118      	bne.n	8003168 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003136:	4b74      	ldr	r3, [pc, #464]	; (8003308 <HAL_RCC_OscConfig+0x474>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a73      	ldr	r2, [pc, #460]	; (8003308 <HAL_RCC_OscConfig+0x474>)
 800313c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003142:	f7fd fe61 	bl	8000e08 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314a:	f7fd fe5d 	bl	8000e08 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e10c      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315c:	4b6a      	ldr	r3, [pc, #424]	; (8003308 <HAL_RCC_OscConfig+0x474>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d106      	bne.n	800317e <HAL_RCC_OscConfig+0x2ea>
 8003170:	4b64      	ldr	r3, [pc, #400]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a63      	ldr	r2, [pc, #396]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
 800317c:	e01c      	b.n	80031b8 <HAL_RCC_OscConfig+0x324>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b05      	cmp	r3, #5
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x30c>
 8003186:	4b5f      	ldr	r3, [pc, #380]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	4a5e      	ldr	r2, [pc, #376]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 800318c:	f043 0304 	orr.w	r3, r3, #4
 8003190:	6713      	str	r3, [r2, #112]	; 0x70
 8003192:	4b5c      	ldr	r3, [pc, #368]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	4a5b      	ldr	r2, [pc, #364]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	6713      	str	r3, [r2, #112]	; 0x70
 800319e:	e00b      	b.n	80031b8 <HAL_RCC_OscConfig+0x324>
 80031a0:	4b58      	ldr	r3, [pc, #352]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	4a57      	ldr	r2, [pc, #348]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 80031a6:	f023 0301 	bic.w	r3, r3, #1
 80031aa:	6713      	str	r3, [r2, #112]	; 0x70
 80031ac:	4b55      	ldr	r3, [pc, #340]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	4a54      	ldr	r2, [pc, #336]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 80031b2:	f023 0304 	bic.w	r3, r3, #4
 80031b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d015      	beq.n	80031ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c0:	f7fd fe22 	bl	8000e08 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c6:	e00a      	b.n	80031de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c8:	f7fd fe1e 	bl	8000e08 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e0cb      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031de:	4b49      	ldr	r3, [pc, #292]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0ee      	beq.n	80031c8 <HAL_RCC_OscConfig+0x334>
 80031ea:	e014      	b.n	8003216 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ec:	f7fd fe0c 	bl	8000e08 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f2:	e00a      	b.n	800320a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f4:	f7fd fe08 	bl	8000e08 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e0b5      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320a:	4b3e      	ldr	r3, [pc, #248]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1ee      	bne.n	80031f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003216:	7dfb      	ldrb	r3, [r7, #23]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d105      	bne.n	8003228 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800321c:	4b39      	ldr	r3, [pc, #228]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	4a38      	ldr	r2, [pc, #224]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003226:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80a1 	beq.w	8003374 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003232:	4b34      	ldr	r3, [pc, #208]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b08      	cmp	r3, #8
 800323c:	d05c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d141      	bne.n	80032ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003246:	4b31      	ldr	r3, [pc, #196]	; (800330c <HAL_RCC_OscConfig+0x478>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324c:	f7fd fddc 	bl	8000e08 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003254:	f7fd fdd8 	bl	8000e08 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e087      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	4b27      	ldr	r3, [pc, #156]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69da      	ldr	r2, [r3, #28]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	019b      	lsls	r3, r3, #6
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	085b      	lsrs	r3, r3, #1
 800328a:	3b01      	subs	r3, #1
 800328c:	041b      	lsls	r3, r3, #16
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	061b      	lsls	r3, r3, #24
 8003296:	491b      	ldr	r1, [pc, #108]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800329c:	4b1b      	ldr	r3, [pc, #108]	; (800330c <HAL_RCC_OscConfig+0x478>)
 800329e:	2201      	movs	r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a2:	f7fd fdb1 	bl	8000e08 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032aa:	f7fd fdad 	bl	8000e08 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e05c      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x416>
 80032c8:	e054      	b.n	8003374 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ca:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_RCC_OscConfig+0x478>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7fd fd9a 	bl	8000e08 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d8:	f7fd fd96 	bl	8000e08 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e045      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x444>
 80032f6:	e03d      	b.n	8003374 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d107      	bne.n	8003310 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e038      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
 8003304:	40023800 	.word	0x40023800
 8003308:	40007000 	.word	0x40007000
 800330c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_RCC_OscConfig+0x4ec>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d028      	beq.n	8003370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003328:	429a      	cmp	r2, r3
 800332a:	d121      	bne.n	8003370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003336:	429a      	cmp	r2, r3
 8003338:	d11a      	bne.n	8003370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003340:	4013      	ands	r3, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003346:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003348:	4293      	cmp	r3, r2
 800334a:	d111      	bne.n	8003370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	085b      	lsrs	r3, r3, #1
 8003358:	3b01      	subs	r3, #1
 800335a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800335c:	429a      	cmp	r2, r3
 800335e:	d107      	bne.n	8003370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40023800 	.word	0x40023800

08003384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0cc      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003398:	4b68      	ldr	r3, [pc, #416]	; (800353c <HAL_RCC_ClockConfig+0x1b8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d90c      	bls.n	80033c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	4b65      	ldr	r3, [pc, #404]	; (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ae:	4b63      	ldr	r3, [pc, #396]	; (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0b8      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d020      	beq.n	800340e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033d8:	4b59      	ldr	r3, [pc, #356]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4a58      	ldr	r2, [pc, #352]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f0:	4b53      	ldr	r3, [pc, #332]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4a52      	ldr	r2, [pc, #328]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033fc:	4b50      	ldr	r3, [pc, #320]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	494d      	ldr	r1, [pc, #308]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d044      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d107      	bne.n	8003432 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	4b47      	ldr	r3, [pc, #284]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d119      	bne.n	8003462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e07f      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d003      	beq.n	8003442 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800343e:	2b03      	cmp	r3, #3
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003442:	4b3f      	ldr	r3, [pc, #252]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e06f      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003452:	4b3b      	ldr	r3, [pc, #236]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e067      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003462:	4b37      	ldr	r3, [pc, #220]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f023 0203 	bic.w	r2, r3, #3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4934      	ldr	r1, [pc, #208]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	4313      	orrs	r3, r2
 8003472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003474:	f7fd fcc8 	bl	8000e08 <HAL_GetTick>
 8003478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347a:	e00a      	b.n	8003492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347c:	f7fd fcc4 	bl	8000e08 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	; 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e04f      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	4b2b      	ldr	r3, [pc, #172]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 020c 	and.w	r2, r3, #12
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d1eb      	bne.n	800347c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a4:	4b25      	ldr	r3, [pc, #148]	; (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d20c      	bcs.n	80034cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b22      	ldr	r3, [pc, #136]	; (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ba:	4b20      	ldr	r3, [pc, #128]	; (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e032      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d8:	4b19      	ldr	r3, [pc, #100]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4916      	ldr	r1, [pc, #88]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034f6:	4b12      	ldr	r3, [pc, #72]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	490e      	ldr	r1, [pc, #56]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800350a:	f000 f821 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 800350e:	4602      	mov	r2, r0
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	490a      	ldr	r1, [pc, #40]	; (8003544 <HAL_RCC_ClockConfig+0x1c0>)
 800351c:	5ccb      	ldrb	r3, [r1, r3]
 800351e:	fa22 f303 	lsr.w	r3, r2, r3
 8003522:	4a09      	ldr	r2, [pc, #36]	; (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd fc28 	bl	8000d80 <HAL_InitTick>

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40023c00 	.word	0x40023c00
 8003540:	40023800 	.word	0x40023800
 8003544:	080077c8 	.word	0x080077c8
 8003548:	20000000 	.word	0x20000000
 800354c:	20000004 	.word	0x20000004

08003550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003554:	b094      	sub	sp, #80	; 0x50
 8003556:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	647b      	str	r3, [r7, #68]	; 0x44
 800355c:	2300      	movs	r3, #0
 800355e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003560:	2300      	movs	r3, #0
 8003562:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003568:	4b79      	ldr	r3, [pc, #484]	; (8003750 <HAL_RCC_GetSysClockFreq+0x200>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 030c 	and.w	r3, r3, #12
 8003570:	2b08      	cmp	r3, #8
 8003572:	d00d      	beq.n	8003590 <HAL_RCC_GetSysClockFreq+0x40>
 8003574:	2b08      	cmp	r3, #8
 8003576:	f200 80e1 	bhi.w	800373c <HAL_RCC_GetSysClockFreq+0x1ec>
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0x34>
 800357e:	2b04      	cmp	r3, #4
 8003580:	d003      	beq.n	800358a <HAL_RCC_GetSysClockFreq+0x3a>
 8003582:	e0db      	b.n	800373c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003584:	4b73      	ldr	r3, [pc, #460]	; (8003754 <HAL_RCC_GetSysClockFreq+0x204>)
 8003586:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003588:	e0db      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800358a:	4b73      	ldr	r3, [pc, #460]	; (8003758 <HAL_RCC_GetSysClockFreq+0x208>)
 800358c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800358e:	e0d8      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003590:	4b6f      	ldr	r3, [pc, #444]	; (8003750 <HAL_RCC_GetSysClockFreq+0x200>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003598:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800359a:	4b6d      	ldr	r3, [pc, #436]	; (8003750 <HAL_RCC_GetSysClockFreq+0x200>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d063      	beq.n	800366e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a6:	4b6a      	ldr	r3, [pc, #424]	; (8003750 <HAL_RCC_GetSysClockFreq+0x200>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	099b      	lsrs	r3, r3, #6
 80035ac:	2200      	movs	r2, #0
 80035ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80035b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b8:	633b      	str	r3, [r7, #48]	; 0x30
 80035ba:	2300      	movs	r3, #0
 80035bc:	637b      	str	r3, [r7, #52]	; 0x34
 80035be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035c2:	4622      	mov	r2, r4
 80035c4:	462b      	mov	r3, r5
 80035c6:	f04f 0000 	mov.w	r0, #0
 80035ca:	f04f 0100 	mov.w	r1, #0
 80035ce:	0159      	lsls	r1, r3, #5
 80035d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d4:	0150      	lsls	r0, r2, #5
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4621      	mov	r1, r4
 80035dc:	1a51      	subs	r1, r2, r1
 80035de:	6139      	str	r1, [r7, #16]
 80035e0:	4629      	mov	r1, r5
 80035e2:	eb63 0301 	sbc.w	r3, r3, r1
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035f4:	4659      	mov	r1, fp
 80035f6:	018b      	lsls	r3, r1, #6
 80035f8:	4651      	mov	r1, sl
 80035fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035fe:	4651      	mov	r1, sl
 8003600:	018a      	lsls	r2, r1, #6
 8003602:	4651      	mov	r1, sl
 8003604:	ebb2 0801 	subs.w	r8, r2, r1
 8003608:	4659      	mov	r1, fp
 800360a:	eb63 0901 	sbc.w	r9, r3, r1
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800361a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800361e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003622:	4690      	mov	r8, r2
 8003624:	4699      	mov	r9, r3
 8003626:	4623      	mov	r3, r4
 8003628:	eb18 0303 	adds.w	r3, r8, r3
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	462b      	mov	r3, r5
 8003630:	eb49 0303 	adc.w	r3, r9, r3
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003642:	4629      	mov	r1, r5
 8003644:	024b      	lsls	r3, r1, #9
 8003646:	4621      	mov	r1, r4
 8003648:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800364c:	4621      	mov	r1, r4
 800364e:	024a      	lsls	r2, r1, #9
 8003650:	4610      	mov	r0, r2
 8003652:	4619      	mov	r1, r3
 8003654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003656:	2200      	movs	r2, #0
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
 800365a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800365c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003660:	f7fc fdb2 	bl	80001c8 <__aeabi_uldivmod>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4613      	mov	r3, r2
 800366a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800366c:	e058      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800366e:	4b38      	ldr	r3, [pc, #224]	; (8003750 <HAL_RCC_GetSysClockFreq+0x200>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	099b      	lsrs	r3, r3, #6
 8003674:	2200      	movs	r2, #0
 8003676:	4618      	mov	r0, r3
 8003678:	4611      	mov	r1, r2
 800367a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800367e:	623b      	str	r3, [r7, #32]
 8003680:	2300      	movs	r3, #0
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
 8003684:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003688:	4642      	mov	r2, r8
 800368a:	464b      	mov	r3, r9
 800368c:	f04f 0000 	mov.w	r0, #0
 8003690:	f04f 0100 	mov.w	r1, #0
 8003694:	0159      	lsls	r1, r3, #5
 8003696:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800369a:	0150      	lsls	r0, r2, #5
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4641      	mov	r1, r8
 80036a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80036a6:	4649      	mov	r1, r9
 80036a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036c0:	ebb2 040a 	subs.w	r4, r2, sl
 80036c4:	eb63 050b 	sbc.w	r5, r3, fp
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	00eb      	lsls	r3, r5, #3
 80036d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036d6:	00e2      	lsls	r2, r4, #3
 80036d8:	4614      	mov	r4, r2
 80036da:	461d      	mov	r5, r3
 80036dc:	4643      	mov	r3, r8
 80036de:	18e3      	adds	r3, r4, r3
 80036e0:	603b      	str	r3, [r7, #0]
 80036e2:	464b      	mov	r3, r9
 80036e4:	eb45 0303 	adc.w	r3, r5, r3
 80036e8:	607b      	str	r3, [r7, #4]
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036f6:	4629      	mov	r1, r5
 80036f8:	028b      	lsls	r3, r1, #10
 80036fa:	4621      	mov	r1, r4
 80036fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003700:	4621      	mov	r1, r4
 8003702:	028a      	lsls	r2, r1, #10
 8003704:	4610      	mov	r0, r2
 8003706:	4619      	mov	r1, r3
 8003708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370a:	2200      	movs	r2, #0
 800370c:	61bb      	str	r3, [r7, #24]
 800370e:	61fa      	str	r2, [r7, #28]
 8003710:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003714:	f7fc fd58 	bl	80001c8 <__aeabi_uldivmod>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4613      	mov	r3, r2
 800371e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_GetSysClockFreq+0x200>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	0c1b      	lsrs	r3, r3, #16
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	3301      	adds	r3, #1
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003730:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003734:	fbb2 f3f3 	udiv	r3, r2, r3
 8003738:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800373a:	e002      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_RCC_GetSysClockFreq+0x204>)
 800373e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003744:	4618      	mov	r0, r3
 8003746:	3750      	adds	r7, #80	; 0x50
 8003748:	46bd      	mov	sp, r7
 800374a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	00f42400 	.word	0x00f42400
 8003758:	007a1200 	.word	0x007a1200

0800375c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003760:	4b03      	ldr	r3, [pc, #12]	; (8003770 <HAL_RCC_GetHCLKFreq+0x14>)
 8003762:	681b      	ldr	r3, [r3, #0]
}
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000000 	.word	0x20000000

08003774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003778:	f7ff fff0 	bl	800375c <HAL_RCC_GetHCLKFreq>
 800377c:	4602      	mov	r2, r0
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	0a9b      	lsrs	r3, r3, #10
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4903      	ldr	r1, [pc, #12]	; (8003798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800378a:	5ccb      	ldrb	r3, [r1, r3]
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40023800 	.word	0x40023800
 8003798:	080077d8 	.word	0x080077d8

0800379c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e07b      	b.n	80038a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d108      	bne.n	80037c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037be:	d009      	beq.n	80037d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	61da      	str	r2, [r3, #28]
 80037c6:	e005      	b.n	80037d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fd f938 	bl	8000a64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800380a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003858:	ea42 0103 	orr.w	r1, r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	0c1b      	lsrs	r3, r3, #16
 8003872:	f003 0104 	and.w	r1, r3, #4
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	f003 0210 	and.w	r2, r3, #16
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69da      	ldr	r2, [r3, #28]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003894:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038ae:	b084      	sub	sp, #16
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	f107 001c 	add.w	r0, r7, #28
 80038bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d122      	bne.n	800390c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80038da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80038ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d105      	bne.n	8003900 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f9bf 	bl	8003c84 <USB_CoreReset>
 8003906:	4603      	mov	r3, r0
 8003908:	73fb      	strb	r3, [r7, #15]
 800390a:	e01a      	b.n	8003942 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f9b3 	bl	8003c84 <USB_CoreReset>
 800391e:	4603      	mov	r3, r0
 8003920:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	d106      	bne.n	8003936 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	639a      	str	r2, [r3, #56]	; 0x38
 8003934:	e005      	b.n	8003942 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	2b01      	cmp	r3, #1
 8003946:	d10b      	bne.n	8003960 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f043 0206 	orr.w	r2, r3, #6
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f043 0220 	orr.w	r2, r3, #32
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003960:	7bfb      	ldrb	r3, [r7, #15]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800396c:	b004      	add	sp, #16
 800396e:	4770      	bx	lr

08003970 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f043 0201 	orr.w	r2, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f023 0201 	bic.w	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d115      	bne.n	8003a02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039e2:	2001      	movs	r0, #1
 80039e4:	f7fd fa1c 	bl	8000e20 <HAL_Delay>
      ms++;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3301      	adds	r3, #1
 80039ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f939 	bl	8003c66 <USB_GetMode>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d01e      	beq.n	8003a38 <USB_SetCurrentMode+0x84>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b31      	cmp	r3, #49	; 0x31
 80039fe:	d9f0      	bls.n	80039e2 <USB_SetCurrentMode+0x2e>
 8003a00:	e01a      	b.n	8003a38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d115      	bne.n	8003a34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a14:	2001      	movs	r0, #1
 8003a16:	f7fd fa03 	bl	8000e20 <HAL_Delay>
      ms++;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f920 	bl	8003c66 <USB_GetMode>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <USB_SetCurrentMode+0x84>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b31      	cmp	r3, #49	; 0x31
 8003a30:	d9f0      	bls.n	8003a14 <USB_SetCurrentMode+0x60>
 8003a32:	e001      	b.n	8003a38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e005      	b.n	8003a44 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b32      	cmp	r3, #50	; 0x32
 8003a3c:	d101      	bne.n	8003a42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4a13      	ldr	r2, [pc, #76]	; (8003ab0 <USB_FlushTxFifo+0x64>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d901      	bls.n	8003a6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e01b      	b.n	8003aa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	daf2      	bge.n	8003a5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	019b      	lsls	r3, r3, #6
 8003a7c:	f043 0220 	orr.w	r2, r3, #32
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3301      	adds	r3, #1
 8003a88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4a08      	ldr	r2, [pc, #32]	; (8003ab0 <USB_FlushTxFifo+0x64>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e006      	b.n	8003aa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d0f0      	beq.n	8003a84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	00030d40 	.word	0x00030d40

08003ab4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4a11      	ldr	r2, [pc, #68]	; (8003b10 <USB_FlushRxFifo+0x5c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e018      	b.n	8003b04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	daf2      	bge.n	8003ac0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2210      	movs	r2, #16
 8003ae2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4a08      	ldr	r2, [pc, #32]	; (8003b10 <USB_FlushRxFifo+0x5c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e006      	b.n	8003b04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f003 0310 	and.w	r3, r3, #16
 8003afe:	2b10      	cmp	r3, #16
 8003b00:	d0f0      	beq.n	8003ae4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	00030d40 	.word	0x00030d40

08003b14 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b089      	sub	sp, #36	; 0x24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	4611      	mov	r1, r2
 8003b20:	461a      	mov	r2, r3
 8003b22:	460b      	mov	r3, r1
 8003b24:	71fb      	strb	r3, [r7, #7]
 8003b26:	4613      	mov	r3, r2
 8003b28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003b32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d123      	bne.n	8003b82 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003b3a:	88bb      	ldrh	r3, [r7, #4]
 8003b3c:	3303      	adds	r3, #3
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	e018      	b.n	8003b7a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	031a      	lsls	r2, r3, #12
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b54:	461a      	mov	r2, r3
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	3301      	adds	r3, #1
 8003b66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	3301      	adds	r3, #1
 8003b72:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	3301      	adds	r3, #1
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d3e2      	bcc.n	8003b48 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3724      	adds	r7, #36	; 0x24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b08b      	sub	sp, #44	; 0x2c
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	089b      	lsrs	r3, r3, #2
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	623b      	str	r3, [r7, #32]
 8003bba:	e014      	b.n	8003be6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	601a      	str	r2, [r3, #0]
    pDest++;
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	3301      	adds	r3, #1
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	3301      	adds	r3, #1
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	3301      	adds	r3, #1
 8003be4:	623b      	str	r3, [r7, #32]
 8003be6:	6a3a      	ldr	r2, [r7, #32]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d3e6      	bcc.n	8003bbc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003bee:	8bfb      	ldrh	r3, [r7, #30]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01e      	beq.n	8003c32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f107 0310 	add.w	r3, r7, #16
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	701a      	strb	r2, [r3, #0]
      i++;
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	3301      	adds	r3, #1
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003c26:	8bfb      	ldrh	r3, [r7, #30]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003c2c:	8bfb      	ldrh	r3, [r7, #30]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1ea      	bne.n	8003c08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	372c      	adds	r7, #44	; 0x2c
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4013      	ands	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003c58:	68fb      	ldr	r3, [r7, #12]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0301 	and.w	r3, r3, #1
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
	...

08003c84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3301      	adds	r3, #1
 8003c94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4a13      	ldr	r2, [pc, #76]	; (8003ce8 <USB_CoreReset+0x64>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e01b      	b.n	8003cda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	daf2      	bge.n	8003c90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f043 0201 	orr.w	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4a09      	ldr	r2, [pc, #36]	; (8003ce8 <USB_CoreReset+0x64>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d901      	bls.n	8003ccc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e006      	b.n	8003cda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d0f0      	beq.n	8003cba <USB_CoreReset+0x36>

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	00030d40 	.word	0x00030d40

08003cec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cec:	b084      	sub	sp, #16
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b086      	sub	sp, #24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2300      	movs	r3, #0
 8003d10:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d018      	beq.n	8003d74 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d10a      	bne.n	8003d5e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d56:	f043 0304 	orr.w	r3, r3, #4
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	e014      	b.n	8003d88 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d6c:	f023 0304 	bic.w	r3, r3, #4
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	e009      	b.n	8003d88 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d82:	f023 0304 	bic.w	r3, r3, #4
 8003d86:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d88:	2110      	movs	r1, #16
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff fe5e 	bl	8003a4c <USB_FlushTxFifo>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fe8a 	bl	8003ab4 <USB_FlushRxFifo>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003daa:	2300      	movs	r3, #0
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	e015      	b.n	8003ddc <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d3e5      	bcc.n	8003db0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f04f 32ff 	mov.w	r2, #4294967295
 8003df0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00b      	beq.n	8003e16 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e04:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a13      	ldr	r2, [pc, #76]	; (8003e58 <USB_HostInit+0x16c>)
 8003e0a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <USB_HostInit+0x170>)
 8003e10:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003e14:	e009      	b.n	8003e2a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2280      	movs	r2, #128	; 0x80
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a10      	ldr	r2, [pc, #64]	; (8003e60 <USB_HostInit+0x174>)
 8003e20:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a0f      	ldr	r2, [pc, #60]	; (8003e64 <USB_HostInit+0x178>)
 8003e26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d105      	bne.n	8003e3c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	f043 0210 	orr.w	r2, r3, #16
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	699a      	ldr	r2, [r3, #24]
 8003e40:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <USB_HostInit+0x17c>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e54:	b004      	add	sp, #16
 8003e56:	4770      	bx	lr
 8003e58:	01000200 	.word	0x01000200
 8003e5c:	00e00300 	.word	0x00e00300
 8003e60:	00600080 	.word	0x00600080
 8003e64:	004000e0 	.word	0x004000e0
 8003e68:	a3200008 	.word	0xa3200008

08003e6c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e8a:	f023 0303 	bic.w	r3, r3, #3
 8003e8e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	68f9      	ldr	r1, [r7, #12]
 8003ea0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d107      	bne.n	8003ebe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003eba:	6053      	str	r3, [r2, #4]
 8003ebc:	e009      	b.n	8003ed2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d106      	bne.n	8003ed2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f241 7370 	movw	r3, #6000	; 0x1770
 8003ed0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f00:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8003f10:	2064      	movs	r0, #100	; 0x64
 8003f12:	f7fc ff85 	bl	8000e20 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003f1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f22:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8003f24:	200a      	movs	r0, #10
 8003f26:	f7fc ff7b 	bl	8000e20 <HAL_Delay>

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f58:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d109      	bne.n	8003f78 <USB_DriveVbus+0x44>
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d106      	bne.n	8003f78 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f76:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f82:	d109      	bne.n	8003f98 <USB_DriveVbus+0x64>
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003f92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f96:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b085      	sub	sp, #20
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	0c5b      	lsrs	r3, r3, #17
 8003fc4:	f003 0303 	and.w	r3, r3, #3
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	b29b      	uxth	r3, r3
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	4608      	mov	r0, r1
 8004002:	4611      	mov	r1, r2
 8004004:	461a      	mov	r2, r3
 8004006:	4603      	mov	r3, r0
 8004008:	70fb      	strb	r3, [r7, #3]
 800400a:	460b      	mov	r3, r1
 800400c:	70bb      	strb	r3, [r7, #2]
 800400e:	4613      	mov	r3, r2
 8004010:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800401a:	78fb      	ldrb	r3, [r7, #3]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4413      	add	r3, r2
 8004022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004026:	461a      	mov	r2, r3
 8004028:	f04f 33ff 	mov.w	r3, #4294967295
 800402c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800402e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004032:	2b03      	cmp	r3, #3
 8004034:	d87e      	bhi.n	8004134 <USB_HC_Init+0x13c>
 8004036:	a201      	add	r2, pc, #4	; (adr r2, 800403c <USB_HC_Init+0x44>)
 8004038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403c:	0800404d 	.word	0x0800404d
 8004040:	080040f7 	.word	0x080040f7
 8004044:	0800404d 	.word	0x0800404d
 8004048:	080040b9 	.word	0x080040b9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	4413      	add	r3, r2
 8004054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004058:	461a      	mov	r2, r3
 800405a:	f240 439d 	movw	r3, #1181	; 0x49d
 800405e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004060:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004064:	2b00      	cmp	r3, #0
 8004066:	da10      	bge.n	800408a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4413      	add	r3, r2
 8004070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	78fa      	ldrb	r2, [r7, #3]
 8004078:	0151      	lsls	r1, r2, #5
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	440a      	add	r2, r1
 800407e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004086:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004088:	e057      	b.n	800413a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004092:	2b00      	cmp	r3, #0
 8004094:	d051      	beq.n	800413a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004096:	78fb      	ldrb	r3, [r7, #3]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4413      	add	r3, r2
 800409e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	78fa      	ldrb	r2, [r7, #3]
 80040a6:	0151      	lsls	r1, r2, #5
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	440a      	add	r2, r1
 80040ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040b4:	60d3      	str	r3, [r2, #12]
      break;
 80040b6:	e040      	b.n	800413a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c4:	461a      	mov	r2, r3
 80040c6:	f240 639d 	movw	r3, #1693	; 0x69d
 80040ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80040cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	da34      	bge.n	800413e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80040d4:	78fb      	ldrb	r3, [r7, #3]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	0151      	lsls	r1, r2, #5
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	440a      	add	r2, r1
 80040ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80040f4:	e023      	b.n	800413e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80040f6:	78fb      	ldrb	r3, [r7, #3]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004102:	461a      	mov	r2, r3
 8004104:	f240 2325 	movw	r3, #549	; 0x225
 8004108:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800410a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800410e:	2b00      	cmp	r3, #0
 8004110:	da17      	bge.n	8004142 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4413      	add	r3, r2
 800411a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	78fa      	ldrb	r2, [r7, #3]
 8004122:	0151      	lsls	r1, r2, #5
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	440a      	add	r2, r1
 8004128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800412c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004130:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004132:	e006      	b.n	8004142 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	77fb      	strb	r3, [r7, #31]
      break;
 8004138:	e004      	b.n	8004144 <USB_HC_Init+0x14c>
      break;
 800413a:	bf00      	nop
 800413c:	e002      	b.n	8004144 <USB_HC_Init+0x14c>
      break;
 800413e:	bf00      	nop
 8004140:	e000      	b.n	8004144 <USB_HC_Init+0x14c>
      break;
 8004142:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4413      	add	r3, r2
 800414c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	78fa      	ldrb	r2, [r7, #3]
 8004154:	0151      	lsls	r1, r2, #5
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	440a      	add	r2, r1
 800415a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800415e:	f043 0302 	orr.w	r3, r3, #2
 8004162:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800416a:	699a      	ldr	r2, [r3, #24]
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	2101      	movs	r1, #1
 8004174:	fa01 f303 	lsl.w	r3, r1, r3
 8004178:	6939      	ldr	r1, [r7, #16]
 800417a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800417e:	4313      	orrs	r3, r2
 8004180:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800418e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004192:	2b00      	cmp	r3, #0
 8004194:	da03      	bge.n	800419e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419a:	61bb      	str	r3, [r7, #24]
 800419c:	e001      	b.n	80041a2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff feff 	bl	8003fa6 <USB_GetHostSpeed>
 80041a8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80041aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d106      	bne.n	80041c0 <USB_HC_Init+0x1c8>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d003      	beq.n	80041c0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80041b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	e001      	b.n	80041c4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80041c4:	787b      	ldrb	r3, [r7, #1]
 80041c6:	059b      	lsls	r3, r3, #22
 80041c8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80041cc:	78bb      	ldrb	r3, [r7, #2]
 80041ce:	02db      	lsls	r3, r3, #11
 80041d0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80041d4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80041d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80041da:	049b      	lsls	r3, r3, #18
 80041dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80041e0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80041e2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80041e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80041e8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80041ee:	78fb      	ldrb	r3, [r7, #3]
 80041f0:	0159      	lsls	r1, r3, #5
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	440b      	add	r3, r1
 80041f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004200:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004202:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004206:	2b03      	cmp	r3, #3
 8004208:	d003      	beq.n	8004212 <USB_HC_Init+0x21a>
 800420a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800420e:	2b01      	cmp	r3, #1
 8004210:	d10f      	bne.n	8004232 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	4413      	add	r3, r2
 800421a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	78fa      	ldrb	r2, [r7, #3]
 8004222:	0151      	lsls	r1, r2, #5
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	440a      	add	r2, r1
 8004228:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800422c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004230:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004232:	7ffb      	ldrb	r3, [r7, #31]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3720      	adds	r7, #32
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08c      	sub	sp, #48	; 0x30
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	4613      	mov	r3, r2
 8004248:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	785b      	ldrb	r3, [r3, #1]
 8004252:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004258:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d02d      	beq.n	80042c2 <USB_HC_StartXfer+0x86>
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	791b      	ldrb	r3, [r3, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d129      	bne.n	80042c2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d117      	bne.n	80042a4 <USB_HC_StartXfer+0x68>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	79db      	ldrb	r3, [r3, #7]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <USB_HC_StartXfer+0x48>
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	79db      	ldrb	r3, [r3, #7]
 8004280:	2b02      	cmp	r3, #2
 8004282:	d10f      	bne.n	80042a4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	4413      	add	r3, r2
 800428c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	0151      	lsls	r1, r2, #5
 8004296:	6a3a      	ldr	r2, [r7, #32]
 8004298:	440a      	add	r2, r1
 800429a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800429e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10b      	bne.n	80042c2 <USB_HC_StartXfer+0x86>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	795b      	ldrb	r3, [r3, #5]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d107      	bne.n	80042c2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	785b      	ldrb	r3, [r3, #1]
 80042b6:	4619      	mov	r1, r3
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 fa0f 	bl	80046dc <USB_DoPing>
      return HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	e0f8      	b.n	80044b4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d018      	beq.n	80042fc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	8912      	ldrh	r2, [r2, #8]
 80042d2:	4413      	add	r3, r2
 80042d4:	3b01      	subs	r3, #1
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	8912      	ldrh	r2, [r2, #8]
 80042da:	fbb3 f3f2 	udiv	r3, r3, r2
 80042de:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80042e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80042e2:	8b7b      	ldrh	r3, [r7, #26]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d90b      	bls.n	8004300 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80042e8:	8b7b      	ldrh	r3, [r7, #26]
 80042ea:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80042ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	8912      	ldrh	r2, [r2, #8]
 80042f2:	fb03 f202 	mul.w	r2, r3, r2
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	611a      	str	r2, [r3, #16]
 80042fa:	e001      	b.n	8004300 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80042fc:	2301      	movs	r3, #1
 80042fe:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	78db      	ldrb	r3, [r3, #3]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d007      	beq.n	8004318 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004308:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	8912      	ldrh	r2, [r2, #8]
 800430e:	fb03 f202 	mul.w	r2, r3, r2
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	611a      	str	r2, [r3, #16]
 8004316:	e003      	b.n	8004320 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004328:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800432a:	04d9      	lsls	r1, r3, #19
 800432c:	4b63      	ldr	r3, [pc, #396]	; (80044bc <USB_HC_StartXfer+0x280>)
 800432e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004330:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	7a9b      	ldrb	r3, [r3, #10]
 8004336:	075b      	lsls	r3, r3, #29
 8004338:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800433c:	69f9      	ldr	r1, [r7, #28]
 800433e:	0148      	lsls	r0, r1, #5
 8004340:	6a39      	ldr	r1, [r7, #32]
 8004342:	4401      	add	r1, r0
 8004344:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004348:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800434a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800434c:	79fb      	ldrb	r3, [r7, #7]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	68d9      	ldr	r1, [r3, #12]
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	4413      	add	r3, r2
 800435e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004362:	460a      	mov	r2, r1
 8004364:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	bf0c      	ite	eq
 8004376:	2301      	moveq	r3, #1
 8004378:	2300      	movne	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	4413      	add	r3, r2
 8004386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69fa      	ldr	r2, [r7, #28]
 800438e:	0151      	lsls	r1, r2, #5
 8004390:	6a3a      	ldr	r2, [r7, #32]
 8004392:	440a      	add	r2, r1
 8004394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004398:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800439c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	7e7b      	ldrb	r3, [r7, #25]
 80043ae:	075b      	lsls	r3, r3, #29
 80043b0:	69f9      	ldr	r1, [r7, #28]
 80043b2:	0148      	lsls	r0, r1, #5
 80043b4:	6a39      	ldr	r1, [r7, #32]
 80043b6:	4401      	add	r1, r0
 80043b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80043bc:	4313      	orrs	r3, r2
 80043be:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043d6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	78db      	ldrb	r3, [r3, #3]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d004      	beq.n	80043ea <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	e003      	b.n	80043f2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043f0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043f8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	4413      	add	r3, r2
 8004402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004406:	461a      	mov	r2, r3
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	e04e      	b.n	80044b4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	78db      	ldrb	r3, [r3, #3]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d149      	bne.n	80044b2 <USB_HC_StartXfer+0x276>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d045      	beq.n	80044b2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	79db      	ldrb	r3, [r3, #7]
 800442a:	2b03      	cmp	r3, #3
 800442c:	d830      	bhi.n	8004490 <USB_HC_StartXfer+0x254>
 800442e:	a201      	add	r2, pc, #4	; (adr r2, 8004434 <USB_HC_StartXfer+0x1f8>)
 8004430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004434:	08004445 	.word	0x08004445
 8004438:	08004469 	.word	0x08004469
 800443c:	08004445 	.word	0x08004445
 8004440:	08004469 	.word	0x08004469
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	3303      	adds	r3, #3
 800444a:	089b      	lsrs	r3, r3, #2
 800444c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800444e:	8afa      	ldrh	r2, [r7, #22]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	b29b      	uxth	r3, r3
 8004456:	429a      	cmp	r2, r3
 8004458:	d91c      	bls.n	8004494 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	f043 0220 	orr.w	r2, r3, #32
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	619a      	str	r2, [r3, #24]
        }
        break;
 8004466:	e015      	b.n	8004494 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	3303      	adds	r3, #3
 800446e:	089b      	lsrs	r3, r3, #2
 8004470:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004472:	8afa      	ldrh	r2, [r7, #22]
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	b29b      	uxth	r3, r3
 800447e:	429a      	cmp	r2, r3
 8004480:	d90a      	bls.n	8004498 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	619a      	str	r2, [r3, #24]
        }
        break;
 800448e:	e003      	b.n	8004498 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004490:	bf00      	nop
 8004492:	e002      	b.n	800449a <USB_HC_StartXfer+0x25e>
        break;
 8004494:	bf00      	nop
 8004496:	e000      	b.n	800449a <USB_HC_StartXfer+0x25e>
        break;
 8004498:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	68d9      	ldr	r1, [r3, #12]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	785a      	ldrb	r2, [r3, #1]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2000      	movs	r0, #0
 80044aa:	9000      	str	r0, [sp, #0]
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f7ff fb31 	bl	8003b14 <USB_WritePacket>
  }

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3728      	adds	r7, #40	; 0x28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	1ff80000 	.word	0x1ff80000

080044c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	b29b      	uxth	r3, r3
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b089      	sub	sp, #36	; 0x24
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	460b      	mov	r3, r1
 80044ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	4413      	add	r3, r2
 8004502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	0c9b      	lsrs	r3, r3, #18
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	4413      	add	r3, r2
 8004518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	0fdb      	lsrs	r3, r3, #31
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b20      	cmp	r3, #32
 8004530:	d104      	bne.n	800453c <USB_HC_Halt+0x5a>
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	e0c8      	b.n	80046ce <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <USB_HC_Halt+0x66>
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d163      	bne.n	8004610 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	4413      	add	r3, r2
 8004550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	0151      	lsls	r1, r2, #5
 800455a:	69fa      	ldr	r2, [r7, #28]
 800455c:	440a      	add	r2, r1
 800455e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004562:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004566:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	f040 80ab 	bne.w	80046cc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d133      	bne.n	80045ea <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	4413      	add	r3, r2
 800458a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	0151      	lsls	r1, r2, #5
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	440a      	add	r2, r1
 8004598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800459c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	0151      	lsls	r1, r2, #5
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	440a      	add	r2, r1
 80045b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045c0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3301      	adds	r3, #1
 80045c6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045ce:	d81d      	bhi.n	800460c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045e6:	d0ec      	beq.n	80045c2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80045e8:	e070      	b.n	80046cc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	0151      	lsls	r1, r2, #5
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	440a      	add	r2, r1
 8004600:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004604:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004608:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800460a:	e05f      	b.n	80046cc <USB_HC_Halt+0x1ea>
            break;
 800460c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800460e:	e05d      	b.n	80046cc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	4413      	add	r3, r2
 8004618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	0151      	lsls	r1, r2, #5
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	440a      	add	r2, r1
 8004626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800462a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800462e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d133      	bne.n	80046a8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	4413      	add	r3, r2
 8004648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	0151      	lsls	r1, r2, #5
 8004652:	69fa      	ldr	r2, [r7, #28]
 8004654:	440a      	add	r2, r1
 8004656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800465a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800465e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	4413      	add	r3, r2
 8004668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	0151      	lsls	r1, r2, #5
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	440a      	add	r2, r1
 8004676:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800467a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800467e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	3301      	adds	r3, #1
 8004684:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800468c:	d81d      	bhi.n	80046ca <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046a4:	d0ec      	beq.n	8004680 <USB_HC_Halt+0x19e>
 80046a6:	e011      	b.n	80046cc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	0151      	lsls	r1, r2, #5
 80046ba:	69fa      	ldr	r2, [r7, #28]
 80046bc:	440a      	add	r2, r1
 80046be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	e000      	b.n	80046cc <USB_HC_Halt+0x1ea>
          break;
 80046ca:	bf00      	nop
    }
  }

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3724      	adds	r7, #36	; 0x24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80046f0:	2301      	movs	r3, #1
 80046f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	04da      	lsls	r2, r3, #19
 80046f8:	4b15      	ldr	r3, [pc, #84]	; (8004750 <USB_DoPing+0x74>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	0151      	lsls	r1, r2, #5
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	440a      	add	r2, r1
 8004704:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004708:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800470c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	4413      	add	r3, r2
 8004716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004724:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800472c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	4413      	add	r3, r2
 8004736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473a:	461a      	mov	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	1ff80000 	.word	0x1ff80000

08004754 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff f912 	bl	8003992 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800476e:	2110      	movs	r1, #16
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7ff f96b 	bl	8003a4c <USB_FlushTxFifo>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff f997 	bl	8003ab4 <USB_FlushRxFifo>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004790:	2300      	movs	r3, #0
 8004792:	61bb      	str	r3, [r7, #24]
 8004794:	e01f      	b.n	80047d6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	4413      	add	r3, r2
 800479e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047bc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ca:	461a      	mov	r2, r3
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	3301      	adds	r3, #1
 80047d4:	61bb      	str	r3, [r7, #24]
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b0f      	cmp	r3, #15
 80047da:	d9dc      	bls.n	8004796 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80047dc:	2300      	movs	r3, #0
 80047de:	61bb      	str	r3, [r7, #24]
 80047e0:	e034      	b.n	800484c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004800:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004808:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	4413      	add	r3, r2
 8004812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004816:	461a      	mov	r2, r3
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3301      	adds	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004828:	d80c      	bhi.n	8004844 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	4413      	add	r3, r2
 8004832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800483c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004840:	d0ec      	beq.n	800481c <USB_StopHost+0xc8>
 8004842:	e000      	b.n	8004846 <USB_StopHost+0xf2>
        break;
 8004844:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	3301      	adds	r3, #1
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2b0f      	cmp	r3, #15
 8004850:	d9c7      	bls.n	80047e2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004858:	461a      	mov	r2, r3
 800485a:	f04f 33ff 	mov.w	r3, #4294967295
 800485e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f04f 32ff 	mov.w	r2, #4294967295
 8004866:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff f881 	bl	8003970 <USB_EnableGlobalInt>

  return ret;
 800486e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3720      	adds	r7, #32
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004878:	b590      	push	{r4, r7, lr}
 800487a:	b089      	sub	sp, #36	; 0x24
 800487c:	af04      	add	r7, sp, #16
 800487e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8004880:	2301      	movs	r3, #1
 8004882:	2202      	movs	r2, #2
 8004884:	2102      	movs	r1, #2
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fc66 	bl	8005158 <USBH_FindInterface>
 800488c:	4603      	mov	r3, r0
 800488e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	2bff      	cmp	r3, #255	; 0xff
 8004894:	d002      	beq.n	800489c <USBH_CDC_InterfaceInit+0x24>
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d901      	bls.n	80048a0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800489c:	2302      	movs	r3, #2
 800489e:	e13d      	b.n	8004b1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	4619      	mov	r1, r3
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 fc3b 	bl	8005120 <USBH_SelectInterface>
 80048aa:	4603      	mov	r3, r0
 80048ac:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80048ae:	7bbb      	ldrb	r3, [r7, #14]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80048b4:	2302      	movs	r3, #2
 80048b6:	e131      	b.n	8004b1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80048be:	2050      	movs	r0, #80	; 0x50
 80048c0:	f002 fac4 	bl	8006e4c <malloc>
 80048c4:	4603      	mov	r3, r0
 80048c6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80048d8:	2302      	movs	r3, #2
 80048da:	e11f      	b.n	8004b1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80048dc:	2250      	movs	r2, #80	; 0x50
 80048de:	2100      	movs	r1, #0
 80048e0:	68b8      	ldr	r0, [r7, #8]
 80048e2:	f002 fd53 	bl	800738c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	211a      	movs	r1, #26
 80048ec:	fb01 f303 	mul.w	r3, r1, r3
 80048f0:	4413      	add	r3, r2
 80048f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	b25b      	sxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	da15      	bge.n	800492a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	211a      	movs	r1, #26
 8004904:	fb01 f303 	mul.w	r3, r1, r3
 8004908:	4413      	add	r3, r2
 800490a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800490e:	781a      	ldrb	r2, [r3, #0]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	211a      	movs	r1, #26
 800491a:	fb01 f303 	mul.w	r3, r1, r3
 800491e:	4413      	add	r3, r2
 8004920:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004924:	881a      	ldrh	r2, [r3, #0]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	785b      	ldrb	r3, [r3, #1]
 800492e:	4619      	mov	r1, r3
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f001 ff2e 	bl	8006792 <USBH_AllocPipe>
 8004936:	4603      	mov	r3, r0
 8004938:	461a      	mov	r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	7819      	ldrb	r1, [r3, #0]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	7858      	ldrb	r0, [r3, #1]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	8952      	ldrh	r2, [r2, #10]
 8004956:	9202      	str	r2, [sp, #8]
 8004958:	2203      	movs	r2, #3
 800495a:	9201      	str	r2, [sp, #4]
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	4623      	mov	r3, r4
 8004960:	4602      	mov	r2, r0
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f001 fee6 	bl	8006734 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2200      	movs	r2, #0
 800496e:	4619      	mov	r1, r3
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f002 f9e7 	bl	8006d44 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8004976:	2300      	movs	r3, #0
 8004978:	2200      	movs	r2, #0
 800497a:	210a      	movs	r1, #10
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fbeb 	bl	8005158 <USBH_FindInterface>
 8004982:	4603      	mov	r3, r0
 8004984:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	2bff      	cmp	r3, #255	; 0xff
 800498a:	d002      	beq.n	8004992 <USBH_CDC_InterfaceInit+0x11a>
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d901      	bls.n	8004996 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004992:	2302      	movs	r3, #2
 8004994:	e0c2      	b.n	8004b1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	211a      	movs	r1, #26
 800499c:	fb01 f303 	mul.w	r3, r1, r3
 80049a0:	4413      	add	r3, r2
 80049a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	b25b      	sxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	da16      	bge.n	80049dc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	211a      	movs	r1, #26
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	4413      	add	r3, r2
 80049ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80049be:	781a      	ldrb	r2, [r3, #0]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	211a      	movs	r1, #26
 80049ca:	fb01 f303 	mul.w	r3, r1, r3
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80049d4:	881a      	ldrh	r2, [r3, #0]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	835a      	strh	r2, [r3, #26]
 80049da:	e015      	b.n	8004a08 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	211a      	movs	r1, #26
 80049e2:	fb01 f303 	mul.w	r3, r1, r3
 80049e6:	4413      	add	r3, r2
 80049e8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80049ec:	781a      	ldrb	r2, [r3, #0]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	211a      	movs	r1, #26
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004a02:	881a      	ldrh	r2, [r3, #0]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	211a      	movs	r1, #26
 8004a0e:	fb01 f303 	mul.w	r3, r1, r3
 8004a12:	4413      	add	r3, r2
 8004a14:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	b25b      	sxtb	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	da16      	bge.n	8004a4e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	211a      	movs	r1, #26
 8004a26:	fb01 f303 	mul.w	r3, r1, r3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004a30:	781a      	ldrb	r2, [r3, #0]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	211a      	movs	r1, #26
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004a46:	881a      	ldrh	r2, [r3, #0]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	835a      	strh	r2, [r3, #26]
 8004a4c:	e015      	b.n	8004a7a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	211a      	movs	r1, #26
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	4413      	add	r3, r2
 8004a5a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004a5e:	781a      	ldrb	r2, [r3, #0]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	211a      	movs	r1, #26
 8004a6a:	fb01 f303 	mul.w	r3, r1, r3
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004a74:	881a      	ldrh	r2, [r3, #0]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	7b9b      	ldrb	r3, [r3, #14]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f001 fe86 	bl	8006792 <USBH_AllocPipe>
 8004a86:	4603      	mov	r3, r0
 8004a88:	461a      	mov	r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	7bdb      	ldrb	r3, [r3, #15]
 8004a92:	4619      	mov	r1, r3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f001 fe7c 	bl	8006792 <USBH_AllocPipe>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	7b59      	ldrb	r1, [r3, #13]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	7b98      	ldrb	r0, [r3, #14]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	8b12      	ldrh	r2, [r2, #24]
 8004aba:	9202      	str	r2, [sp, #8]
 8004abc:	2202      	movs	r2, #2
 8004abe:	9201      	str	r2, [sp, #4]
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	4623      	mov	r3, r4
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f001 fe34 	bl	8006734 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	7b19      	ldrb	r1, [r3, #12]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	7bd8      	ldrb	r0, [r3, #15]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	8b52      	ldrh	r2, [r2, #26]
 8004ae4:	9202      	str	r2, [sp, #8]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	9201      	str	r2, [sp, #4]
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	4623      	mov	r3, r4
 8004aee:	4602      	mov	r2, r0
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f001 fe1f 	bl	8006734 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	7b5b      	ldrb	r3, [r3, #13]
 8004b02:	2200      	movs	r2, #0
 8004b04:	4619      	mov	r1, r3
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f002 f91c 	bl	8006d44 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	7b1b      	ldrb	r3, [r3, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	4619      	mov	r1, r3
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f002 f915 	bl	8006d44 <USBH_LL_SetToggle>

  return USBH_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd90      	pop	{r4, r7, pc}

08004b24 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00e      	beq.n	8004b5c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	4619      	mov	r1, r3
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f001 fe14 	bl	8006772 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f001 fe3f 	bl	80067d4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	7b1b      	ldrb	r3, [r3, #12]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00e      	beq.n	8004b82 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	7b1b      	ldrb	r3, [r3, #12]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f001 fe01 	bl	8006772 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	7b1b      	ldrb	r3, [r3, #12]
 8004b74:	4619      	mov	r1, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f001 fe2c 	bl	80067d4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	7b5b      	ldrb	r3, [r3, #13]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00e      	beq.n	8004ba8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	7b5b      	ldrb	r3, [r3, #13]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f001 fdee 	bl	8006772 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	7b5b      	ldrb	r3, [r3, #13]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f001 fe19 	bl	80067d4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00b      	beq.n	8004bcc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f002 f94d 	bl	8006e5c <free>
    phost->pActiveClass->pData = 0U;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004bc8:	2200      	movs	r2, #0
 8004bca:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	3340      	adds	r3, #64	; 0x40
 8004bec:	4619      	mov	r1, r3
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f8b1 	bl	8004d56 <GetLineCoding>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8004bf8:	7afb      	ldrb	r3, [r7, #11]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d105      	bne.n	8004c0a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004c04:	2102      	movs	r1, #2
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8004c0a:	7afb      	ldrb	r3, [r7, #11]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d877      	bhi.n	8004d28 <USBH_CDC_Process+0x114>
 8004c38:	a201      	add	r2, pc, #4	; (adr r2, 8004c40 <USBH_CDC_Process+0x2c>)
 8004c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3e:	bf00      	nop
 8004c40:	08004c55 	.word	0x08004c55
 8004c44:	08004c5b 	.word	0x08004c5b
 8004c48:	08004c8b 	.word	0x08004c8b
 8004c4c:	08004cff 	.word	0x08004cff
 8004c50:	08004d0d 	.word	0x08004d0d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	73fb      	strb	r3, [r7, #15]
      break;
 8004c58:	e06d      	b.n	8004d36 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c5e:	4619      	mov	r1, r3
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f897 	bl	8004d94 <SetLineCoding>
 8004c66:	4603      	mov	r3, r0
 8004c68:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004c6a:	7bbb      	ldrb	r3, [r7, #14]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d104      	bne.n	8004c7a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004c78:	e058      	b.n	8004d2c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8004c7a:	7bbb      	ldrb	r3, [r7, #14]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d055      	beq.n	8004d2c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2204      	movs	r2, #4
 8004c84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004c88:	e050      	b.n	8004d2c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	3340      	adds	r3, #64	; 0x40
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f860 	bl	8004d56 <GetLineCoding>
 8004c96:	4603      	mov	r3, r0
 8004c98:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004c9a:	7bbb      	ldrb	r3, [r7, #14]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d126      	bne.n	8004cee <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb2:	791b      	ldrb	r3, [r3, #4]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d13b      	bne.n	8004d30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d133      	bne.n	8004d30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d12b      	bne.n	8004d30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d124      	bne.n	8004d30 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f958 	bl	8004f9c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004cec:	e020      	b.n	8004d30 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8004cee:	7bbb      	ldrb	r3, [r7, #14]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d01d      	beq.n	8004d30 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004cfc:	e018      	b.n	8004d30 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f867 	bl	8004dd2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f8da 	bl	8004ebe <CDC_ProcessReception>
      break;
 8004d0a:	e014      	b.n	8004d36 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 ffef 	bl	8005cf2 <USBH_ClrFeature>
 8004d14:	4603      	mov	r3, r0
 8004d16:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004d18:	7bbb      	ldrb	r3, [r7, #14]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10a      	bne.n	8004d34 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8004d26:	e005      	b.n	8004d34 <USBH_CDC_Process+0x120>

    default:
      break;
 8004d28:	bf00      	nop
 8004d2a:	e004      	b.n	8004d36 <USBH_CDC_Process+0x122>
      break;
 8004d2c:	bf00      	nop
 8004d2e:	e002      	b.n	8004d36 <USBH_CDC_Process+0x122>
      break;
 8004d30:	bf00      	nop
 8004d32:	e000      	b.n	8004d36 <USBH_CDC_Process+0x122>
      break;
 8004d34:	bf00      	nop

  }

  return status;
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	22a1      	movs	r2, #161	; 0xa1
 8004d64:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2221      	movs	r2, #33	; 0x21
 8004d6a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2207      	movs	r2, #7
 8004d7c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2207      	movs	r2, #7
 8004d82:	4619      	mov	r1, r3
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f001 fa83 	bl	8006290 <USBH_CtlReq>
 8004d8a:	4603      	mov	r3, r0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2221      	movs	r2, #33	; 0x21
 8004da2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2207      	movs	r2, #7
 8004dba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2207      	movs	r2, #7
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f001 fa64 	bl	8006290 <USBH_CtlReq>
 8004dc8:	4603      	mov	r3, r0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b086      	sub	sp, #24
 8004dd6:	af02      	add	r7, sp, #8
 8004dd8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004de4:	2300      	movs	r3, #0
 8004de6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d002      	beq.n	8004df8 <CDC_ProcessTransmission+0x26>
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d023      	beq.n	8004e3e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8004df6:	e05e      	b.n	8004eb6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	8b12      	ldrh	r2, [r2, #24]
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d90b      	bls.n	8004e1c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	69d9      	ldr	r1, [r3, #28]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8b1a      	ldrh	r2, [r3, #24]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	7b5b      	ldrb	r3, [r3, #13]
 8004e10:	2001      	movs	r0, #1
 8004e12:	9000      	str	r0, [sp, #0]
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f001 fc4a 	bl	80066ae <USBH_BulkSendData>
 8004e1a:	e00b      	b.n	8004e34 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	7b5b      	ldrb	r3, [r3, #13]
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	9000      	str	r0, [sp, #0]
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f001 fc3d 	bl	80066ae <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004e3c:	e03b      	b.n	8004eb6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	7b5b      	ldrb	r3, [r3, #13]
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f001 ff53 	bl	8006cf0 <USBH_LL_GetURBState>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8004e4e:	7afb      	ldrb	r3, [r7, #11]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d128      	bne.n	8004ea6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	8b12      	ldrh	r2, [r2, #24]
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d90e      	bls.n	8004e7e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	8b12      	ldrh	r2, [r2, #24]
 8004e68:	1a9a      	subs	r2, r3, r2
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	8b12      	ldrh	r2, [r2, #24]
 8004e76:	441a      	add	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	61da      	str	r2, [r3, #28]
 8004e7c:	e002      	b.n	8004e84 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d004      	beq.n	8004e96 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004e94:	e00e      	b.n	8004eb4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f868 	bl	8004f74 <USBH_CDC_TransmitCallback>
      break;
 8004ea4:	e006      	b.n	8004eb4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8004ea6:	7afb      	ldrb	r3, [r7, #11]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d103      	bne.n	8004eb4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004eb4:	bf00      	nop
  }
}
 8004eb6:	bf00      	nop
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b086      	sub	sp, #24
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	d002      	beq.n	8004ee4 <CDC_ProcessReception+0x26>
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d00e      	beq.n	8004f00 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8004ee2:	e043      	b.n	8004f6c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	6a19      	ldr	r1, [r3, #32]
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	8b5a      	ldrh	r2, [r3, #26]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	7b1b      	ldrb	r3, [r3, #12]
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f001 fc01 	bl	80066f8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2204      	movs	r2, #4
 8004efa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004efe:	e035      	b.n	8004f6c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	7b1b      	ldrb	r3, [r3, #12]
 8004f04:	4619      	mov	r1, r3
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f001 fef2 	bl	8006cf0 <USBH_LL_GetURBState>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8004f10:	7cfb      	ldrb	r3, [r7, #19]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d129      	bne.n	8004f6a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	7b1b      	ldrb	r3, [r3, #12]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f001 fe55 	bl	8006bcc <USBH_LL_GetLastXferSize>
 8004f22:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d016      	beq.n	8004f5c <CDC_ProcessReception+0x9e>
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	8b5b      	ldrh	r3, [r3, #26]
 8004f32:	461a      	mov	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d910      	bls.n	8004f5c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1ad2      	subs	r2, r2, r3
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	6a1a      	ldr	r2, [r3, #32]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	441a      	add	r2, r3
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2203      	movs	r2, #3
 8004f56:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004f5a:	e006      	b.n	8004f6a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f80f 	bl	8004f88 <USBH_CDC_ReceiveCallback>
      break;
 8004f6a:	bf00      	nop
  }
}
 8004f6c:	bf00      	nop
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e029      	b.n	800501c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	79fa      	ldrb	r2, [r7, #7]
 8004fcc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f81f 	bl	8005024 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f001 fd25 	bl	8006a64 <USBH_LL_Init>

  return USBH_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	e009      	b.n	800504a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	33e0      	adds	r3, #224	; 0xe0
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	2200      	movs	r2, #0
 8005042:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	3301      	adds	r3, #1
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b0f      	cmp	r3, #15
 800504e:	d9f2      	bls.n	8005036 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005050:	2300      	movs	r3, #0
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	e009      	b.n	800506a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4413      	add	r3, r2
 800505c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005060:	2200      	movs	r2, #0
 8005062:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3301      	adds	r3, #1
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005070:	d3f1      	bcc.n	8005056 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2240      	movs	r2, #64	; 0x40
 8005096:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d016      	beq.n	800510e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10e      	bne.n	8005108 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80050f0:	1c59      	adds	r1, r3, #1
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	33de      	adds	r3, #222	; 0xde
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	73fb      	strb	r3, [r7, #15]
 8005106:	e004      	b.n	8005112 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005108:	2302      	movs	r3, #2
 800510a:	73fb      	strb	r3, [r7, #15]
 800510c:	e001      	b.n	8005112 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800510e:	2302      	movs	r3, #2
 8005110:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005112:	7bfb      	ldrb	r3, [r7, #15]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005136:	78fa      	ldrb	r2, [r7, #3]
 8005138:	429a      	cmp	r2, r3
 800513a:	d204      	bcs.n	8005146 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	78fa      	ldrb	r2, [r7, #3]
 8005140:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005144:	e001      	b.n	800514a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005146:	2302      	movs	r3, #2
 8005148:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800514a:	7bfb      	ldrb	r3, [r7, #15]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	4608      	mov	r0, r1
 8005162:	4611      	mov	r1, r2
 8005164:	461a      	mov	r2, r3
 8005166:	4603      	mov	r3, r0
 8005168:	70fb      	strb	r3, [r7, #3]
 800516a:	460b      	mov	r3, r1
 800516c:	70bb      	strb	r3, [r7, #2]
 800516e:	4613      	mov	r3, r2
 8005170:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005176:	2300      	movs	r3, #0
 8005178:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005180:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005182:	e025      	b.n	80051d0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005184:	7dfb      	ldrb	r3, [r7, #23]
 8005186:	221a      	movs	r2, #26
 8005188:	fb02 f303 	mul.w	r3, r2, r3
 800518c:	3308      	adds	r3, #8
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	3302      	adds	r3, #2
 8005194:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	795b      	ldrb	r3, [r3, #5]
 800519a:	78fa      	ldrb	r2, [r7, #3]
 800519c:	429a      	cmp	r2, r3
 800519e:	d002      	beq.n	80051a6 <USBH_FindInterface+0x4e>
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	2bff      	cmp	r3, #255	; 0xff
 80051a4:	d111      	bne.n	80051ca <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80051aa:	78ba      	ldrb	r2, [r7, #2]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d002      	beq.n	80051b6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80051b0:	78bb      	ldrb	r3, [r7, #2]
 80051b2:	2bff      	cmp	r3, #255	; 0xff
 80051b4:	d109      	bne.n	80051ca <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80051ba:	787a      	ldrb	r2, [r7, #1]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d002      	beq.n	80051c6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80051c0:	787b      	ldrb	r3, [r7, #1]
 80051c2:	2bff      	cmp	r3, #255	; 0xff
 80051c4:	d101      	bne.n	80051ca <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80051c6:	7dfb      	ldrb	r3, [r7, #23]
 80051c8:	e006      	b.n	80051d8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80051ca:	7dfb      	ldrb	r3, [r7, #23]
 80051cc:	3301      	adds	r3, #1
 80051ce:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80051d0:	7dfb      	ldrb	r3, [r7, #23]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d9d6      	bls.n	8005184 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80051d6:	23ff      	movs	r3, #255	; 0xff
}
 80051d8:	4618      	mov	r0, r3
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f001 fc75 	bl	8006adc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80051f2:	2101      	movs	r1, #1
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f001 fd8e 	bl	8006d16 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af04      	add	r7, sp, #16
 800520a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800520c:	2302      	movs	r3, #2
 800520e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	d102      	bne.n	8005226 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2203      	movs	r2, #3
 8005224:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b0b      	cmp	r3, #11
 800522e:	f200 81be 	bhi.w	80055ae <USBH_Process+0x3aa>
 8005232:	a201      	add	r2, pc, #4	; (adr r2, 8005238 <USBH_Process+0x34>)
 8005234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005238:	08005269 	.word	0x08005269
 800523c:	0800529b 	.word	0x0800529b
 8005240:	08005303 	.word	0x08005303
 8005244:	08005549 	.word	0x08005549
 8005248:	080055af 	.word	0x080055af
 800524c:	080053a7 	.word	0x080053a7
 8005250:	080054ef 	.word	0x080054ef
 8005254:	080053dd 	.word	0x080053dd
 8005258:	080053fd 	.word	0x080053fd
 800525c:	0800541d 	.word	0x0800541d
 8005260:	08005461 	.word	0x08005461
 8005264:	08005531 	.word	0x08005531
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 819e 	beq.w	80055b2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800527c:	20c8      	movs	r0, #200	; 0xc8
 800527e:	f001 fd91 	bl	8006da4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f001 fc87 	bl	8006b96 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005298:	e18b      	b.n	80055b2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d107      	bne.n	80052b4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80052b2:	e18d      	b.n	80055d0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80052ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052be:	d914      	bls.n	80052ea <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80052c6:	3301      	adds	r3, #1
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d903      	bls.n	80052e2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	220d      	movs	r2, #13
 80052de:	701a      	strb	r2, [r3, #0]
      break;
 80052e0:	e176      	b.n	80055d0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	701a      	strb	r2, [r3, #0]
      break;
 80052e8:	e172      	b.n	80055d0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80052f0:	f103 020a 	add.w	r2, r3, #10
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80052fa:	200a      	movs	r0, #10
 80052fc:	f001 fd52 	bl	8006da4 <USBH_Delay>
      break;
 8005300:	e166      	b.n	80055d0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d005      	beq.n	8005318 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005312:	2104      	movs	r1, #4
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005318:	2064      	movs	r0, #100	; 0x64
 800531a:	f001 fd43 	bl	8006da4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f001 fc12 	bl	8006b48 <USBH_LL_GetSpeed>
 8005324:	4603      	mov	r3, r0
 8005326:	461a      	mov	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2205      	movs	r2, #5
 8005332:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005334:	2100      	movs	r1, #0
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f001 fa2b 	bl	8006792 <USBH_AllocPipe>
 800533c:	4603      	mov	r3, r0
 800533e:	461a      	mov	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005344:	2180      	movs	r1, #128	; 0x80
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f001 fa23 	bl	8006792 <USBH_AllocPipe>
 800534c:	4603      	mov	r3, r0
 800534e:	461a      	mov	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	7919      	ldrb	r1, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005368:	b292      	uxth	r2, r2
 800536a:	9202      	str	r2, [sp, #8]
 800536c:	2200      	movs	r2, #0
 800536e:	9201      	str	r2, [sp, #4]
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	4603      	mov	r3, r0
 8005374:	2280      	movs	r2, #128	; 0x80
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f001 f9dc 	bl	8006734 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	7959      	ldrb	r1, [r3, #5]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005390:	b292      	uxth	r2, r2
 8005392:	9202      	str	r2, [sp, #8]
 8005394:	2200      	movs	r2, #0
 8005396:	9201      	str	r2, [sp, #4]
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	4603      	mov	r3, r0
 800539c:	2200      	movs	r2, #0
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f001 f9c8 	bl	8006734 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80053a4:	e114      	b.n	80055d0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f918 	bl	80055dc <USBH_HandleEnum>
 80053ac:	4603      	mov	r3, r0
 80053ae:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80053b0:	7bbb      	ldrb	r3, [r7, #14]
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f040 80fe 	bne.w	80055b6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d103      	bne.n	80053d4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2208      	movs	r2, #8
 80053d0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80053d2:	e0f0      	b.n	80055b6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2207      	movs	r2, #7
 80053d8:	701a      	strb	r2, [r3, #0]
      break;
 80053da:	e0ec      	b.n	80055b6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 80e9 	beq.w	80055ba <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80053ee:	2101      	movs	r1, #1
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2208      	movs	r2, #8
 80053f8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80053fa:	e0de      	b.n	80055ba <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005402:	b29b      	uxth	r3, r3
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fc2c 	bl	8005c64 <USBH_SetCfg>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	f040 80d5 	bne.w	80055be <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2209      	movs	r2, #9
 8005418:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800541a:	e0d0      	b.n	80055be <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d016      	beq.n	8005458 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800542a:	2101      	movs	r1, #1
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 fc3c 	bl	8005caa <USBH_SetFeature>
 8005432:	4603      	mov	r3, r0
 8005434:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005436:	7bbb      	ldrb	r3, [r7, #14]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d103      	bne.n	8005446 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	220a      	movs	r2, #10
 8005442:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005444:	e0bd      	b.n	80055c2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8005446:	7bbb      	ldrb	r3, [r7, #14]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b03      	cmp	r3, #3
 800544c:	f040 80b9 	bne.w	80055c2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	220a      	movs	r2, #10
 8005454:	701a      	strb	r2, [r3, #0]
      break;
 8005456:	e0b4      	b.n	80055c2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	220a      	movs	r2, #10
 800545c:	701a      	strb	r2, [r3, #0]
      break;
 800545e:	e0b0      	b.n	80055c2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 80ad 	beq.w	80055c6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005474:	2300      	movs	r3, #0
 8005476:	73fb      	strb	r3, [r7, #15]
 8005478:	e016      	b.n	80054a8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800547a:	7bfa      	ldrb	r2, [r7, #15]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	32de      	adds	r2, #222	; 0xde
 8005480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005484:	791a      	ldrb	r2, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800548c:	429a      	cmp	r2, r3
 800548e:	d108      	bne.n	80054a2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005490:	7bfa      	ldrb	r2, [r7, #15]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	32de      	adds	r2, #222	; 0xde
 8005496:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80054a0:	e005      	b.n	80054ae <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
 80054a4:	3301      	adds	r3, #1
 80054a6:	73fb      	strb	r3, [r7, #15]
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0e5      	beq.n	800547a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d016      	beq.n	80054e6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	4798      	blx	r3
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d109      	bne.n	80054de <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2206      	movs	r2, #6
 80054ce:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80054d6:	2103      	movs	r1, #3
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80054dc:	e073      	b.n	80055c6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	220d      	movs	r2, #13
 80054e2:	701a      	strb	r2, [r3, #0]
      break;
 80054e4:	e06f      	b.n	80055c6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	220d      	movs	r2, #13
 80054ea:	701a      	strb	r2, [r3, #0]
      break;
 80054ec:	e06b      	b.n	80055c6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d017      	beq.n	8005528 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	4798      	blx	r3
 8005504:	4603      	mov	r3, r0
 8005506:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005508:	7bbb      	ldrb	r3, [r7, #14]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d103      	bne.n	8005518 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	220b      	movs	r2, #11
 8005514:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005516:	e058      	b.n	80055ca <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8005518:	7bbb      	ldrb	r3, [r7, #14]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d154      	bne.n	80055ca <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	220d      	movs	r2, #13
 8005524:	701a      	strb	r2, [r3, #0]
      break;
 8005526:	e050      	b.n	80055ca <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	220d      	movs	r2, #13
 800552c:	701a      	strb	r2, [r3, #0]
      break;
 800552e:	e04c      	b.n	80055ca <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d049      	beq.n	80055ce <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	4798      	blx	r3
      }
      break;
 8005546:	e042      	b.n	80055ce <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff fd67 	bl	8005024 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d009      	beq.n	8005574 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005584:	2105      	movs	r1, #5
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b01      	cmp	r3, #1
 8005594:	d107      	bne.n	80055a6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff fe20 	bl	80051e4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80055a4:	e014      	b.n	80055d0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f001 fa98 	bl	8006adc <USBH_LL_Start>
      break;
 80055ac:	e010      	b.n	80055d0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80055ae:	bf00      	nop
 80055b0:	e00e      	b.n	80055d0 <USBH_Process+0x3cc>
      break;
 80055b2:	bf00      	nop
 80055b4:	e00c      	b.n	80055d0 <USBH_Process+0x3cc>
      break;
 80055b6:	bf00      	nop
 80055b8:	e00a      	b.n	80055d0 <USBH_Process+0x3cc>
    break;
 80055ba:	bf00      	nop
 80055bc:	e008      	b.n	80055d0 <USBH_Process+0x3cc>
      break;
 80055be:	bf00      	nop
 80055c0:	e006      	b.n	80055d0 <USBH_Process+0x3cc>
      break;
 80055c2:	bf00      	nop
 80055c4:	e004      	b.n	80055d0 <USBH_Process+0x3cc>
      break;
 80055c6:	bf00      	nop
 80055c8:	e002      	b.n	80055d0 <USBH_Process+0x3cc>
      break;
 80055ca:	bf00      	nop
 80055cc:	e000      	b.n	80055d0 <USBH_Process+0x3cc>
      break;
 80055ce:	bf00      	nop
  }
  return USBH_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop

080055dc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af04      	add	r7, sp, #16
 80055e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80055e4:	2301      	movs	r3, #1
 80055e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80055e8:	2301      	movs	r3, #1
 80055ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	2b07      	cmp	r3, #7
 80055f2:	f200 81c1 	bhi.w	8005978 <USBH_HandleEnum+0x39c>
 80055f6:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <USBH_HandleEnum+0x20>)
 80055f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fc:	0800561d 	.word	0x0800561d
 8005600:	080056db 	.word	0x080056db
 8005604:	08005745 	.word	0x08005745
 8005608:	080057d3 	.word	0x080057d3
 800560c:	0800583d 	.word	0x0800583d
 8005610:	080058ad 	.word	0x080058ad
 8005614:	080058f3 	.word	0x080058f3
 8005618:	08005939 	.word	0x08005939
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800561c:	2108      	movs	r1, #8
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa50 	bl	8005ac4 <USBH_Get_DevDesc>
 8005624:	4603      	mov	r3, r0
 8005626:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005628:	7bbb      	ldrb	r3, [r7, #14]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d130      	bne.n	8005690 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	7919      	ldrb	r1, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005652:	b292      	uxth	r2, r2
 8005654:	9202      	str	r2, [sp, #8]
 8005656:	2200      	movs	r2, #0
 8005658:	9201      	str	r2, [sp, #4]
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	4603      	mov	r3, r0
 800565e:	2280      	movs	r2, #128	; 0x80
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f001 f867 	bl	8006734 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	7959      	ldrb	r1, [r3, #5]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800567a:	b292      	uxth	r2, r2
 800567c:	9202      	str	r2, [sp, #8]
 800567e:	2200      	movs	r2, #0
 8005680:	9201      	str	r2, [sp, #4]
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	4603      	mov	r3, r0
 8005686:	2200      	movs	r2, #0
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f001 f853 	bl	8006734 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800568e:	e175      	b.n	800597c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005690:	7bbb      	ldrb	r3, [r7, #14]
 8005692:	2b03      	cmp	r3, #3
 8005694:	f040 8172 	bne.w	800597c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800569e:	3301      	adds	r3, #1
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d903      	bls.n	80056ba <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	220d      	movs	r2, #13
 80056b6:	701a      	strb	r2, [r3, #0]
      break;
 80056b8:	e160      	b.n	800597c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	795b      	ldrb	r3, [r3, #5]
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f001 f887 	bl	80067d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	791b      	ldrb	r3, [r3, #4]
 80056ca:	4619      	mov	r1, r3
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f001 f881 	bl	80067d4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	701a      	strb	r2, [r3, #0]
      break;
 80056d8:	e150      	b.n	800597c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80056da:	2112      	movs	r1, #18
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f9f1 	bl	8005ac4 <USBH_Get_DevDesc>
 80056e2:	4603      	mov	r3, r0
 80056e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80056e6:	7bbb      	ldrb	r3, [r7, #14]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d103      	bne.n	80056f4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80056f2:	e145      	b.n	8005980 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80056f4:	7bbb      	ldrb	r3, [r7, #14]
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	f040 8142 	bne.w	8005980 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005702:	3301      	adds	r3, #1
 8005704:	b2da      	uxtb	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005712:	2b03      	cmp	r3, #3
 8005714:	d903      	bls.n	800571e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	220d      	movs	r2, #13
 800571a:	701a      	strb	r2, [r3, #0]
      break;
 800571c:	e130      	b.n	8005980 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	795b      	ldrb	r3, [r3, #5]
 8005722:	4619      	mov	r1, r3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f001 f855 	bl	80067d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	791b      	ldrb	r3, [r3, #4]
 800572e:	4619      	mov	r1, r3
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f001 f84f 	bl	80067d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	701a      	strb	r2, [r3, #0]
      break;
 8005742:	e11d      	b.n	8005980 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005744:	2101      	movs	r1, #1
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fa68 	bl	8005c1c <USBH_SetAddress>
 800574c:	4603      	mov	r3, r0
 800574e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005750:	7bbb      	ldrb	r3, [r7, #14]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d132      	bne.n	80057bc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8005756:	2002      	movs	r0, #2
 8005758:	f001 fb24 	bl	8006da4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2203      	movs	r2, #3
 8005768:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	7919      	ldrb	r1, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800577e:	b292      	uxth	r2, r2
 8005780:	9202      	str	r2, [sp, #8]
 8005782:	2200      	movs	r2, #0
 8005784:	9201      	str	r2, [sp, #4]
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	4603      	mov	r3, r0
 800578a:	2280      	movs	r2, #128	; 0x80
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 ffd1 	bl	8006734 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	7959      	ldrb	r1, [r3, #5]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80057a6:	b292      	uxth	r2, r2
 80057a8:	9202      	str	r2, [sp, #8]
 80057aa:	2200      	movs	r2, #0
 80057ac:	9201      	str	r2, [sp, #4]
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	4603      	mov	r3, r0
 80057b2:	2200      	movs	r2, #0
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 ffbd 	bl	8006734 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80057ba:	e0e3      	b.n	8005984 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80057bc:	7bbb      	ldrb	r3, [r7, #14]
 80057be:	2b03      	cmp	r3, #3
 80057c0:	f040 80e0 	bne.w	8005984 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	220d      	movs	r2, #13
 80057c8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	705a      	strb	r2, [r3, #1]
      break;
 80057d0:	e0d8      	b.n	8005984 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80057d2:	2109      	movs	r1, #9
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f99d 	bl	8005b14 <USBH_Get_CfgDesc>
 80057da:	4603      	mov	r3, r0
 80057dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80057de:	7bbb      	ldrb	r3, [r7, #14]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d103      	bne.n	80057ec <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2204      	movs	r2, #4
 80057e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80057ea:	e0cd      	b.n	8005988 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80057ec:	7bbb      	ldrb	r3, [r7, #14]
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	f040 80ca 	bne.w	8005988 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80057fa:	3301      	adds	r3, #1
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800580a:	2b03      	cmp	r3, #3
 800580c:	d903      	bls.n	8005816 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	220d      	movs	r2, #13
 8005812:	701a      	strb	r2, [r3, #0]
      break;
 8005814:	e0b8      	b.n	8005988 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	795b      	ldrb	r3, [r3, #5]
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 ffd9 	bl	80067d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	791b      	ldrb	r3, [r3, #4]
 8005826:	4619      	mov	r1, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 ffd3 	bl	80067d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	701a      	strb	r2, [r3, #0]
      break;
 800583a:	e0a5      	b.n	8005988 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8005842:	4619      	mov	r1, r3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f965 	bl	8005b14 <USBH_Get_CfgDesc>
 800584a:	4603      	mov	r3, r0
 800584c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800584e:	7bbb      	ldrb	r3, [r7, #14]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d103      	bne.n	800585c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2205      	movs	r2, #5
 8005858:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800585a:	e097      	b.n	800598c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800585c:	7bbb      	ldrb	r3, [r7, #14]
 800585e:	2b03      	cmp	r3, #3
 8005860:	f040 8094 	bne.w	800598c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800586a:	3301      	adds	r3, #1
 800586c:	b2da      	uxtb	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800587a:	2b03      	cmp	r3, #3
 800587c:	d903      	bls.n	8005886 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	220d      	movs	r2, #13
 8005882:	701a      	strb	r2, [r3, #0]
      break;
 8005884:	e082      	b.n	800598c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	795b      	ldrb	r3, [r3, #5]
 800588a:	4619      	mov	r1, r3
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 ffa1 	bl	80067d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	791b      	ldrb	r3, [r3, #4]
 8005896:	4619      	mov	r1, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 ff9b 	bl	80067d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	701a      	strb	r2, [r3, #0]
      break;
 80058aa:	e06f      	b.n	800598c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d019      	beq.n	80058ea <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80058c2:	23ff      	movs	r3, #255	; 0xff
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f949 	bl	8005b5c <USBH_Get_StringDesc>
 80058ca:	4603      	mov	r3, r0
 80058cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80058ce:	7bbb      	ldrb	r3, [r7, #14]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d103      	bne.n	80058dc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2206      	movs	r2, #6
 80058d8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80058da:	e059      	b.n	8005990 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80058dc:	7bbb      	ldrb	r3, [r7, #14]
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d156      	bne.n	8005990 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2206      	movs	r2, #6
 80058e6:	705a      	strb	r2, [r3, #1]
      break;
 80058e8:	e052      	b.n	8005990 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2206      	movs	r2, #6
 80058ee:	705a      	strb	r2, [r3, #1]
      break;
 80058f0:	e04e      	b.n	8005990 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d019      	beq.n	8005930 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005908:	23ff      	movs	r3, #255	; 0xff
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f926 	bl	8005b5c <USBH_Get_StringDesc>
 8005910:	4603      	mov	r3, r0
 8005912:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005914:	7bbb      	ldrb	r3, [r7, #14]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d103      	bne.n	8005922 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2207      	movs	r2, #7
 800591e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005920:	e038      	b.n	8005994 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005922:	7bbb      	ldrb	r3, [r7, #14]
 8005924:	2b03      	cmp	r3, #3
 8005926:	d135      	bne.n	8005994 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2207      	movs	r2, #7
 800592c:	705a      	strb	r2, [r3, #1]
      break;
 800592e:	e031      	b.n	8005994 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2207      	movs	r2, #7
 8005934:	705a      	strb	r2, [r3, #1]
      break;
 8005936:	e02d      	b.n	8005994 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800593e:	2b00      	cmp	r3, #0
 8005940:	d017      	beq.n	8005972 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800594e:	23ff      	movs	r3, #255	; 0xff
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f903 	bl	8005b5c <USBH_Get_StringDesc>
 8005956:	4603      	mov	r3, r0
 8005958:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800595a:	7bbb      	ldrb	r3, [r7, #14]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d102      	bne.n	8005966 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8005964:	e018      	b.n	8005998 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005966:	7bbb      	ldrb	r3, [r7, #14]
 8005968:	2b03      	cmp	r3, #3
 800596a:	d115      	bne.n	8005998 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	73fb      	strb	r3, [r7, #15]
      break;
 8005970:	e012      	b.n	8005998 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]
      break;
 8005976:	e00f      	b.n	8005998 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8005978:	bf00      	nop
 800597a:	e00e      	b.n	800599a <USBH_HandleEnum+0x3be>
      break;
 800597c:	bf00      	nop
 800597e:	e00c      	b.n	800599a <USBH_HandleEnum+0x3be>
      break;
 8005980:	bf00      	nop
 8005982:	e00a      	b.n	800599a <USBH_HandleEnum+0x3be>
      break;
 8005984:	bf00      	nop
 8005986:	e008      	b.n	800599a <USBH_HandleEnum+0x3be>
      break;
 8005988:	bf00      	nop
 800598a:	e006      	b.n	800599a <USBH_HandleEnum+0x3be>
      break;
 800598c:	bf00      	nop
 800598e:	e004      	b.n	800599a <USBH_HandleEnum+0x3be>
      break;
 8005990:	bf00      	nop
 8005992:	e002      	b.n	800599a <USBH_HandleEnum+0x3be>
      break;
 8005994:	bf00      	nop
 8005996:	e000      	b.n	800599a <USBH_HandleEnum+0x3be>
      break;
 8005998:	bf00      	nop
  }
  return Status;
 800599a:	7bfb      	ldrb	r3, [r7, #15]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b082      	sub	sp, #8
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f804 	bl	80059e6 <USBH_HandleSof>
}
 80059de:	bf00      	nop
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b082      	sub	sp, #8
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b0b      	cmp	r3, #11
 80059f6:	d10a      	bne.n	8005a0e <USBH_HandleSof+0x28>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	4798      	blx	r3
  }
}
 8005a0e:	bf00      	nop
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8005a26:	bf00      	nop
}
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005a42:	bf00      	nop
}
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f001 f838 	bl	8006b12 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	791b      	ldrb	r3, [r3, #4]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fe93 	bl	80067d4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	795b      	ldrb	r3, [r3, #5]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fe8d 	bl	80067d4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8005ad6:	78fb      	ldrb	r3, [r7, #3]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	4613      	mov	r3, r2
 8005ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f864 	bl	8005bb2 <USBH_GetDescriptor>
 8005aea:	4603      	mov	r3, r0
 8005aec:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10a      	bne.n	8005b0a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005b00:	78fa      	ldrb	r2, [r7, #3]
 8005b02:	b292      	uxth	r2, r2
 8005b04:	4619      	mov	r1, r3
 8005b06:	f000 f919 	bl	8005d3c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	331c      	adds	r3, #28
 8005b24:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8005b26:	887b      	ldrh	r3, [r7, #2]
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b30:	2100      	movs	r1, #0
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f83d 	bl	8005bb2 <USBH_GetDescriptor>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d107      	bne.n	8005b52 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8005b42:	887b      	ldrh	r3, [r7, #2]
 8005b44:	461a      	mov	r2, r3
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f989 	bl	8005e60 <USBH_ParseCfgDesc>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b088      	sub	sp, #32
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	607a      	str	r2, [r7, #4]
 8005b66:	461a      	mov	r2, r3
 8005b68:	460b      	mov	r3, r1
 8005b6a:	72fb      	strb	r3, [r7, #11]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8005b70:	7afb      	ldrb	r3, [r7, #11]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005b78:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8005b80:	893b      	ldrh	r3, [r7, #8]
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	460b      	mov	r3, r1
 8005b86:	2100      	movs	r1, #0
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 f812 	bl	8005bb2 <USBH_GetDescriptor>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8005b92:	7dfb      	ldrb	r3, [r7, #23]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d107      	bne.n	8005ba8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005b9e:	893a      	ldrh	r2, [r7, #8]
 8005ba0:	6879      	ldr	r1, [r7, #4]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fb26 	bl	80061f4 <USBH_ParseStringDesc>
  }

  return status;
 8005ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b084      	sub	sp, #16
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	607b      	str	r3, [r7, #4]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	72fb      	strb	r3, [r7, #11]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	789b      	ldrb	r3, [r3, #2]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d11c      	bne.n	8005c06 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8005bcc:	7afb      	ldrb	r3, [r7, #11]
 8005bce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2206      	movs	r2, #6
 8005bdc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	893a      	ldrh	r2, [r7, #8]
 8005be2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8005be4:	893b      	ldrh	r3, [r7, #8]
 8005be6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005bea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bee:	d104      	bne.n	8005bfa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f240 4209 	movw	r2, #1033	; 0x409
 8005bf6:	829a      	strh	r2, [r3, #20]
 8005bf8:	e002      	b.n	8005c00 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8b3a      	ldrh	r2, [r7, #24]
 8005c04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8005c06:	8b3b      	ldrh	r3, [r7, #24]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 fb3f 	bl	8006290 <USBH_CtlReq>
 8005c12:	4603      	mov	r3, r0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	460b      	mov	r3, r1
 8005c26:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	789b      	ldrb	r3, [r3, #2]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d10f      	bne.n	8005c50 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2205      	movs	r2, #5
 8005c3a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8005c3c:	78fb      	ldrb	r3, [r7, #3]
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8005c50:	2200      	movs	r2, #0
 8005c52:	2100      	movs	r1, #0
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fb1b 	bl	8006290 <USBH_CtlReq>
 8005c5a:	4603      	mov	r3, r0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	789b      	ldrb	r3, [r3, #2]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d10e      	bne.n	8005c96 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2209      	movs	r2, #9
 8005c82:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	887a      	ldrh	r2, [r7, #2]
 8005c88:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8005c96:	2200      	movs	r2, #0
 8005c98:	2100      	movs	r1, #0
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 faf8 	bl	8006290 <USBH_CtlReq>
 8005ca0:	4603      	mov	r3, r0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b082      	sub	sp, #8
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	789b      	ldrb	r3, [r3, #2]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d10f      	bne.n	8005cde <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2203      	movs	r2, #3
 8005cc8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8005cca:	78fb      	ldrb	r3, [r7, #3]
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fad4 	bl	8006290 <USBH_CtlReq>
 8005ce8:	4603      	mov	r3, r0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	789b      	ldrb	r3, [r3, #2]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d10f      	bne.n	8005d26 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2202      	movs	r2, #2
 8005d0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8005d26:	2200      	movs	r2, #0
 8005d28:	2100      	movs	r1, #0
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fab0 	bl	8006290 <USBH_CtlReq>
 8005d30:	4603      	mov	r3, r0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	4613      	mov	r3, r2
 8005d48:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	781a      	ldrb	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	785a      	ldrb	r2, [r3, #1]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	3302      	adds	r3, #2
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	3303      	adds	r3, #3
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	021b      	lsls	r3, r3, #8
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	791a      	ldrb	r2, [r3, #4]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	795a      	ldrb	r2, [r3, #5]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	799a      	ldrb	r2, [r3, #6]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	79da      	ldrb	r2, [r3, #7]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	79db      	ldrb	r3, [r3, #7]
 8005d9a:	2b20      	cmp	r3, #32
 8005d9c:	dc0f      	bgt.n	8005dbe <USBH_ParseDevDesc+0x82>
 8005d9e:	2b08      	cmp	r3, #8
 8005da0:	db14      	blt.n	8005dcc <USBH_ParseDevDesc+0x90>
 8005da2:	3b08      	subs	r3, #8
 8005da4:	4a2d      	ldr	r2, [pc, #180]	; (8005e5c <USBH_ParseDevDesc+0x120>)
 8005da6:	fa22 f303 	lsr.w	r3, r2, r3
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	bf14      	ite	ne
 8005db2:	2301      	movne	r3, #1
 8005db4:	2300      	moveq	r3, #0
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d102      	bne.n	8005dc2 <USBH_ParseDevDesc+0x86>
 8005dbc:	e006      	b.n	8005dcc <USBH_ParseDevDesc+0x90>
 8005dbe:	2b40      	cmp	r3, #64	; 0x40
 8005dc0:	d104      	bne.n	8005dcc <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	79da      	ldrb	r2, [r3, #7]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	71da      	strb	r2, [r3, #7]
      break;
 8005dca:	e003      	b.n	8005dd4 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2240      	movs	r2, #64	; 0x40
 8005dd0:	71da      	strb	r2, [r3, #7]
      break;
 8005dd2:	bf00      	nop
  }

  if (length > 8U)
 8005dd4:	88fb      	ldrh	r3, [r7, #6]
 8005dd6:	2b08      	cmp	r3, #8
 8005dd8:	d939      	bls.n	8005e4e <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	3308      	adds	r3, #8
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	3309      	adds	r3, #9
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	021b      	lsls	r3, r3, #8
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	4313      	orrs	r3, r2
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	330a      	adds	r3, #10
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	330b      	adds	r3, #11
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	330c      	adds	r3, #12
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	330d      	adds	r3, #13
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	021b      	lsls	r3, r3, #8
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	4313      	orrs	r3, r2
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	7b9a      	ldrb	r2, [r3, #14]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	7bda      	ldrb	r2, [r3, #15]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	7c1a      	ldrb	r2, [r3, #16]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	7c5a      	ldrb	r2, [r3, #17]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	745a      	strb	r2, [r3, #17]
  }
}
 8005e4e:	bf00      	nop
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	01000101 	.word	0x01000101

08005e60 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08c      	sub	sp, #48	; 0x30
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005e74:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	781a      	ldrb	r2, [r3, #0]
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	785a      	ldrb	r2, [r3, #1]
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	3302      	adds	r3, #2
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	3303      	adds	r3, #3
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	021b      	lsls	r3, r3, #8
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ebc:	bf28      	it	cs
 8005ebe:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	791a      	ldrb	r2, [r3, #4]
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	795a      	ldrb	r2, [r3, #5]
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	799a      	ldrb	r2, [r3, #6]
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	79da      	ldrb	r2, [r3, #7]
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	7a1a      	ldrb	r2, [r3, #8]
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b09      	cmp	r3, #9
 8005ef6:	d002      	beq.n	8005efe <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	2209      	movs	r2, #9
 8005efc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8005efe:	88fb      	ldrh	r3, [r7, #6]
 8005f00:	2b09      	cmp	r3, #9
 8005f02:	f240 809d 	bls.w	8006040 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8005f06:	2309      	movs	r3, #9
 8005f08:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005f0e:	e081      	b.n	8006014 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8005f10:	f107 0316 	add.w	r3, r7, #22
 8005f14:	4619      	mov	r1, r3
 8005f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f18:	f000 f99f 	bl	800625a <USBH_GetNextDesc>
 8005f1c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8005f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d176      	bne.n	8006014 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b09      	cmp	r3, #9
 8005f2c:	d002      	beq.n	8005f34 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	2209      	movs	r2, #9
 8005f32:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8005f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f38:	221a      	movs	r2, #26
 8005f3a:	fb02 f303 	mul.w	r3, r2, r3
 8005f3e:	3308      	adds	r3, #8
 8005f40:	6a3a      	ldr	r2, [r7, #32]
 8005f42:	4413      	add	r3, r2
 8005f44:	3302      	adds	r3, #2
 8005f46:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8005f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f4a:	69f8      	ldr	r0, [r7, #28]
 8005f4c:	f000 f87e 	bl	800604c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8005f56:	2300      	movs	r3, #0
 8005f58:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005f5a:	e043      	b.n	8005fe4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8005f5c:	f107 0316 	add.w	r3, r7, #22
 8005f60:	4619      	mov	r1, r3
 8005f62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f64:	f000 f979 	bl	800625a <USBH_GetNextDesc>
 8005f68:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	2b05      	cmp	r3, #5
 8005f70:	d138      	bne.n	8005fe4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	795b      	ldrb	r3, [r3, #5]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d10f      	bne.n	8005f9a <USBH_ParseCfgDesc+0x13a>
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	799b      	ldrb	r3, [r3, #6]
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d10b      	bne.n	8005f9a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	79db      	ldrb	r3, [r3, #7]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10f      	bne.n	8005faa <USBH_ParseCfgDesc+0x14a>
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b09      	cmp	r3, #9
 8005f90:	d00b      	beq.n	8005faa <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	2209      	movs	r2, #9
 8005f96:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8005f98:	e007      	b.n	8005faa <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b07      	cmp	r3, #7
 8005fa0:	d004      	beq.n	8005fac <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8005fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa4:	2207      	movs	r2, #7
 8005fa6:	701a      	strb	r2, [r3, #0]
 8005fa8:	e000      	b.n	8005fac <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8005faa:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8005fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fb0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005fb4:	3201      	adds	r2, #1
 8005fb6:	00d2      	lsls	r2, r2, #3
 8005fb8:	211a      	movs	r1, #26
 8005fba:	fb01 f303 	mul.w	r3, r1, r3
 8005fbe:	4413      	add	r3, r2
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	6a3a      	ldr	r2, [r7, #32]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8005fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fcc:	69b9      	ldr	r1, [r7, #24]
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 f86b 	bl	80060aa <USBH_ParseEPDesc>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8005fda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005fde:	3301      	adds	r3, #1
 8005fe0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	791b      	ldrb	r3, [r3, #4]
 8005fe8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d204      	bcs.n	8005ffa <USBH_ParseCfgDesc+0x19a>
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	885a      	ldrh	r2, [r3, #2]
 8005ff4:	8afb      	ldrh	r3, [r7, #22]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d8b0      	bhi.n	8005f5c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	791b      	ldrb	r3, [r3, #4]
 8005ffe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006002:	429a      	cmp	r2, r3
 8006004:	d201      	bcs.n	800600a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006006:	2303      	movs	r3, #3
 8006008:	e01c      	b.n	8006044 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800600a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800600e:	3301      	adds	r3, #1
 8006010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006018:	2b01      	cmp	r3, #1
 800601a:	d805      	bhi.n	8006028 <USBH_ParseCfgDesc+0x1c8>
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	885a      	ldrh	r2, [r3, #2]
 8006020:	8afb      	ldrh	r3, [r7, #22]
 8006022:	429a      	cmp	r2, r3
 8006024:	f63f af74 	bhi.w	8005f10 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	791b      	ldrb	r3, [r3, #4]
 800602c:	2b02      	cmp	r3, #2
 800602e:	bf28      	it	cs
 8006030:	2302      	movcs	r3, #2
 8006032:	b2db      	uxtb	r3, r3
 8006034:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006038:	429a      	cmp	r2, r3
 800603a:	d201      	bcs.n	8006040 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800603c:	2303      	movs	r3, #3
 800603e:	e001      	b.n	8006044 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006040:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006044:	4618      	mov	r0, r3
 8006046:	3730      	adds	r7, #48	; 0x30
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	781a      	ldrb	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	785a      	ldrb	r2, [r3, #1]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	789a      	ldrb	r2, [r3, #2]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	78da      	ldrb	r2, [r3, #3]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	791a      	ldrb	r2, [r3, #4]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	795a      	ldrb	r2, [r3, #5]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	799a      	ldrb	r2, [r3, #6]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	79da      	ldrb	r2, [r3, #7]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	7a1a      	ldrb	r2, [r3, #8]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	721a      	strb	r2, [r3, #8]
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b087      	sub	sp, #28
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	781a      	ldrb	r2, [r3, #0]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	785a      	ldrb	r2, [r3, #1]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	789a      	ldrb	r2, [r3, #2]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	78da      	ldrb	r2, [r3, #3]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	3304      	adds	r3, #4
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	3305      	adds	r3, #5
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	021b      	lsls	r3, r3, #8
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	4313      	orrs	r3, r2
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	799a      	ldrb	r2, [r3, #6]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	889b      	ldrh	r3, [r3, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d102      	bne.n	800610c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006106:	2303      	movs	r3, #3
 8006108:	75fb      	strb	r3, [r7, #23]
 800610a:	e033      	b.n	8006174 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	889b      	ldrh	r3, [r3, #4]
 8006110:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006114:	f023 0307 	bic.w	r3, r3, #7
 8006118:	b29a      	uxth	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	889b      	ldrh	r3, [r3, #4]
 8006122:	b21a      	sxth	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3304      	adds	r3, #4
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	b299      	uxth	r1, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3305      	adds	r3, #5
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	b29b      	uxth	r3, r3
 8006134:	021b      	lsls	r3, r3, #8
 8006136:	b29b      	uxth	r3, r3
 8006138:	430b      	orrs	r3, r1
 800613a:	b29b      	uxth	r3, r3
 800613c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006140:	2b00      	cmp	r3, #0
 8006142:	d110      	bne.n	8006166 <USBH_ParseEPDesc+0xbc>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3304      	adds	r3, #4
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	b299      	uxth	r1, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3305      	adds	r3, #5
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	b29b      	uxth	r3, r3
 8006154:	021b      	lsls	r3, r3, #8
 8006156:	b29b      	uxth	r3, r3
 8006158:	430b      	orrs	r3, r1
 800615a:	b29b      	uxth	r3, r3
 800615c:	b21b      	sxth	r3, r3
 800615e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006162:	b21b      	sxth	r3, r3
 8006164:	e001      	b.n	800616a <USBH_ParseEPDesc+0xc0>
 8006166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800616a:	4313      	orrs	r3, r2
 800616c:	b21b      	sxth	r3, r3
 800616e:	b29a      	uxth	r2, r3
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800617a:	2b00      	cmp	r3, #0
 800617c:	d116      	bne.n	80061ac <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	78db      	ldrb	r3, [r3, #3]
 8006182:	f003 0303 	and.w	r3, r3, #3
 8006186:	2b01      	cmp	r3, #1
 8006188:	d005      	beq.n	8006196 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	78db      	ldrb	r3, [r3, #3]
 800618e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006192:	2b03      	cmp	r3, #3
 8006194:	d127      	bne.n	80061e6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	799b      	ldrb	r3, [r3, #6]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <USBH_ParseEPDesc+0xfc>
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	799b      	ldrb	r3, [r3, #6]
 80061a2:	2b10      	cmp	r3, #16
 80061a4:	d91f      	bls.n	80061e6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80061a6:	2303      	movs	r3, #3
 80061a8:	75fb      	strb	r3, [r7, #23]
 80061aa:	e01c      	b.n	80061e6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	78db      	ldrb	r3, [r3, #3]
 80061b0:	f003 0303 	and.w	r3, r3, #3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d10a      	bne.n	80061ce <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	799b      	ldrb	r3, [r3, #6]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <USBH_ParseEPDesc+0x11e>
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	799b      	ldrb	r3, [r3, #6]
 80061c4:	2b10      	cmp	r3, #16
 80061c6:	d90e      	bls.n	80061e6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80061c8:	2303      	movs	r3, #3
 80061ca:	75fb      	strb	r3, [r7, #23]
 80061cc:	e00b      	b.n	80061e6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	78db      	ldrb	r3, [r3, #3]
 80061d2:	f003 0303 	and.w	r3, r3, #3
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d105      	bne.n	80061e6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	799b      	ldrb	r3, [r3, #6]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80061e2:	2303      	movs	r3, #3
 80061e4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	371c      	adds	r7, #28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	4613      	mov	r3, r2
 8006200:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3301      	adds	r3, #1
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2b03      	cmp	r3, #3
 800620a:	d120      	bne.n	800624e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	1e9a      	subs	r2, r3, #2
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	4293      	cmp	r3, r2
 8006216:	bf28      	it	cs
 8006218:	4613      	movcs	r3, r2
 800621a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3302      	adds	r3, #2
 8006220:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006222:	2300      	movs	r3, #0
 8006224:	82fb      	strh	r3, [r7, #22]
 8006226:	e00b      	b.n	8006240 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006228:	8afb      	ldrh	r3, [r7, #22]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4413      	add	r3, r2
 800622e:	781a      	ldrb	r2, [r3, #0]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	3301      	adds	r3, #1
 8006238:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800623a:	8afb      	ldrh	r3, [r7, #22]
 800623c:	3302      	adds	r3, #2
 800623e:	82fb      	strh	r3, [r7, #22]
 8006240:	8afa      	ldrh	r2, [r7, #22]
 8006242:	8abb      	ldrh	r3, [r7, #20]
 8006244:	429a      	cmp	r2, r3
 8006246:	d3ef      	bcc.n	8006228 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2200      	movs	r2, #0
 800624c:	701a      	strb	r2, [r3, #0]
  }
}
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800625a:	b480      	push	{r7}
 800625c:	b085      	sub	sp, #20
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	881a      	ldrh	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	b29b      	uxth	r3, r3
 800626e:	4413      	add	r3, r2
 8006270:	b29a      	uxth	r2, r3
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4413      	add	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006282:	68fb      	ldr	r3, [r7, #12]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	4613      	mov	r3, r2
 800629c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800629e:	2301      	movs	r3, #1
 80062a0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	789b      	ldrb	r3, [r3, #2]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d002      	beq.n	80062b0 <USBH_CtlReq+0x20>
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d00f      	beq.n	80062ce <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80062ae:	e027      	b.n	8006300 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	88fa      	ldrh	r2, [r7, #6]
 80062ba:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2202      	movs	r2, #2
 80062c6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80062c8:	2301      	movs	r3, #1
 80062ca:	75fb      	strb	r3, [r7, #23]
      break;
 80062cc:	e018      	b.n	8006300 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 f81c 	bl	800630c <USBH_HandleControl>
 80062d4:	4603      	mov	r3, r0
 80062d6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <USBH_CtlReq+0x54>
 80062de:	7dfb      	ldrb	r3, [r7, #23]
 80062e0:	2b03      	cmp	r3, #3
 80062e2:	d106      	bne.n	80062f2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2201      	movs	r2, #1
 80062e8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	761a      	strb	r2, [r3, #24]
      break;
 80062f0:	e005      	b.n	80062fe <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d102      	bne.n	80062fe <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	709a      	strb	r2, [r3, #2]
      break;
 80062fe:	bf00      	nop
  }
  return status;
 8006300:	7dfb      	ldrb	r3, [r7, #23]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af02      	add	r7, sp, #8
 8006312:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006314:	2301      	movs	r3, #1
 8006316:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006318:	2300      	movs	r3, #0
 800631a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	7e1b      	ldrb	r3, [r3, #24]
 8006320:	3b01      	subs	r3, #1
 8006322:	2b0a      	cmp	r3, #10
 8006324:	f200 8156 	bhi.w	80065d4 <USBH_HandleControl+0x2c8>
 8006328:	a201      	add	r2, pc, #4	; (adr r2, 8006330 <USBH_HandleControl+0x24>)
 800632a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632e:	bf00      	nop
 8006330:	0800635d 	.word	0x0800635d
 8006334:	08006377 	.word	0x08006377
 8006338:	080063e1 	.word	0x080063e1
 800633c:	08006407 	.word	0x08006407
 8006340:	0800643f 	.word	0x0800643f
 8006344:	08006469 	.word	0x08006469
 8006348:	080064bb 	.word	0x080064bb
 800634c:	080064dd 	.word	0x080064dd
 8006350:	08006519 	.word	0x08006519
 8006354:	0800653f 	.word	0x0800653f
 8006358:	0800657d 	.word	0x0800657d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f103 0110 	add.w	r1, r3, #16
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	795b      	ldrb	r3, [r3, #5]
 8006366:	461a      	mov	r2, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f943 	bl	80065f4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2202      	movs	r2, #2
 8006372:	761a      	strb	r2, [r3, #24]
      break;
 8006374:	e139      	b.n	80065ea <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	795b      	ldrb	r3, [r3, #5]
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fcb7 	bl	8006cf0 <USBH_LL_GetURBState>
 8006382:	4603      	mov	r3, r0
 8006384:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006386:	7bbb      	ldrb	r3, [r7, #14]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d11e      	bne.n	80063ca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	7c1b      	ldrb	r3, [r3, #16]
 8006390:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006394:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	8adb      	ldrh	r3, [r3, #22]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800639e:	7b7b      	ldrb	r3, [r7, #13]
 80063a0:	2b80      	cmp	r3, #128	; 0x80
 80063a2:	d103      	bne.n	80063ac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2203      	movs	r2, #3
 80063a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80063aa:	e115      	b.n	80065d8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2205      	movs	r2, #5
 80063b0:	761a      	strb	r2, [r3, #24]
      break;
 80063b2:	e111      	b.n	80065d8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80063b4:	7b7b      	ldrb	r3, [r7, #13]
 80063b6:	2b80      	cmp	r3, #128	; 0x80
 80063b8:	d103      	bne.n	80063c2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2209      	movs	r2, #9
 80063be:	761a      	strb	r2, [r3, #24]
      break;
 80063c0:	e10a      	b.n	80065d8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2207      	movs	r2, #7
 80063c6:	761a      	strb	r2, [r3, #24]
      break;
 80063c8:	e106      	b.n	80065d8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80063ca:	7bbb      	ldrb	r3, [r7, #14]
 80063cc:	2b04      	cmp	r3, #4
 80063ce:	d003      	beq.n	80063d8 <USBH_HandleControl+0xcc>
 80063d0:	7bbb      	ldrb	r3, [r7, #14]
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	f040 8100 	bne.w	80065d8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	220b      	movs	r2, #11
 80063dc:	761a      	strb	r2, [r3, #24]
      break;
 80063de:	e0fb      	b.n	80065d8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6899      	ldr	r1, [r3, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	899a      	ldrh	r2, [r3, #12]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	791b      	ldrb	r3, [r3, #4]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f93a 	bl	8006672 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2204      	movs	r2, #4
 8006402:	761a      	strb	r2, [r3, #24]
      break;
 8006404:	e0f1      	b.n	80065ea <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	791b      	ldrb	r3, [r3, #4]
 800640a:	4619      	mov	r1, r3
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fc6f 	bl	8006cf0 <USBH_LL_GetURBState>
 8006412:	4603      	mov	r3, r0
 8006414:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006416:	7bbb      	ldrb	r3, [r7, #14]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d102      	bne.n	8006422 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2209      	movs	r2, #9
 8006420:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	2b05      	cmp	r3, #5
 8006426:	d102      	bne.n	800642e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006428:	2303      	movs	r3, #3
 800642a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800642c:	e0d6      	b.n	80065dc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800642e:	7bbb      	ldrb	r3, [r7, #14]
 8006430:	2b04      	cmp	r3, #4
 8006432:	f040 80d3 	bne.w	80065dc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	220b      	movs	r2, #11
 800643a:	761a      	strb	r2, [r3, #24]
      break;
 800643c:	e0ce      	b.n	80065dc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6899      	ldr	r1, [r3, #8]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	899a      	ldrh	r2, [r3, #12]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	795b      	ldrb	r3, [r3, #5]
 800644a:	2001      	movs	r0, #1
 800644c:	9000      	str	r0, [sp, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f8ea 	bl	8006628 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800645a:	b29a      	uxth	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2206      	movs	r2, #6
 8006464:	761a      	strb	r2, [r3, #24]
      break;
 8006466:	e0c0      	b.n	80065ea <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	795b      	ldrb	r3, [r3, #5]
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fc3e 	bl	8006cf0 <USBH_LL_GetURBState>
 8006474:	4603      	mov	r3, r0
 8006476:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d103      	bne.n	8006486 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2207      	movs	r2, #7
 8006482:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006484:	e0ac      	b.n	80065e0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006486:	7bbb      	ldrb	r3, [r7, #14]
 8006488:	2b05      	cmp	r3, #5
 800648a:	d105      	bne.n	8006498 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	220c      	movs	r2, #12
 8006490:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006492:	2303      	movs	r3, #3
 8006494:	73fb      	strb	r3, [r7, #15]
      break;
 8006496:	e0a3      	b.n	80065e0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006498:	7bbb      	ldrb	r3, [r7, #14]
 800649a:	2b02      	cmp	r3, #2
 800649c:	d103      	bne.n	80064a6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2205      	movs	r2, #5
 80064a2:	761a      	strb	r2, [r3, #24]
      break;
 80064a4:	e09c      	b.n	80065e0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80064a6:	7bbb      	ldrb	r3, [r7, #14]
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	f040 8099 	bne.w	80065e0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	220b      	movs	r2, #11
 80064b2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80064b4:	2302      	movs	r3, #2
 80064b6:	73fb      	strb	r3, [r7, #15]
      break;
 80064b8:	e092      	b.n	80065e0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	791b      	ldrb	r3, [r3, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	2100      	movs	r1, #0
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f8d5 	bl	8006672 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2208      	movs	r2, #8
 80064d8:	761a      	strb	r2, [r3, #24]

      break;
 80064da:	e086      	b.n	80065ea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	791b      	ldrb	r3, [r3, #4]
 80064e0:	4619      	mov	r1, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fc04 	bl	8006cf0 <USBH_LL_GetURBState>
 80064e8:	4603      	mov	r3, r0
 80064ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80064ec:	7bbb      	ldrb	r3, [r7, #14]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d105      	bne.n	80064fe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	220d      	movs	r2, #13
 80064f6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80064f8:	2300      	movs	r3, #0
 80064fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80064fc:	e072      	b.n	80065e4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80064fe:	7bbb      	ldrb	r3, [r7, #14]
 8006500:	2b04      	cmp	r3, #4
 8006502:	d103      	bne.n	800650c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	220b      	movs	r2, #11
 8006508:	761a      	strb	r2, [r3, #24]
      break;
 800650a:	e06b      	b.n	80065e4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800650c:	7bbb      	ldrb	r3, [r7, #14]
 800650e:	2b05      	cmp	r3, #5
 8006510:	d168      	bne.n	80065e4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006512:	2303      	movs	r3, #3
 8006514:	73fb      	strb	r3, [r7, #15]
      break;
 8006516:	e065      	b.n	80065e4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	795b      	ldrb	r3, [r3, #5]
 800651c:	2201      	movs	r2, #1
 800651e:	9200      	str	r2, [sp, #0]
 8006520:	2200      	movs	r2, #0
 8006522:	2100      	movs	r1, #0
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f87f 	bl	8006628 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006530:	b29a      	uxth	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	220a      	movs	r2, #10
 800653a:	761a      	strb	r2, [r3, #24]
      break;
 800653c:	e055      	b.n	80065ea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	795b      	ldrb	r3, [r3, #5]
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fbd3 	bl	8006cf0 <USBH_LL_GetURBState>
 800654a:	4603      	mov	r3, r0
 800654c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800654e:	7bbb      	ldrb	r3, [r7, #14]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d105      	bne.n	8006560 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	220d      	movs	r2, #13
 800655c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800655e:	e043      	b.n	80065e8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006560:	7bbb      	ldrb	r3, [r7, #14]
 8006562:	2b02      	cmp	r3, #2
 8006564:	d103      	bne.n	800656e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2209      	movs	r2, #9
 800656a:	761a      	strb	r2, [r3, #24]
      break;
 800656c:	e03c      	b.n	80065e8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800656e:	7bbb      	ldrb	r3, [r7, #14]
 8006570:	2b04      	cmp	r3, #4
 8006572:	d139      	bne.n	80065e8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	220b      	movs	r2, #11
 8006578:	761a      	strb	r2, [r3, #24]
      break;
 800657a:	e035      	b.n	80065e8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	7e5b      	ldrb	r3, [r3, #25]
 8006580:	3301      	adds	r3, #1
 8006582:	b2da      	uxtb	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	765a      	strb	r2, [r3, #25]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	7e5b      	ldrb	r3, [r3, #25]
 800658c:	2b02      	cmp	r3, #2
 800658e:	d806      	bhi.n	800659e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800659c:	e025      	b.n	80065ea <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065a4:	2106      	movs	r1, #6
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	795b      	ldrb	r3, [r3, #5]
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f90c 	bl	80067d4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	791b      	ldrb	r3, [r3, #4]
 80065c0:	4619      	mov	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f906 	bl	80067d4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80065ce:	2302      	movs	r3, #2
 80065d0:	73fb      	strb	r3, [r7, #15]
      break;
 80065d2:	e00a      	b.n	80065ea <USBH_HandleControl+0x2de>

    default:
      break;
 80065d4:	bf00      	nop
 80065d6:	e008      	b.n	80065ea <USBH_HandleControl+0x2de>
      break;
 80065d8:	bf00      	nop
 80065da:	e006      	b.n	80065ea <USBH_HandleControl+0x2de>
      break;
 80065dc:	bf00      	nop
 80065de:	e004      	b.n	80065ea <USBH_HandleControl+0x2de>
      break;
 80065e0:	bf00      	nop
 80065e2:	e002      	b.n	80065ea <USBH_HandleControl+0x2de>
      break;
 80065e4:	bf00      	nop
 80065e6:	e000      	b.n	80065ea <USBH_HandleControl+0x2de>
      break;
 80065e8:	bf00      	nop
  }

  return status;
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af04      	add	r7, sp, #16
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	4613      	mov	r3, r2
 8006600:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006602:	79f9      	ldrb	r1, [r7, #7]
 8006604:	2300      	movs	r3, #0
 8006606:	9303      	str	r3, [sp, #12]
 8006608:	2308      	movs	r3, #8
 800660a:	9302      	str	r3, [sp, #8]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	9301      	str	r3, [sp, #4]
 8006610:	2300      	movs	r3, #0
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	2300      	movs	r3, #0
 8006616:	2200      	movs	r2, #0
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 fb38 	bl	8006c8e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af04      	add	r7, sp, #16
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	4611      	mov	r1, r2
 8006634:	461a      	mov	r2, r3
 8006636:	460b      	mov	r3, r1
 8006638:	80fb      	strh	r3, [r7, #6]
 800663a:	4613      	mov	r3, r2
 800663c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800664c:	7979      	ldrb	r1, [r7, #5]
 800664e:	7e3b      	ldrb	r3, [r7, #24]
 8006650:	9303      	str	r3, [sp, #12]
 8006652:	88fb      	ldrh	r3, [r7, #6]
 8006654:	9302      	str	r3, [sp, #8]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	9301      	str	r3, [sp, #4]
 800665a:	2301      	movs	r3, #1
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	2300      	movs	r3, #0
 8006660:	2200      	movs	r2, #0
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 fb13 	bl	8006c8e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b088      	sub	sp, #32
 8006676:	af04      	add	r7, sp, #16
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	60b9      	str	r1, [r7, #8]
 800667c:	4611      	mov	r1, r2
 800667e:	461a      	mov	r2, r3
 8006680:	460b      	mov	r3, r1
 8006682:	80fb      	strh	r3, [r7, #6]
 8006684:	4613      	mov	r3, r2
 8006686:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006688:	7979      	ldrb	r1, [r7, #5]
 800668a:	2300      	movs	r3, #0
 800668c:	9303      	str	r3, [sp, #12]
 800668e:	88fb      	ldrh	r3, [r7, #6]
 8006690:	9302      	str	r3, [sp, #8]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	9301      	str	r3, [sp, #4]
 8006696:	2301      	movs	r3, #1
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	2300      	movs	r3, #0
 800669c:	2201      	movs	r2, #1
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 faf5 	bl	8006c8e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80066a4:	2300      	movs	r3, #0

}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b088      	sub	sp, #32
 80066b2:	af04      	add	r7, sp, #16
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	4611      	mov	r1, r2
 80066ba:	461a      	mov	r2, r3
 80066bc:	460b      	mov	r3, r1
 80066be:	80fb      	strh	r3, [r7, #6]
 80066c0:	4613      	mov	r3, r2
 80066c2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80066d2:	7979      	ldrb	r1, [r7, #5]
 80066d4:	7e3b      	ldrb	r3, [r7, #24]
 80066d6:	9303      	str	r3, [sp, #12]
 80066d8:	88fb      	ldrh	r3, [r7, #6]
 80066da:	9302      	str	r3, [sp, #8]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	9301      	str	r3, [sp, #4]
 80066e0:	2301      	movs	r3, #1
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	2302      	movs	r3, #2
 80066e6:	2200      	movs	r2, #0
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 fad0 	bl	8006c8e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b088      	sub	sp, #32
 80066fc:	af04      	add	r7, sp, #16
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	4611      	mov	r1, r2
 8006704:	461a      	mov	r2, r3
 8006706:	460b      	mov	r3, r1
 8006708:	80fb      	strh	r3, [r7, #6]
 800670a:	4613      	mov	r3, r2
 800670c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800670e:	7979      	ldrb	r1, [r7, #5]
 8006710:	2300      	movs	r3, #0
 8006712:	9303      	str	r3, [sp, #12]
 8006714:	88fb      	ldrh	r3, [r7, #6]
 8006716:	9302      	str	r3, [sp, #8]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	9301      	str	r3, [sp, #4]
 800671c:	2301      	movs	r3, #1
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	2302      	movs	r3, #2
 8006722:	2201      	movs	r2, #1
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 fab2 	bl	8006c8e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af04      	add	r7, sp, #16
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	4608      	mov	r0, r1
 800673e:	4611      	mov	r1, r2
 8006740:	461a      	mov	r2, r3
 8006742:	4603      	mov	r3, r0
 8006744:	70fb      	strb	r3, [r7, #3]
 8006746:	460b      	mov	r3, r1
 8006748:	70bb      	strb	r3, [r7, #2]
 800674a:	4613      	mov	r3, r2
 800674c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800674e:	7878      	ldrb	r0, [r7, #1]
 8006750:	78ba      	ldrb	r2, [r7, #2]
 8006752:	78f9      	ldrb	r1, [r7, #3]
 8006754:	8b3b      	ldrh	r3, [r7, #24]
 8006756:	9302      	str	r3, [sp, #8]
 8006758:	7d3b      	ldrb	r3, [r7, #20]
 800675a:	9301      	str	r3, [sp, #4]
 800675c:	7c3b      	ldrb	r3, [r7, #16]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	4603      	mov	r3, r0
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fa45 	bl	8006bf2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b082      	sub	sp, #8
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800677e:	78fb      	ldrb	r3, [r7, #3]
 8006780:	4619      	mov	r1, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fa64 	bl	8006c50 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b084      	sub	sp, #16
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	460b      	mov	r3, r1
 800679c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f836 	bl	8006810 <USBH_GetFreePipe>
 80067a4:	4603      	mov	r3, r0
 80067a6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80067a8:	89fb      	ldrh	r3, [r7, #14]
 80067aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00a      	beq.n	80067c8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80067b2:	78fa      	ldrb	r2, [r7, #3]
 80067b4:	89fb      	ldrh	r3, [r7, #14]
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067be:	6879      	ldr	r1, [r7, #4]
 80067c0:	33e0      	adds	r3, #224	; 0xe0
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	440b      	add	r3, r1
 80067c6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80067c8:	89fb      	ldrh	r3, [r7, #14]
 80067ca:	b2db      	uxtb	r3, r3
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80067e0:	78fb      	ldrb	r3, [r7, #3]
 80067e2:	2b0f      	cmp	r3, #15
 80067e4:	d80d      	bhi.n	8006802 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80067e6:	78fb      	ldrb	r3, [r7, #3]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	33e0      	adds	r3, #224	; 0xe0
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	78fb      	ldrb	r3, [r7, #3]
 80067f4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80067f8:	6879      	ldr	r1, [r7, #4]
 80067fa:	33e0      	adds	r3, #224	; 0xe0
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	440b      	add	r3, r1
 8006800:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800681c:	2300      	movs	r3, #0
 800681e:	73fb      	strb	r3, [r7, #15]
 8006820:	e00f      	b.n	8006842 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	33e0      	adds	r3, #224	; 0xe0
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d102      	bne.n	800683c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	b29b      	uxth	r3, r3
 800683a:	e007      	b.n	800684c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	3301      	adds	r3, #1
 8006840:	73fb      	strb	r3, [r7, #15]
 8006842:	7bfb      	ldrb	r3, [r7, #15]
 8006844:	2b0f      	cmp	r3, #15
 8006846:	d9ec      	bls.n	8006822 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006848:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800684c:	4618      	mov	r0, r3
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800685c:	2201      	movs	r2, #1
 800685e:	490e      	ldr	r1, [pc, #56]	; (8006898 <MX_USB_HOST_Init+0x40>)
 8006860:	480e      	ldr	r0, [pc, #56]	; (800689c <MX_USB_HOST_Init+0x44>)
 8006862:	f7fe fba5 	bl	8004fb0 <USBH_Init>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800686c:	f7fa f884 	bl	8000978 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006870:	490b      	ldr	r1, [pc, #44]	; (80068a0 <MX_USB_HOST_Init+0x48>)
 8006872:	480a      	ldr	r0, [pc, #40]	; (800689c <MX_USB_HOST_Init+0x44>)
 8006874:	f7fe fc2a 	bl	80050cc <USBH_RegisterClass>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800687e:	f7fa f87b 	bl	8000978 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006882:	4806      	ldr	r0, [pc, #24]	; (800689c <MX_USB_HOST_Init+0x44>)
 8006884:	f7fe fcae 	bl	80051e4 <USBH_Start>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800688e:	f7fa f873 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006892:	bf00      	nop
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	080068b9 	.word	0x080068b9
 800689c:	20000158 	.word	0x20000158
 80068a0:	2000000c 	.word	0x2000000c

080068a4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80068a8:	4802      	ldr	r0, [pc, #8]	; (80068b4 <MX_USB_HOST_Process+0x10>)
 80068aa:	f7fe fcab 	bl	8005204 <USBH_Process>
}
 80068ae:	bf00      	nop
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000158 	.word	0x20000158

080068b8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	460b      	mov	r3, r1
 80068c2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80068c4:	78fb      	ldrb	r3, [r7, #3]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	2b04      	cmp	r3, #4
 80068ca:	d819      	bhi.n	8006900 <USBH_UserProcess+0x48>
 80068cc:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <USBH_UserProcess+0x1c>)
 80068ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d2:	bf00      	nop
 80068d4:	08006901 	.word	0x08006901
 80068d8:	080068f1 	.word	0x080068f1
 80068dc:	08006901 	.word	0x08006901
 80068e0:	080068f9 	.word	0x080068f9
 80068e4:	080068e9 	.word	0x080068e9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80068e8:	4b09      	ldr	r3, [pc, #36]	; (8006910 <USBH_UserProcess+0x58>)
 80068ea:	2203      	movs	r2, #3
 80068ec:	701a      	strb	r2, [r3, #0]
  break;
 80068ee:	e008      	b.n	8006902 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80068f0:	4b07      	ldr	r3, [pc, #28]	; (8006910 <USBH_UserProcess+0x58>)
 80068f2:	2202      	movs	r2, #2
 80068f4:	701a      	strb	r2, [r3, #0]
  break;
 80068f6:	e004      	b.n	8006902 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80068f8:	4b05      	ldr	r3, [pc, #20]	; (8006910 <USBH_UserProcess+0x58>)
 80068fa:	2201      	movs	r2, #1
 80068fc:	701a      	strb	r2, [r3, #0]
  break;
 80068fe:	e000      	b.n	8006902 <USBH_UserProcess+0x4a>

  default:
  break;
 8006900:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006902:	bf00      	nop
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	20000530 	.word	0x20000530

08006914 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b08a      	sub	sp, #40	; 0x28
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800691c:	f107 0314 	add.w	r3, r7, #20
 8006920:	2200      	movs	r2, #0
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	605a      	str	r2, [r3, #4]
 8006926:	609a      	str	r2, [r3, #8]
 8006928:	60da      	str	r2, [r3, #12]
 800692a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006934:	d13a      	bne.n	80069ac <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006936:	2300      	movs	r3, #0
 8006938:	613b      	str	r3, [r7, #16]
 800693a:	4b1e      	ldr	r3, [pc, #120]	; (80069b4 <HAL_HCD_MspInit+0xa0>)
 800693c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693e:	4a1d      	ldr	r2, [pc, #116]	; (80069b4 <HAL_HCD_MspInit+0xa0>)
 8006940:	f043 0301 	orr.w	r3, r3, #1
 8006944:	6313      	str	r3, [r2, #48]	; 0x30
 8006946:	4b1b      	ldr	r3, [pc, #108]	; (80069b4 <HAL_HCD_MspInit+0xa0>)
 8006948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	613b      	str	r3, [r7, #16]
 8006950:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006952:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006958:	2302      	movs	r3, #2
 800695a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800695c:	2300      	movs	r3, #0
 800695e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006960:	2300      	movs	r3, #0
 8006962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006964:	230a      	movs	r3, #10
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006968:	f107 0314 	add.w	r3, r7, #20
 800696c:	4619      	mov	r1, r3
 800696e:	4812      	ldr	r0, [pc, #72]	; (80069b8 <HAL_HCD_MspInit+0xa4>)
 8006970:	f7fa fb8c 	bl	800108c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006974:	4b0f      	ldr	r3, [pc, #60]	; (80069b4 <HAL_HCD_MspInit+0xa0>)
 8006976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006978:	4a0e      	ldr	r2, [pc, #56]	; (80069b4 <HAL_HCD_MspInit+0xa0>)
 800697a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800697e:	6353      	str	r3, [r2, #52]	; 0x34
 8006980:	2300      	movs	r3, #0
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <HAL_HCD_MspInit+0xa0>)
 8006986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006988:	4a0a      	ldr	r2, [pc, #40]	; (80069b4 <HAL_HCD_MspInit+0xa0>)
 800698a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800698e:	6453      	str	r3, [r2, #68]	; 0x44
 8006990:	4b08      	ldr	r3, [pc, #32]	; (80069b4 <HAL_HCD_MspInit+0xa0>)
 8006992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800699c:	2200      	movs	r2, #0
 800699e:	2100      	movs	r1, #0
 80069a0:	2043      	movs	r0, #67	; 0x43
 80069a2:	f7fa fb3c 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80069a6:	2043      	movs	r0, #67	; 0x43
 80069a8:	f7fa fb55 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80069ac:	bf00      	nop
 80069ae:	3728      	adds	r7, #40	; 0x28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	40023800 	.word	0x40023800
 80069b8:	40020000 	.word	0x40020000

080069bc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fe fff9 	bl	80059c2 <USBH_LL_IncTimer>
}
 80069d0:	bf00      	nop
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff f831 	bl	8005a4e <USBH_LL_Connect>
}
 80069ec:	bf00      	nop
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff f83a 	bl	8005a7c <USBH_LL_Disconnect>
}
 8006a08:	bf00      	nop
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	70fb      	strb	r3, [r7, #3]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fe ffeb 	bl	8005a16 <USBH_LL_PortEnabled>
}
 8006a40:	bf00      	nop
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fe ffeb 	bl	8005a32 <USBH_LL_PortDisabled>
}
 8006a5c:	bf00      	nop
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d12a      	bne.n	8006acc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006a76:	4a18      	ldr	r2, [pc, #96]	; (8006ad8 <USBH_LL_Init+0x74>)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a15      	ldr	r2, [pc, #84]	; (8006ad8 <USBH_LL_Init+0x74>)
 8006a82:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006a86:	4b14      	ldr	r3, [pc, #80]	; (8006ad8 <USBH_LL_Init+0x74>)
 8006a88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006a8c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006a8e:	4b12      	ldr	r3, [pc, #72]	; (8006ad8 <USBH_LL_Init+0x74>)
 8006a90:	2208      	movs	r2, #8
 8006a92:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006a94:	4b10      	ldr	r3, [pc, #64]	; (8006ad8 <USBH_LL_Init+0x74>)
 8006a96:	2201      	movs	r2, #1
 8006a98:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006a9a:	4b0f      	ldr	r3, [pc, #60]	; (8006ad8 <USBH_LL_Init+0x74>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006aa0:	4b0d      	ldr	r3, [pc, #52]	; (8006ad8 <USBH_LL_Init+0x74>)
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006aa6:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <USBH_LL_Init+0x74>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006aac:	480a      	ldr	r0, [pc, #40]	; (8006ad8 <USBH_LL_Init+0x74>)
 8006aae:	f7fa fca2 	bl	80013f6 <HAL_HCD_Init>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006ab8:	f7f9 ff5e 	bl	8000978 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006abc:	4806      	ldr	r0, [pc, #24]	; (8006ad8 <USBH_LL_Init+0x74>)
 8006abe:	f7fb f886 	bl	8001bce <HAL_HCD_GetCurrentFrame>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7fe ff6c 	bl	80059a4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000534 	.word	0x20000534

08006adc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fa fff5 	bl	8001ae2 <HAL_HCD_Start>
 8006af8:	4603      	mov	r3, r0
 8006afa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 f95c 	bl	8006dbc <USBH_Get_USB_Status>
 8006b04:	4603      	mov	r3, r0
 8006b06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b08:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b084      	sub	sp, #16
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7fa fffd 	bl	8001b28 <HAL_HCD_Stop>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 f941 	bl	8006dbc <USBH_Get_USB_Status>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8006b50:	2301      	movs	r3, #1
 8006b52:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fb f845 	bl	8001bea <HAL_HCD_GetCurrentSpeed>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d00c      	beq.n	8006b80 <USBH_LL_GetSpeed+0x38>
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d80d      	bhi.n	8006b86 <USBH_LL_GetSpeed+0x3e>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <USBH_LL_GetSpeed+0x2c>
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d003      	beq.n	8006b7a <USBH_LL_GetSpeed+0x32>
 8006b72:	e008      	b.n	8006b86 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8006b74:	2300      	movs	r3, #0
 8006b76:	73fb      	strb	r3, [r7, #15]
    break;
 8006b78:	e008      	b.n	8006b8c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8006b7e:	e005      	b.n	8006b8c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8006b80:	2302      	movs	r3, #2
 8006b82:	73fb      	strb	r3, [r7, #15]
    break;
 8006b84:	e002      	b.n	8006b8c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8006b86:	2301      	movs	r3, #1
 8006b88:	73fb      	strb	r3, [r7, #15]
    break;
 8006b8a:	bf00      	nop
  }
  return  speed;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b084      	sub	sp, #16
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fa ffd8 	bl	8001b62 <HAL_HCD_ResetPort>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 f8ff 	bl	8006dbc <USBH_Get_USB_Status>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006bde:	78fa      	ldrb	r2, [r7, #3]
 8006be0:	4611      	mov	r1, r2
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7fa ffdf 	bl	8001ba6 <HAL_HCD_HC_GetXferCount>
 8006be8:	4603      	mov	r3, r0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006bf2:	b590      	push	{r4, r7, lr}
 8006bf4:	b089      	sub	sp, #36	; 0x24
 8006bf6:	af04      	add	r7, sp, #16
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	4608      	mov	r0, r1
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	461a      	mov	r2, r3
 8006c00:	4603      	mov	r3, r0
 8006c02:	70fb      	strb	r3, [r7, #3]
 8006c04:	460b      	mov	r3, r1
 8006c06:	70bb      	strb	r3, [r7, #2]
 8006c08:	4613      	mov	r3, r2
 8006c0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006c1a:	787c      	ldrb	r4, [r7, #1]
 8006c1c:	78ba      	ldrb	r2, [r7, #2]
 8006c1e:	78f9      	ldrb	r1, [r7, #3]
 8006c20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c22:	9302      	str	r3, [sp, #8]
 8006c24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006c28:	9301      	str	r3, [sp, #4]
 8006c2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	4623      	mov	r3, r4
 8006c32:	f7fa fc42 	bl	80014ba <HAL_HCD_HC_Init>
 8006c36:	4603      	mov	r3, r0
 8006c38:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 f8bd 	bl	8006dbc <USBH_Get_USB_Status>
 8006c42:	4603      	mov	r3, r0
 8006c44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c46:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd90      	pop	{r4, r7, pc}

08006c50 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006c6a:	78fa      	ldrb	r2, [r7, #3]
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fa fcb2 	bl	80015d8 <HAL_HCD_HC_Halt>
 8006c74:	4603      	mov	r3, r0
 8006c76:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 f89e 	bl	8006dbc <USBH_Get_USB_Status>
 8006c80:	4603      	mov	r3, r0
 8006c82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006c8e:	b590      	push	{r4, r7, lr}
 8006c90:	b089      	sub	sp, #36	; 0x24
 8006c92:	af04      	add	r7, sp, #16
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	4608      	mov	r0, r1
 8006c98:	4611      	mov	r1, r2
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	70fb      	strb	r3, [r7, #3]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70bb      	strb	r3, [r7, #2]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006cb6:	787c      	ldrb	r4, [r7, #1]
 8006cb8:	78ba      	ldrb	r2, [r7, #2]
 8006cba:	78f9      	ldrb	r1, [r7, #3]
 8006cbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006cc0:	9303      	str	r3, [sp, #12]
 8006cc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006cc4:	9302      	str	r3, [sp, #8]
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	9301      	str	r3, [sp, #4]
 8006cca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	4623      	mov	r3, r4
 8006cd2:	f7fa fca5 	bl	8001620 <HAL_HCD_HC_SubmitRequest>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 f86d 	bl	8006dbc <USBH_Get_USB_Status>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ce6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd90      	pop	{r4, r7, pc}

08006cf0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006d02:	78fa      	ldrb	r2, [r7, #3]
 8006d04:	4611      	mov	r1, r2
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fa ff39 	bl	8001b7e <HAL_HCD_HC_GetURBState>
 8006d0c:	4603      	mov	r3, r0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b082      	sub	sp, #8
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d103      	bne.n	8006d34 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006d2c:	78fb      	ldrb	r3, [r7, #3]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 f870 	bl	8006e14 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006d34:	20c8      	movs	r0, #200	; 0xc8
 8006d36:	f7fa f873 	bl	8000e20 <HAL_Delay>
  return USBH_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	70fb      	strb	r3, [r7, #3]
 8006d50:	4613      	mov	r3, r2
 8006d52:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006d5a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	212c      	movs	r1, #44	; 0x2c
 8006d62:	fb01 f303 	mul.w	r3, r1, r3
 8006d66:	4413      	add	r3, r2
 8006d68:	333b      	adds	r3, #59	; 0x3b
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d009      	beq.n	8006d84 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006d70:	78fb      	ldrb	r3, [r7, #3]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	212c      	movs	r1, #44	; 0x2c
 8006d76:	fb01 f303 	mul.w	r3, r1, r3
 8006d7a:	4413      	add	r3, r2
 8006d7c:	3354      	adds	r3, #84	; 0x54
 8006d7e:	78ba      	ldrb	r2, [r7, #2]
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	e008      	b.n	8006d96 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006d84:	78fb      	ldrb	r3, [r7, #3]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	212c      	movs	r1, #44	; 0x2c
 8006d8a:	fb01 f303 	mul.w	r3, r1, r3
 8006d8e:	4413      	add	r3, r2
 8006d90:	3355      	adds	r3, #85	; 0x55
 8006d92:	78ba      	ldrb	r2, [r7, #2]
 8006d94:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7fa f837 	bl	8000e20 <HAL_Delay>
}
 8006db2:	bf00      	nop
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
	...

08006dbc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006dca:	79fb      	ldrb	r3, [r7, #7]
 8006dcc:	2b03      	cmp	r3, #3
 8006dce:	d817      	bhi.n	8006e00 <USBH_Get_USB_Status+0x44>
 8006dd0:	a201      	add	r2, pc, #4	; (adr r2, 8006dd8 <USBH_Get_USB_Status+0x1c>)
 8006dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd6:	bf00      	nop
 8006dd8:	08006de9 	.word	0x08006de9
 8006ddc:	08006def 	.word	0x08006def
 8006de0:	08006df5 	.word	0x08006df5
 8006de4:	08006dfb 	.word	0x08006dfb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	73fb      	strb	r3, [r7, #15]
    break;
 8006dec:	e00b      	b.n	8006e06 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006dee:	2302      	movs	r3, #2
 8006df0:	73fb      	strb	r3, [r7, #15]
    break;
 8006df2:	e008      	b.n	8006e06 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006df4:	2301      	movs	r3, #1
 8006df6:	73fb      	strb	r3, [r7, #15]
    break;
 8006df8:	e005      	b.n	8006e06 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	73fb      	strb	r3, [r7, #15]
    break;
 8006dfe:	e002      	b.n	8006e06 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006e00:	2302      	movs	r3, #2
 8006e02:	73fb      	strb	r3, [r7, #15]
    break;
 8006e04:	bf00      	nop
  }
  return usb_status;
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8006e1e:	79fb      	ldrb	r3, [r7, #7]
 8006e20:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006e22:	79fb      	ldrb	r3, [r7, #7]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d102      	bne.n	8006e2e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	73fb      	strb	r3, [r7, #15]
 8006e2c:	e001      	b.n	8006e32 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
 8006e34:	461a      	mov	r2, r3
 8006e36:	2101      	movs	r1, #1
 8006e38:	4803      	ldr	r0, [pc, #12]	; (8006e48 <MX_DriverVbusFS+0x34>)
 8006e3a:	f7fa fac3 	bl	80013c4 <HAL_GPIO_WritePin>
}
 8006e3e:	bf00      	nop
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	40020800 	.word	0x40020800

08006e4c <malloc>:
 8006e4c:	4b02      	ldr	r3, [pc, #8]	; (8006e58 <malloc+0xc>)
 8006e4e:	4601      	mov	r1, r0
 8006e50:	6818      	ldr	r0, [r3, #0]
 8006e52:	f000 b82b 	b.w	8006eac <_malloc_r>
 8006e56:	bf00      	nop
 8006e58:	20000084 	.word	0x20000084

08006e5c <free>:
 8006e5c:	4b02      	ldr	r3, [pc, #8]	; (8006e68 <free+0xc>)
 8006e5e:	4601      	mov	r1, r0
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	f000 bb1d 	b.w	80074a0 <_free_r>
 8006e66:	bf00      	nop
 8006e68:	20000084 	.word	0x20000084

08006e6c <sbrk_aligned>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	4e0e      	ldr	r6, [pc, #56]	; (8006ea8 <sbrk_aligned+0x3c>)
 8006e70:	460c      	mov	r4, r1
 8006e72:	6831      	ldr	r1, [r6, #0]
 8006e74:	4605      	mov	r5, r0
 8006e76:	b911      	cbnz	r1, 8006e7e <sbrk_aligned+0x12>
 8006e78:	f000 fac4 	bl	8007404 <_sbrk_r>
 8006e7c:	6030      	str	r0, [r6, #0]
 8006e7e:	4621      	mov	r1, r4
 8006e80:	4628      	mov	r0, r5
 8006e82:	f000 fabf 	bl	8007404 <_sbrk_r>
 8006e86:	1c43      	adds	r3, r0, #1
 8006e88:	d00a      	beq.n	8006ea0 <sbrk_aligned+0x34>
 8006e8a:	1cc4      	adds	r4, r0, #3
 8006e8c:	f024 0403 	bic.w	r4, r4, #3
 8006e90:	42a0      	cmp	r0, r4
 8006e92:	d007      	beq.n	8006ea4 <sbrk_aligned+0x38>
 8006e94:	1a21      	subs	r1, r4, r0
 8006e96:	4628      	mov	r0, r5
 8006e98:	f000 fab4 	bl	8007404 <_sbrk_r>
 8006e9c:	3001      	adds	r0, #1
 8006e9e:	d101      	bne.n	8006ea4 <sbrk_aligned+0x38>
 8006ea0:	f04f 34ff 	mov.w	r4, #4294967295
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}
 8006ea8:	2000083c 	.word	0x2000083c

08006eac <_malloc_r>:
 8006eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb0:	1ccd      	adds	r5, r1, #3
 8006eb2:	f025 0503 	bic.w	r5, r5, #3
 8006eb6:	3508      	adds	r5, #8
 8006eb8:	2d0c      	cmp	r5, #12
 8006eba:	bf38      	it	cc
 8006ebc:	250c      	movcc	r5, #12
 8006ebe:	2d00      	cmp	r5, #0
 8006ec0:	4607      	mov	r7, r0
 8006ec2:	db01      	blt.n	8006ec8 <_malloc_r+0x1c>
 8006ec4:	42a9      	cmp	r1, r5
 8006ec6:	d905      	bls.n	8006ed4 <_malloc_r+0x28>
 8006ec8:	230c      	movs	r3, #12
 8006eca:	603b      	str	r3, [r7, #0]
 8006ecc:	2600      	movs	r6, #0
 8006ece:	4630      	mov	r0, r6
 8006ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ed4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006fa8 <_malloc_r+0xfc>
 8006ed8:	f000 f868 	bl	8006fac <__malloc_lock>
 8006edc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ee0:	461c      	mov	r4, r3
 8006ee2:	bb5c      	cbnz	r4, 8006f3c <_malloc_r+0x90>
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	f7ff ffc0 	bl	8006e6c <sbrk_aligned>
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	4604      	mov	r4, r0
 8006ef0:	d155      	bne.n	8006f9e <_malloc_r+0xf2>
 8006ef2:	f8d8 4000 	ldr.w	r4, [r8]
 8006ef6:	4626      	mov	r6, r4
 8006ef8:	2e00      	cmp	r6, #0
 8006efa:	d145      	bne.n	8006f88 <_malloc_r+0xdc>
 8006efc:	2c00      	cmp	r4, #0
 8006efe:	d048      	beq.n	8006f92 <_malloc_r+0xe6>
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	4631      	mov	r1, r6
 8006f04:	4638      	mov	r0, r7
 8006f06:	eb04 0903 	add.w	r9, r4, r3
 8006f0a:	f000 fa7b 	bl	8007404 <_sbrk_r>
 8006f0e:	4581      	cmp	r9, r0
 8006f10:	d13f      	bne.n	8006f92 <_malloc_r+0xe6>
 8006f12:	6821      	ldr	r1, [r4, #0]
 8006f14:	1a6d      	subs	r5, r5, r1
 8006f16:	4629      	mov	r1, r5
 8006f18:	4638      	mov	r0, r7
 8006f1a:	f7ff ffa7 	bl	8006e6c <sbrk_aligned>
 8006f1e:	3001      	adds	r0, #1
 8006f20:	d037      	beq.n	8006f92 <_malloc_r+0xe6>
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	442b      	add	r3, r5
 8006f26:	6023      	str	r3, [r4, #0]
 8006f28:	f8d8 3000 	ldr.w	r3, [r8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d038      	beq.n	8006fa2 <_malloc_r+0xf6>
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	42a2      	cmp	r2, r4
 8006f34:	d12b      	bne.n	8006f8e <_malloc_r+0xe2>
 8006f36:	2200      	movs	r2, #0
 8006f38:	605a      	str	r2, [r3, #4]
 8006f3a:	e00f      	b.n	8006f5c <_malloc_r+0xb0>
 8006f3c:	6822      	ldr	r2, [r4, #0]
 8006f3e:	1b52      	subs	r2, r2, r5
 8006f40:	d41f      	bmi.n	8006f82 <_malloc_r+0xd6>
 8006f42:	2a0b      	cmp	r2, #11
 8006f44:	d917      	bls.n	8006f76 <_malloc_r+0xca>
 8006f46:	1961      	adds	r1, r4, r5
 8006f48:	42a3      	cmp	r3, r4
 8006f4a:	6025      	str	r5, [r4, #0]
 8006f4c:	bf18      	it	ne
 8006f4e:	6059      	strne	r1, [r3, #4]
 8006f50:	6863      	ldr	r3, [r4, #4]
 8006f52:	bf08      	it	eq
 8006f54:	f8c8 1000 	streq.w	r1, [r8]
 8006f58:	5162      	str	r2, [r4, r5]
 8006f5a:	604b      	str	r3, [r1, #4]
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	f104 060b 	add.w	r6, r4, #11
 8006f62:	f000 f829 	bl	8006fb8 <__malloc_unlock>
 8006f66:	f026 0607 	bic.w	r6, r6, #7
 8006f6a:	1d23      	adds	r3, r4, #4
 8006f6c:	1af2      	subs	r2, r6, r3
 8006f6e:	d0ae      	beq.n	8006ece <_malloc_r+0x22>
 8006f70:	1b9b      	subs	r3, r3, r6
 8006f72:	50a3      	str	r3, [r4, r2]
 8006f74:	e7ab      	b.n	8006ece <_malloc_r+0x22>
 8006f76:	42a3      	cmp	r3, r4
 8006f78:	6862      	ldr	r2, [r4, #4]
 8006f7a:	d1dd      	bne.n	8006f38 <_malloc_r+0x8c>
 8006f7c:	f8c8 2000 	str.w	r2, [r8]
 8006f80:	e7ec      	b.n	8006f5c <_malloc_r+0xb0>
 8006f82:	4623      	mov	r3, r4
 8006f84:	6864      	ldr	r4, [r4, #4]
 8006f86:	e7ac      	b.n	8006ee2 <_malloc_r+0x36>
 8006f88:	4634      	mov	r4, r6
 8006f8a:	6876      	ldr	r6, [r6, #4]
 8006f8c:	e7b4      	b.n	8006ef8 <_malloc_r+0x4c>
 8006f8e:	4613      	mov	r3, r2
 8006f90:	e7cc      	b.n	8006f2c <_malloc_r+0x80>
 8006f92:	230c      	movs	r3, #12
 8006f94:	603b      	str	r3, [r7, #0]
 8006f96:	4638      	mov	r0, r7
 8006f98:	f000 f80e 	bl	8006fb8 <__malloc_unlock>
 8006f9c:	e797      	b.n	8006ece <_malloc_r+0x22>
 8006f9e:	6025      	str	r5, [r4, #0]
 8006fa0:	e7dc      	b.n	8006f5c <_malloc_r+0xb0>
 8006fa2:	605b      	str	r3, [r3, #4]
 8006fa4:	deff      	udf	#255	; 0xff
 8006fa6:	bf00      	nop
 8006fa8:	20000838 	.word	0x20000838

08006fac <__malloc_lock>:
 8006fac:	4801      	ldr	r0, [pc, #4]	; (8006fb4 <__malloc_lock+0x8>)
 8006fae:	f000 ba75 	b.w	800749c <__retarget_lock_acquire_recursive>
 8006fb2:	bf00      	nop
 8006fb4:	20000980 	.word	0x20000980

08006fb8 <__malloc_unlock>:
 8006fb8:	4801      	ldr	r0, [pc, #4]	; (8006fc0 <__malloc_unlock+0x8>)
 8006fba:	f000 ba70 	b.w	800749e <__retarget_lock_release_recursive>
 8006fbe:	bf00      	nop
 8006fc0:	20000980 	.word	0x20000980

08006fc4 <std>:
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	b510      	push	{r4, lr}
 8006fc8:	4604      	mov	r4, r0
 8006fca:	e9c0 3300 	strd	r3, r3, [r0]
 8006fce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fd2:	6083      	str	r3, [r0, #8]
 8006fd4:	8181      	strh	r1, [r0, #12]
 8006fd6:	6643      	str	r3, [r0, #100]	; 0x64
 8006fd8:	81c2      	strh	r2, [r0, #14]
 8006fda:	6183      	str	r3, [r0, #24]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	2208      	movs	r2, #8
 8006fe0:	305c      	adds	r0, #92	; 0x5c
 8006fe2:	f000 f9d3 	bl	800738c <memset>
 8006fe6:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <std+0x38>)
 8006fe8:	6263      	str	r3, [r4, #36]	; 0x24
 8006fea:	4b05      	ldr	r3, [pc, #20]	; (8007000 <std+0x3c>)
 8006fec:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fee:	4b05      	ldr	r3, [pc, #20]	; (8007004 <std+0x40>)
 8006ff0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ff2:	4b05      	ldr	r3, [pc, #20]	; (8007008 <std+0x44>)
 8006ff4:	6224      	str	r4, [r4, #32]
 8006ff6:	6323      	str	r3, [r4, #48]	; 0x30
 8006ff8:	bd10      	pop	{r4, pc}
 8006ffa:	bf00      	nop
 8006ffc:	080071dd 	.word	0x080071dd
 8007000:	080071ff 	.word	0x080071ff
 8007004:	08007237 	.word	0x08007237
 8007008:	0800725b 	.word	0x0800725b

0800700c <stdio_exit_handler>:
 800700c:	4a02      	ldr	r2, [pc, #8]	; (8007018 <stdio_exit_handler+0xc>)
 800700e:	4903      	ldr	r1, [pc, #12]	; (800701c <stdio_exit_handler+0x10>)
 8007010:	4803      	ldr	r0, [pc, #12]	; (8007020 <stdio_exit_handler+0x14>)
 8007012:	f000 b869 	b.w	80070e8 <_fwalk_sglue>
 8007016:	bf00      	nop
 8007018:	2000002c 	.word	0x2000002c
 800701c:	08007645 	.word	0x08007645
 8007020:	20000038 	.word	0x20000038

08007024 <cleanup_stdio>:
 8007024:	6841      	ldr	r1, [r0, #4]
 8007026:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <cleanup_stdio+0x34>)
 8007028:	4299      	cmp	r1, r3
 800702a:	b510      	push	{r4, lr}
 800702c:	4604      	mov	r4, r0
 800702e:	d001      	beq.n	8007034 <cleanup_stdio+0x10>
 8007030:	f000 fb08 	bl	8007644 <_fflush_r>
 8007034:	68a1      	ldr	r1, [r4, #8]
 8007036:	4b09      	ldr	r3, [pc, #36]	; (800705c <cleanup_stdio+0x38>)
 8007038:	4299      	cmp	r1, r3
 800703a:	d002      	beq.n	8007042 <cleanup_stdio+0x1e>
 800703c:	4620      	mov	r0, r4
 800703e:	f000 fb01 	bl	8007644 <_fflush_r>
 8007042:	68e1      	ldr	r1, [r4, #12]
 8007044:	4b06      	ldr	r3, [pc, #24]	; (8007060 <cleanup_stdio+0x3c>)
 8007046:	4299      	cmp	r1, r3
 8007048:	d004      	beq.n	8007054 <cleanup_stdio+0x30>
 800704a:	4620      	mov	r0, r4
 800704c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007050:	f000 baf8 	b.w	8007644 <_fflush_r>
 8007054:	bd10      	pop	{r4, pc}
 8007056:	bf00      	nop
 8007058:	20000840 	.word	0x20000840
 800705c:	200008a8 	.word	0x200008a8
 8007060:	20000910 	.word	0x20000910

08007064 <global_stdio_init.part.0>:
 8007064:	b510      	push	{r4, lr}
 8007066:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <global_stdio_init.part.0+0x30>)
 8007068:	4c0b      	ldr	r4, [pc, #44]	; (8007098 <global_stdio_init.part.0+0x34>)
 800706a:	4a0c      	ldr	r2, [pc, #48]	; (800709c <global_stdio_init.part.0+0x38>)
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	4620      	mov	r0, r4
 8007070:	2200      	movs	r2, #0
 8007072:	2104      	movs	r1, #4
 8007074:	f7ff ffa6 	bl	8006fc4 <std>
 8007078:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800707c:	2201      	movs	r2, #1
 800707e:	2109      	movs	r1, #9
 8007080:	f7ff ffa0 	bl	8006fc4 <std>
 8007084:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007088:	2202      	movs	r2, #2
 800708a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800708e:	2112      	movs	r1, #18
 8007090:	f7ff bf98 	b.w	8006fc4 <std>
 8007094:	20000978 	.word	0x20000978
 8007098:	20000840 	.word	0x20000840
 800709c:	0800700d 	.word	0x0800700d

080070a0 <__sfp_lock_acquire>:
 80070a0:	4801      	ldr	r0, [pc, #4]	; (80070a8 <__sfp_lock_acquire+0x8>)
 80070a2:	f000 b9fb 	b.w	800749c <__retarget_lock_acquire_recursive>
 80070a6:	bf00      	nop
 80070a8:	20000981 	.word	0x20000981

080070ac <__sfp_lock_release>:
 80070ac:	4801      	ldr	r0, [pc, #4]	; (80070b4 <__sfp_lock_release+0x8>)
 80070ae:	f000 b9f6 	b.w	800749e <__retarget_lock_release_recursive>
 80070b2:	bf00      	nop
 80070b4:	20000981 	.word	0x20000981

080070b8 <__sinit>:
 80070b8:	b510      	push	{r4, lr}
 80070ba:	4604      	mov	r4, r0
 80070bc:	f7ff fff0 	bl	80070a0 <__sfp_lock_acquire>
 80070c0:	6a23      	ldr	r3, [r4, #32]
 80070c2:	b11b      	cbz	r3, 80070cc <__sinit+0x14>
 80070c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070c8:	f7ff bff0 	b.w	80070ac <__sfp_lock_release>
 80070cc:	4b04      	ldr	r3, [pc, #16]	; (80070e0 <__sinit+0x28>)
 80070ce:	6223      	str	r3, [r4, #32]
 80070d0:	4b04      	ldr	r3, [pc, #16]	; (80070e4 <__sinit+0x2c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1f5      	bne.n	80070c4 <__sinit+0xc>
 80070d8:	f7ff ffc4 	bl	8007064 <global_stdio_init.part.0>
 80070dc:	e7f2      	b.n	80070c4 <__sinit+0xc>
 80070de:	bf00      	nop
 80070e0:	08007025 	.word	0x08007025
 80070e4:	20000978 	.word	0x20000978

080070e8 <_fwalk_sglue>:
 80070e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070ec:	4607      	mov	r7, r0
 80070ee:	4688      	mov	r8, r1
 80070f0:	4614      	mov	r4, r2
 80070f2:	2600      	movs	r6, #0
 80070f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070f8:	f1b9 0901 	subs.w	r9, r9, #1
 80070fc:	d505      	bpl.n	800710a <_fwalk_sglue+0x22>
 80070fe:	6824      	ldr	r4, [r4, #0]
 8007100:	2c00      	cmp	r4, #0
 8007102:	d1f7      	bne.n	80070f4 <_fwalk_sglue+0xc>
 8007104:	4630      	mov	r0, r6
 8007106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710a:	89ab      	ldrh	r3, [r5, #12]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d907      	bls.n	8007120 <_fwalk_sglue+0x38>
 8007110:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007114:	3301      	adds	r3, #1
 8007116:	d003      	beq.n	8007120 <_fwalk_sglue+0x38>
 8007118:	4629      	mov	r1, r5
 800711a:	4638      	mov	r0, r7
 800711c:	47c0      	blx	r8
 800711e:	4306      	orrs	r6, r0
 8007120:	3568      	adds	r5, #104	; 0x68
 8007122:	e7e9      	b.n	80070f8 <_fwalk_sglue+0x10>

08007124 <_puts_r>:
 8007124:	6a03      	ldr	r3, [r0, #32]
 8007126:	b570      	push	{r4, r5, r6, lr}
 8007128:	6884      	ldr	r4, [r0, #8]
 800712a:	4605      	mov	r5, r0
 800712c:	460e      	mov	r6, r1
 800712e:	b90b      	cbnz	r3, 8007134 <_puts_r+0x10>
 8007130:	f7ff ffc2 	bl	80070b8 <__sinit>
 8007134:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007136:	07db      	lsls	r3, r3, #31
 8007138:	d405      	bmi.n	8007146 <_puts_r+0x22>
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	0598      	lsls	r0, r3, #22
 800713e:	d402      	bmi.n	8007146 <_puts_r+0x22>
 8007140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007142:	f000 f9ab 	bl	800749c <__retarget_lock_acquire_recursive>
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	0719      	lsls	r1, r3, #28
 800714a:	d513      	bpl.n	8007174 <_puts_r+0x50>
 800714c:	6923      	ldr	r3, [r4, #16]
 800714e:	b18b      	cbz	r3, 8007174 <_puts_r+0x50>
 8007150:	3e01      	subs	r6, #1
 8007152:	68a3      	ldr	r3, [r4, #8]
 8007154:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007158:	3b01      	subs	r3, #1
 800715a:	60a3      	str	r3, [r4, #8]
 800715c:	b9e9      	cbnz	r1, 800719a <_puts_r+0x76>
 800715e:	2b00      	cmp	r3, #0
 8007160:	da2e      	bge.n	80071c0 <_puts_r+0x9c>
 8007162:	4622      	mov	r2, r4
 8007164:	210a      	movs	r1, #10
 8007166:	4628      	mov	r0, r5
 8007168:	f000 f87b 	bl	8007262 <__swbuf_r>
 800716c:	3001      	adds	r0, #1
 800716e:	d007      	beq.n	8007180 <_puts_r+0x5c>
 8007170:	250a      	movs	r5, #10
 8007172:	e007      	b.n	8007184 <_puts_r+0x60>
 8007174:	4621      	mov	r1, r4
 8007176:	4628      	mov	r0, r5
 8007178:	f000 f8b0 	bl	80072dc <__swsetup_r>
 800717c:	2800      	cmp	r0, #0
 800717e:	d0e7      	beq.n	8007150 <_puts_r+0x2c>
 8007180:	f04f 35ff 	mov.w	r5, #4294967295
 8007184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007186:	07da      	lsls	r2, r3, #31
 8007188:	d405      	bmi.n	8007196 <_puts_r+0x72>
 800718a:	89a3      	ldrh	r3, [r4, #12]
 800718c:	059b      	lsls	r3, r3, #22
 800718e:	d402      	bmi.n	8007196 <_puts_r+0x72>
 8007190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007192:	f000 f984 	bl	800749e <__retarget_lock_release_recursive>
 8007196:	4628      	mov	r0, r5
 8007198:	bd70      	pop	{r4, r5, r6, pc}
 800719a:	2b00      	cmp	r3, #0
 800719c:	da04      	bge.n	80071a8 <_puts_r+0x84>
 800719e:	69a2      	ldr	r2, [r4, #24]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	dc06      	bgt.n	80071b2 <_puts_r+0x8e>
 80071a4:	290a      	cmp	r1, #10
 80071a6:	d004      	beq.n	80071b2 <_puts_r+0x8e>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	1c5a      	adds	r2, r3, #1
 80071ac:	6022      	str	r2, [r4, #0]
 80071ae:	7019      	strb	r1, [r3, #0]
 80071b0:	e7cf      	b.n	8007152 <_puts_r+0x2e>
 80071b2:	4622      	mov	r2, r4
 80071b4:	4628      	mov	r0, r5
 80071b6:	f000 f854 	bl	8007262 <__swbuf_r>
 80071ba:	3001      	adds	r0, #1
 80071bc:	d1c9      	bne.n	8007152 <_puts_r+0x2e>
 80071be:	e7df      	b.n	8007180 <_puts_r+0x5c>
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	250a      	movs	r5, #10
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	6022      	str	r2, [r4, #0]
 80071c8:	701d      	strb	r5, [r3, #0]
 80071ca:	e7db      	b.n	8007184 <_puts_r+0x60>

080071cc <puts>:
 80071cc:	4b02      	ldr	r3, [pc, #8]	; (80071d8 <puts+0xc>)
 80071ce:	4601      	mov	r1, r0
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	f7ff bfa7 	b.w	8007124 <_puts_r>
 80071d6:	bf00      	nop
 80071d8:	20000084 	.word	0x20000084

080071dc <__sread>:
 80071dc:	b510      	push	{r4, lr}
 80071de:	460c      	mov	r4, r1
 80071e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e4:	f000 f8fc 	bl	80073e0 <_read_r>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	bfab      	itete	ge
 80071ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071ee:	89a3      	ldrhlt	r3, [r4, #12]
 80071f0:	181b      	addge	r3, r3, r0
 80071f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071f6:	bfac      	ite	ge
 80071f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80071fa:	81a3      	strhlt	r3, [r4, #12]
 80071fc:	bd10      	pop	{r4, pc}

080071fe <__swrite>:
 80071fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007202:	461f      	mov	r7, r3
 8007204:	898b      	ldrh	r3, [r1, #12]
 8007206:	05db      	lsls	r3, r3, #23
 8007208:	4605      	mov	r5, r0
 800720a:	460c      	mov	r4, r1
 800720c:	4616      	mov	r6, r2
 800720e:	d505      	bpl.n	800721c <__swrite+0x1e>
 8007210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007214:	2302      	movs	r3, #2
 8007216:	2200      	movs	r2, #0
 8007218:	f000 f8d0 	bl	80073bc <_lseek_r>
 800721c:	89a3      	ldrh	r3, [r4, #12]
 800721e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007226:	81a3      	strh	r3, [r4, #12]
 8007228:	4632      	mov	r2, r6
 800722a:	463b      	mov	r3, r7
 800722c:	4628      	mov	r0, r5
 800722e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007232:	f000 b8f7 	b.w	8007424 <_write_r>

08007236 <__sseek>:
 8007236:	b510      	push	{r4, lr}
 8007238:	460c      	mov	r4, r1
 800723a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800723e:	f000 f8bd 	bl	80073bc <_lseek_r>
 8007242:	1c43      	adds	r3, r0, #1
 8007244:	89a3      	ldrh	r3, [r4, #12]
 8007246:	bf15      	itete	ne
 8007248:	6560      	strne	r0, [r4, #84]	; 0x54
 800724a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800724e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007252:	81a3      	strheq	r3, [r4, #12]
 8007254:	bf18      	it	ne
 8007256:	81a3      	strhne	r3, [r4, #12]
 8007258:	bd10      	pop	{r4, pc}

0800725a <__sclose>:
 800725a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800725e:	f000 b89d 	b.w	800739c <_close_r>

08007262 <__swbuf_r>:
 8007262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007264:	460e      	mov	r6, r1
 8007266:	4614      	mov	r4, r2
 8007268:	4605      	mov	r5, r0
 800726a:	b118      	cbz	r0, 8007274 <__swbuf_r+0x12>
 800726c:	6a03      	ldr	r3, [r0, #32]
 800726e:	b90b      	cbnz	r3, 8007274 <__swbuf_r+0x12>
 8007270:	f7ff ff22 	bl	80070b8 <__sinit>
 8007274:	69a3      	ldr	r3, [r4, #24]
 8007276:	60a3      	str	r3, [r4, #8]
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	071a      	lsls	r2, r3, #28
 800727c:	d525      	bpl.n	80072ca <__swbuf_r+0x68>
 800727e:	6923      	ldr	r3, [r4, #16]
 8007280:	b31b      	cbz	r3, 80072ca <__swbuf_r+0x68>
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	6922      	ldr	r2, [r4, #16]
 8007286:	1a98      	subs	r0, r3, r2
 8007288:	6963      	ldr	r3, [r4, #20]
 800728a:	b2f6      	uxtb	r6, r6
 800728c:	4283      	cmp	r3, r0
 800728e:	4637      	mov	r7, r6
 8007290:	dc04      	bgt.n	800729c <__swbuf_r+0x3a>
 8007292:	4621      	mov	r1, r4
 8007294:	4628      	mov	r0, r5
 8007296:	f000 f9d5 	bl	8007644 <_fflush_r>
 800729a:	b9e0      	cbnz	r0, 80072d6 <__swbuf_r+0x74>
 800729c:	68a3      	ldr	r3, [r4, #8]
 800729e:	3b01      	subs	r3, #1
 80072a0:	60a3      	str	r3, [r4, #8]
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	1c5a      	adds	r2, r3, #1
 80072a6:	6022      	str	r2, [r4, #0]
 80072a8:	701e      	strb	r6, [r3, #0]
 80072aa:	6962      	ldr	r2, [r4, #20]
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d004      	beq.n	80072bc <__swbuf_r+0x5a>
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	07db      	lsls	r3, r3, #31
 80072b6:	d506      	bpl.n	80072c6 <__swbuf_r+0x64>
 80072b8:	2e0a      	cmp	r6, #10
 80072ba:	d104      	bne.n	80072c6 <__swbuf_r+0x64>
 80072bc:	4621      	mov	r1, r4
 80072be:	4628      	mov	r0, r5
 80072c0:	f000 f9c0 	bl	8007644 <_fflush_r>
 80072c4:	b938      	cbnz	r0, 80072d6 <__swbuf_r+0x74>
 80072c6:	4638      	mov	r0, r7
 80072c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ca:	4621      	mov	r1, r4
 80072cc:	4628      	mov	r0, r5
 80072ce:	f000 f805 	bl	80072dc <__swsetup_r>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	d0d5      	beq.n	8007282 <__swbuf_r+0x20>
 80072d6:	f04f 37ff 	mov.w	r7, #4294967295
 80072da:	e7f4      	b.n	80072c6 <__swbuf_r+0x64>

080072dc <__swsetup_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4b2a      	ldr	r3, [pc, #168]	; (8007388 <__swsetup_r+0xac>)
 80072e0:	4605      	mov	r5, r0
 80072e2:	6818      	ldr	r0, [r3, #0]
 80072e4:	460c      	mov	r4, r1
 80072e6:	b118      	cbz	r0, 80072f0 <__swsetup_r+0x14>
 80072e8:	6a03      	ldr	r3, [r0, #32]
 80072ea:	b90b      	cbnz	r3, 80072f0 <__swsetup_r+0x14>
 80072ec:	f7ff fee4 	bl	80070b8 <__sinit>
 80072f0:	89a3      	ldrh	r3, [r4, #12]
 80072f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072f6:	0718      	lsls	r0, r3, #28
 80072f8:	d422      	bmi.n	8007340 <__swsetup_r+0x64>
 80072fa:	06d9      	lsls	r1, r3, #27
 80072fc:	d407      	bmi.n	800730e <__swsetup_r+0x32>
 80072fe:	2309      	movs	r3, #9
 8007300:	602b      	str	r3, [r5, #0]
 8007302:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007306:	81a3      	strh	r3, [r4, #12]
 8007308:	f04f 30ff 	mov.w	r0, #4294967295
 800730c:	e034      	b.n	8007378 <__swsetup_r+0x9c>
 800730e:	0758      	lsls	r0, r3, #29
 8007310:	d512      	bpl.n	8007338 <__swsetup_r+0x5c>
 8007312:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007314:	b141      	cbz	r1, 8007328 <__swsetup_r+0x4c>
 8007316:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800731a:	4299      	cmp	r1, r3
 800731c:	d002      	beq.n	8007324 <__swsetup_r+0x48>
 800731e:	4628      	mov	r0, r5
 8007320:	f000 f8be 	bl	80074a0 <_free_r>
 8007324:	2300      	movs	r3, #0
 8007326:	6363      	str	r3, [r4, #52]	; 0x34
 8007328:	89a3      	ldrh	r3, [r4, #12]
 800732a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800732e:	81a3      	strh	r3, [r4, #12]
 8007330:	2300      	movs	r3, #0
 8007332:	6063      	str	r3, [r4, #4]
 8007334:	6923      	ldr	r3, [r4, #16]
 8007336:	6023      	str	r3, [r4, #0]
 8007338:	89a3      	ldrh	r3, [r4, #12]
 800733a:	f043 0308 	orr.w	r3, r3, #8
 800733e:	81a3      	strh	r3, [r4, #12]
 8007340:	6923      	ldr	r3, [r4, #16]
 8007342:	b94b      	cbnz	r3, 8007358 <__swsetup_r+0x7c>
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800734a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800734e:	d003      	beq.n	8007358 <__swsetup_r+0x7c>
 8007350:	4621      	mov	r1, r4
 8007352:	4628      	mov	r0, r5
 8007354:	f000 f9c4 	bl	80076e0 <__smakebuf_r>
 8007358:	89a0      	ldrh	r0, [r4, #12]
 800735a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800735e:	f010 0301 	ands.w	r3, r0, #1
 8007362:	d00a      	beq.n	800737a <__swsetup_r+0x9e>
 8007364:	2300      	movs	r3, #0
 8007366:	60a3      	str	r3, [r4, #8]
 8007368:	6963      	ldr	r3, [r4, #20]
 800736a:	425b      	negs	r3, r3
 800736c:	61a3      	str	r3, [r4, #24]
 800736e:	6923      	ldr	r3, [r4, #16]
 8007370:	b943      	cbnz	r3, 8007384 <__swsetup_r+0xa8>
 8007372:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007376:	d1c4      	bne.n	8007302 <__swsetup_r+0x26>
 8007378:	bd38      	pop	{r3, r4, r5, pc}
 800737a:	0781      	lsls	r1, r0, #30
 800737c:	bf58      	it	pl
 800737e:	6963      	ldrpl	r3, [r4, #20]
 8007380:	60a3      	str	r3, [r4, #8]
 8007382:	e7f4      	b.n	800736e <__swsetup_r+0x92>
 8007384:	2000      	movs	r0, #0
 8007386:	e7f7      	b.n	8007378 <__swsetup_r+0x9c>
 8007388:	20000084 	.word	0x20000084

0800738c <memset>:
 800738c:	4402      	add	r2, r0
 800738e:	4603      	mov	r3, r0
 8007390:	4293      	cmp	r3, r2
 8007392:	d100      	bne.n	8007396 <memset+0xa>
 8007394:	4770      	bx	lr
 8007396:	f803 1b01 	strb.w	r1, [r3], #1
 800739a:	e7f9      	b.n	8007390 <memset+0x4>

0800739c <_close_r>:
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	4d06      	ldr	r5, [pc, #24]	; (80073b8 <_close_r+0x1c>)
 80073a0:	2300      	movs	r3, #0
 80073a2:	4604      	mov	r4, r0
 80073a4:	4608      	mov	r0, r1
 80073a6:	602b      	str	r3, [r5, #0]
 80073a8:	f7f9 fc21 	bl	8000bee <_close>
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	d102      	bne.n	80073b6 <_close_r+0x1a>
 80073b0:	682b      	ldr	r3, [r5, #0]
 80073b2:	b103      	cbz	r3, 80073b6 <_close_r+0x1a>
 80073b4:	6023      	str	r3, [r4, #0]
 80073b6:	bd38      	pop	{r3, r4, r5, pc}
 80073b8:	2000097c 	.word	0x2000097c

080073bc <_lseek_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	4d07      	ldr	r5, [pc, #28]	; (80073dc <_lseek_r+0x20>)
 80073c0:	4604      	mov	r4, r0
 80073c2:	4608      	mov	r0, r1
 80073c4:	4611      	mov	r1, r2
 80073c6:	2200      	movs	r2, #0
 80073c8:	602a      	str	r2, [r5, #0]
 80073ca:	461a      	mov	r2, r3
 80073cc:	f7f9 fc36 	bl	8000c3c <_lseek>
 80073d0:	1c43      	adds	r3, r0, #1
 80073d2:	d102      	bne.n	80073da <_lseek_r+0x1e>
 80073d4:	682b      	ldr	r3, [r5, #0]
 80073d6:	b103      	cbz	r3, 80073da <_lseek_r+0x1e>
 80073d8:	6023      	str	r3, [r4, #0]
 80073da:	bd38      	pop	{r3, r4, r5, pc}
 80073dc:	2000097c 	.word	0x2000097c

080073e0 <_read_r>:
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	4d07      	ldr	r5, [pc, #28]	; (8007400 <_read_r+0x20>)
 80073e4:	4604      	mov	r4, r0
 80073e6:	4608      	mov	r0, r1
 80073e8:	4611      	mov	r1, r2
 80073ea:	2200      	movs	r2, #0
 80073ec:	602a      	str	r2, [r5, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	f7f9 fbc4 	bl	8000b7c <_read>
 80073f4:	1c43      	adds	r3, r0, #1
 80073f6:	d102      	bne.n	80073fe <_read_r+0x1e>
 80073f8:	682b      	ldr	r3, [r5, #0]
 80073fa:	b103      	cbz	r3, 80073fe <_read_r+0x1e>
 80073fc:	6023      	str	r3, [r4, #0]
 80073fe:	bd38      	pop	{r3, r4, r5, pc}
 8007400:	2000097c 	.word	0x2000097c

08007404 <_sbrk_r>:
 8007404:	b538      	push	{r3, r4, r5, lr}
 8007406:	4d06      	ldr	r5, [pc, #24]	; (8007420 <_sbrk_r+0x1c>)
 8007408:	2300      	movs	r3, #0
 800740a:	4604      	mov	r4, r0
 800740c:	4608      	mov	r0, r1
 800740e:	602b      	str	r3, [r5, #0]
 8007410:	f7f9 fc22 	bl	8000c58 <_sbrk>
 8007414:	1c43      	adds	r3, r0, #1
 8007416:	d102      	bne.n	800741e <_sbrk_r+0x1a>
 8007418:	682b      	ldr	r3, [r5, #0]
 800741a:	b103      	cbz	r3, 800741e <_sbrk_r+0x1a>
 800741c:	6023      	str	r3, [r4, #0]
 800741e:	bd38      	pop	{r3, r4, r5, pc}
 8007420:	2000097c 	.word	0x2000097c

08007424 <_write_r>:
 8007424:	b538      	push	{r3, r4, r5, lr}
 8007426:	4d07      	ldr	r5, [pc, #28]	; (8007444 <_write_r+0x20>)
 8007428:	4604      	mov	r4, r0
 800742a:	4608      	mov	r0, r1
 800742c:	4611      	mov	r1, r2
 800742e:	2200      	movs	r2, #0
 8007430:	602a      	str	r2, [r5, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	f7f9 fbbf 	bl	8000bb6 <_write>
 8007438:	1c43      	adds	r3, r0, #1
 800743a:	d102      	bne.n	8007442 <_write_r+0x1e>
 800743c:	682b      	ldr	r3, [r5, #0]
 800743e:	b103      	cbz	r3, 8007442 <_write_r+0x1e>
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	bd38      	pop	{r3, r4, r5, pc}
 8007444:	2000097c 	.word	0x2000097c

08007448 <__errno>:
 8007448:	4b01      	ldr	r3, [pc, #4]	; (8007450 <__errno+0x8>)
 800744a:	6818      	ldr	r0, [r3, #0]
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	20000084 	.word	0x20000084

08007454 <__libc_init_array>:
 8007454:	b570      	push	{r4, r5, r6, lr}
 8007456:	4d0d      	ldr	r5, [pc, #52]	; (800748c <__libc_init_array+0x38>)
 8007458:	4c0d      	ldr	r4, [pc, #52]	; (8007490 <__libc_init_array+0x3c>)
 800745a:	1b64      	subs	r4, r4, r5
 800745c:	10a4      	asrs	r4, r4, #2
 800745e:	2600      	movs	r6, #0
 8007460:	42a6      	cmp	r6, r4
 8007462:	d109      	bne.n	8007478 <__libc_init_array+0x24>
 8007464:	4d0b      	ldr	r5, [pc, #44]	; (8007494 <__libc_init_array+0x40>)
 8007466:	4c0c      	ldr	r4, [pc, #48]	; (8007498 <__libc_init_array+0x44>)
 8007468:	f000 f998 	bl	800779c <_init>
 800746c:	1b64      	subs	r4, r4, r5
 800746e:	10a4      	asrs	r4, r4, #2
 8007470:	2600      	movs	r6, #0
 8007472:	42a6      	cmp	r6, r4
 8007474:	d105      	bne.n	8007482 <__libc_init_array+0x2e>
 8007476:	bd70      	pop	{r4, r5, r6, pc}
 8007478:	f855 3b04 	ldr.w	r3, [r5], #4
 800747c:	4798      	blx	r3
 800747e:	3601      	adds	r6, #1
 8007480:	e7ee      	b.n	8007460 <__libc_init_array+0xc>
 8007482:	f855 3b04 	ldr.w	r3, [r5], #4
 8007486:	4798      	blx	r3
 8007488:	3601      	adds	r6, #1
 800748a:	e7f2      	b.n	8007472 <__libc_init_array+0x1e>
 800748c:	080077e8 	.word	0x080077e8
 8007490:	080077e8 	.word	0x080077e8
 8007494:	080077e8 	.word	0x080077e8
 8007498:	080077ec 	.word	0x080077ec

0800749c <__retarget_lock_acquire_recursive>:
 800749c:	4770      	bx	lr

0800749e <__retarget_lock_release_recursive>:
 800749e:	4770      	bx	lr

080074a0 <_free_r>:
 80074a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074a2:	2900      	cmp	r1, #0
 80074a4:	d044      	beq.n	8007530 <_free_r+0x90>
 80074a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074aa:	9001      	str	r0, [sp, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f1a1 0404 	sub.w	r4, r1, #4
 80074b2:	bfb8      	it	lt
 80074b4:	18e4      	addlt	r4, r4, r3
 80074b6:	f7ff fd79 	bl	8006fac <__malloc_lock>
 80074ba:	4a1e      	ldr	r2, [pc, #120]	; (8007534 <_free_r+0x94>)
 80074bc:	9801      	ldr	r0, [sp, #4]
 80074be:	6813      	ldr	r3, [r2, #0]
 80074c0:	b933      	cbnz	r3, 80074d0 <_free_r+0x30>
 80074c2:	6063      	str	r3, [r4, #4]
 80074c4:	6014      	str	r4, [r2, #0]
 80074c6:	b003      	add	sp, #12
 80074c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074cc:	f7ff bd74 	b.w	8006fb8 <__malloc_unlock>
 80074d0:	42a3      	cmp	r3, r4
 80074d2:	d908      	bls.n	80074e6 <_free_r+0x46>
 80074d4:	6825      	ldr	r5, [r4, #0]
 80074d6:	1961      	adds	r1, r4, r5
 80074d8:	428b      	cmp	r3, r1
 80074da:	bf01      	itttt	eq
 80074dc:	6819      	ldreq	r1, [r3, #0]
 80074de:	685b      	ldreq	r3, [r3, #4]
 80074e0:	1949      	addeq	r1, r1, r5
 80074e2:	6021      	streq	r1, [r4, #0]
 80074e4:	e7ed      	b.n	80074c2 <_free_r+0x22>
 80074e6:	461a      	mov	r2, r3
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	b10b      	cbz	r3, 80074f0 <_free_r+0x50>
 80074ec:	42a3      	cmp	r3, r4
 80074ee:	d9fa      	bls.n	80074e6 <_free_r+0x46>
 80074f0:	6811      	ldr	r1, [r2, #0]
 80074f2:	1855      	adds	r5, r2, r1
 80074f4:	42a5      	cmp	r5, r4
 80074f6:	d10b      	bne.n	8007510 <_free_r+0x70>
 80074f8:	6824      	ldr	r4, [r4, #0]
 80074fa:	4421      	add	r1, r4
 80074fc:	1854      	adds	r4, r2, r1
 80074fe:	42a3      	cmp	r3, r4
 8007500:	6011      	str	r1, [r2, #0]
 8007502:	d1e0      	bne.n	80074c6 <_free_r+0x26>
 8007504:	681c      	ldr	r4, [r3, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	6053      	str	r3, [r2, #4]
 800750a:	440c      	add	r4, r1
 800750c:	6014      	str	r4, [r2, #0]
 800750e:	e7da      	b.n	80074c6 <_free_r+0x26>
 8007510:	d902      	bls.n	8007518 <_free_r+0x78>
 8007512:	230c      	movs	r3, #12
 8007514:	6003      	str	r3, [r0, #0]
 8007516:	e7d6      	b.n	80074c6 <_free_r+0x26>
 8007518:	6825      	ldr	r5, [r4, #0]
 800751a:	1961      	adds	r1, r4, r5
 800751c:	428b      	cmp	r3, r1
 800751e:	bf04      	itt	eq
 8007520:	6819      	ldreq	r1, [r3, #0]
 8007522:	685b      	ldreq	r3, [r3, #4]
 8007524:	6063      	str	r3, [r4, #4]
 8007526:	bf04      	itt	eq
 8007528:	1949      	addeq	r1, r1, r5
 800752a:	6021      	streq	r1, [r4, #0]
 800752c:	6054      	str	r4, [r2, #4]
 800752e:	e7ca      	b.n	80074c6 <_free_r+0x26>
 8007530:	b003      	add	sp, #12
 8007532:	bd30      	pop	{r4, r5, pc}
 8007534:	20000838 	.word	0x20000838

08007538 <__sflush_r>:
 8007538:	898a      	ldrh	r2, [r1, #12]
 800753a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800753e:	4605      	mov	r5, r0
 8007540:	0710      	lsls	r0, r2, #28
 8007542:	460c      	mov	r4, r1
 8007544:	d458      	bmi.n	80075f8 <__sflush_r+0xc0>
 8007546:	684b      	ldr	r3, [r1, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	dc05      	bgt.n	8007558 <__sflush_r+0x20>
 800754c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800754e:	2b00      	cmp	r3, #0
 8007550:	dc02      	bgt.n	8007558 <__sflush_r+0x20>
 8007552:	2000      	movs	r0, #0
 8007554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800755a:	2e00      	cmp	r6, #0
 800755c:	d0f9      	beq.n	8007552 <__sflush_r+0x1a>
 800755e:	2300      	movs	r3, #0
 8007560:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007564:	682f      	ldr	r7, [r5, #0]
 8007566:	6a21      	ldr	r1, [r4, #32]
 8007568:	602b      	str	r3, [r5, #0]
 800756a:	d032      	beq.n	80075d2 <__sflush_r+0x9a>
 800756c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	075a      	lsls	r2, r3, #29
 8007572:	d505      	bpl.n	8007580 <__sflush_r+0x48>
 8007574:	6863      	ldr	r3, [r4, #4]
 8007576:	1ac0      	subs	r0, r0, r3
 8007578:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800757a:	b10b      	cbz	r3, 8007580 <__sflush_r+0x48>
 800757c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800757e:	1ac0      	subs	r0, r0, r3
 8007580:	2300      	movs	r3, #0
 8007582:	4602      	mov	r2, r0
 8007584:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007586:	6a21      	ldr	r1, [r4, #32]
 8007588:	4628      	mov	r0, r5
 800758a:	47b0      	blx	r6
 800758c:	1c43      	adds	r3, r0, #1
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	d106      	bne.n	80075a0 <__sflush_r+0x68>
 8007592:	6829      	ldr	r1, [r5, #0]
 8007594:	291d      	cmp	r1, #29
 8007596:	d82b      	bhi.n	80075f0 <__sflush_r+0xb8>
 8007598:	4a29      	ldr	r2, [pc, #164]	; (8007640 <__sflush_r+0x108>)
 800759a:	410a      	asrs	r2, r1
 800759c:	07d6      	lsls	r6, r2, #31
 800759e:	d427      	bmi.n	80075f0 <__sflush_r+0xb8>
 80075a0:	2200      	movs	r2, #0
 80075a2:	6062      	str	r2, [r4, #4]
 80075a4:	04d9      	lsls	r1, r3, #19
 80075a6:	6922      	ldr	r2, [r4, #16]
 80075a8:	6022      	str	r2, [r4, #0]
 80075aa:	d504      	bpl.n	80075b6 <__sflush_r+0x7e>
 80075ac:	1c42      	adds	r2, r0, #1
 80075ae:	d101      	bne.n	80075b4 <__sflush_r+0x7c>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	b903      	cbnz	r3, 80075b6 <__sflush_r+0x7e>
 80075b4:	6560      	str	r0, [r4, #84]	; 0x54
 80075b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075b8:	602f      	str	r7, [r5, #0]
 80075ba:	2900      	cmp	r1, #0
 80075bc:	d0c9      	beq.n	8007552 <__sflush_r+0x1a>
 80075be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075c2:	4299      	cmp	r1, r3
 80075c4:	d002      	beq.n	80075cc <__sflush_r+0x94>
 80075c6:	4628      	mov	r0, r5
 80075c8:	f7ff ff6a 	bl	80074a0 <_free_r>
 80075cc:	2000      	movs	r0, #0
 80075ce:	6360      	str	r0, [r4, #52]	; 0x34
 80075d0:	e7c0      	b.n	8007554 <__sflush_r+0x1c>
 80075d2:	2301      	movs	r3, #1
 80075d4:	4628      	mov	r0, r5
 80075d6:	47b0      	blx	r6
 80075d8:	1c41      	adds	r1, r0, #1
 80075da:	d1c8      	bne.n	800756e <__sflush_r+0x36>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0c5      	beq.n	800756e <__sflush_r+0x36>
 80075e2:	2b1d      	cmp	r3, #29
 80075e4:	d001      	beq.n	80075ea <__sflush_r+0xb2>
 80075e6:	2b16      	cmp	r3, #22
 80075e8:	d101      	bne.n	80075ee <__sflush_r+0xb6>
 80075ea:	602f      	str	r7, [r5, #0]
 80075ec:	e7b1      	b.n	8007552 <__sflush_r+0x1a>
 80075ee:	89a3      	ldrh	r3, [r4, #12]
 80075f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075f4:	81a3      	strh	r3, [r4, #12]
 80075f6:	e7ad      	b.n	8007554 <__sflush_r+0x1c>
 80075f8:	690f      	ldr	r7, [r1, #16]
 80075fa:	2f00      	cmp	r7, #0
 80075fc:	d0a9      	beq.n	8007552 <__sflush_r+0x1a>
 80075fe:	0793      	lsls	r3, r2, #30
 8007600:	680e      	ldr	r6, [r1, #0]
 8007602:	bf08      	it	eq
 8007604:	694b      	ldreq	r3, [r1, #20]
 8007606:	600f      	str	r7, [r1, #0]
 8007608:	bf18      	it	ne
 800760a:	2300      	movne	r3, #0
 800760c:	eba6 0807 	sub.w	r8, r6, r7
 8007610:	608b      	str	r3, [r1, #8]
 8007612:	f1b8 0f00 	cmp.w	r8, #0
 8007616:	dd9c      	ble.n	8007552 <__sflush_r+0x1a>
 8007618:	6a21      	ldr	r1, [r4, #32]
 800761a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800761c:	4643      	mov	r3, r8
 800761e:	463a      	mov	r2, r7
 8007620:	4628      	mov	r0, r5
 8007622:	47b0      	blx	r6
 8007624:	2800      	cmp	r0, #0
 8007626:	dc06      	bgt.n	8007636 <__sflush_r+0xfe>
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800762e:	81a3      	strh	r3, [r4, #12]
 8007630:	f04f 30ff 	mov.w	r0, #4294967295
 8007634:	e78e      	b.n	8007554 <__sflush_r+0x1c>
 8007636:	4407      	add	r7, r0
 8007638:	eba8 0800 	sub.w	r8, r8, r0
 800763c:	e7e9      	b.n	8007612 <__sflush_r+0xda>
 800763e:	bf00      	nop
 8007640:	dfbffffe 	.word	0xdfbffffe

08007644 <_fflush_r>:
 8007644:	b538      	push	{r3, r4, r5, lr}
 8007646:	690b      	ldr	r3, [r1, #16]
 8007648:	4605      	mov	r5, r0
 800764a:	460c      	mov	r4, r1
 800764c:	b913      	cbnz	r3, 8007654 <_fflush_r+0x10>
 800764e:	2500      	movs	r5, #0
 8007650:	4628      	mov	r0, r5
 8007652:	bd38      	pop	{r3, r4, r5, pc}
 8007654:	b118      	cbz	r0, 800765e <_fflush_r+0x1a>
 8007656:	6a03      	ldr	r3, [r0, #32]
 8007658:	b90b      	cbnz	r3, 800765e <_fflush_r+0x1a>
 800765a:	f7ff fd2d 	bl	80070b8 <__sinit>
 800765e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d0f3      	beq.n	800764e <_fflush_r+0xa>
 8007666:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007668:	07d0      	lsls	r0, r2, #31
 800766a:	d404      	bmi.n	8007676 <_fflush_r+0x32>
 800766c:	0599      	lsls	r1, r3, #22
 800766e:	d402      	bmi.n	8007676 <_fflush_r+0x32>
 8007670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007672:	f7ff ff13 	bl	800749c <__retarget_lock_acquire_recursive>
 8007676:	4628      	mov	r0, r5
 8007678:	4621      	mov	r1, r4
 800767a:	f7ff ff5d 	bl	8007538 <__sflush_r>
 800767e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007680:	07da      	lsls	r2, r3, #31
 8007682:	4605      	mov	r5, r0
 8007684:	d4e4      	bmi.n	8007650 <_fflush_r+0xc>
 8007686:	89a3      	ldrh	r3, [r4, #12]
 8007688:	059b      	lsls	r3, r3, #22
 800768a:	d4e1      	bmi.n	8007650 <_fflush_r+0xc>
 800768c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800768e:	f7ff ff06 	bl	800749e <__retarget_lock_release_recursive>
 8007692:	e7dd      	b.n	8007650 <_fflush_r+0xc>

08007694 <__swhatbuf_r>:
 8007694:	b570      	push	{r4, r5, r6, lr}
 8007696:	460c      	mov	r4, r1
 8007698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800769c:	2900      	cmp	r1, #0
 800769e:	b096      	sub	sp, #88	; 0x58
 80076a0:	4615      	mov	r5, r2
 80076a2:	461e      	mov	r6, r3
 80076a4:	da0d      	bge.n	80076c2 <__swhatbuf_r+0x2e>
 80076a6:	89a3      	ldrh	r3, [r4, #12]
 80076a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80076ac:	f04f 0100 	mov.w	r1, #0
 80076b0:	bf0c      	ite	eq
 80076b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80076b6:	2340      	movne	r3, #64	; 0x40
 80076b8:	2000      	movs	r0, #0
 80076ba:	6031      	str	r1, [r6, #0]
 80076bc:	602b      	str	r3, [r5, #0]
 80076be:	b016      	add	sp, #88	; 0x58
 80076c0:	bd70      	pop	{r4, r5, r6, pc}
 80076c2:	466a      	mov	r2, sp
 80076c4:	f000 f848 	bl	8007758 <_fstat_r>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	dbec      	blt.n	80076a6 <__swhatbuf_r+0x12>
 80076cc:	9901      	ldr	r1, [sp, #4]
 80076ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80076d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80076d6:	4259      	negs	r1, r3
 80076d8:	4159      	adcs	r1, r3
 80076da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076de:	e7eb      	b.n	80076b8 <__swhatbuf_r+0x24>

080076e0 <__smakebuf_r>:
 80076e0:	898b      	ldrh	r3, [r1, #12]
 80076e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076e4:	079d      	lsls	r5, r3, #30
 80076e6:	4606      	mov	r6, r0
 80076e8:	460c      	mov	r4, r1
 80076ea:	d507      	bpl.n	80076fc <__smakebuf_r+0x1c>
 80076ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	6123      	str	r3, [r4, #16]
 80076f4:	2301      	movs	r3, #1
 80076f6:	6163      	str	r3, [r4, #20]
 80076f8:	b002      	add	sp, #8
 80076fa:	bd70      	pop	{r4, r5, r6, pc}
 80076fc:	ab01      	add	r3, sp, #4
 80076fe:	466a      	mov	r2, sp
 8007700:	f7ff ffc8 	bl	8007694 <__swhatbuf_r>
 8007704:	9900      	ldr	r1, [sp, #0]
 8007706:	4605      	mov	r5, r0
 8007708:	4630      	mov	r0, r6
 800770a:	f7ff fbcf 	bl	8006eac <_malloc_r>
 800770e:	b948      	cbnz	r0, 8007724 <__smakebuf_r+0x44>
 8007710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007714:	059a      	lsls	r2, r3, #22
 8007716:	d4ef      	bmi.n	80076f8 <__smakebuf_r+0x18>
 8007718:	f023 0303 	bic.w	r3, r3, #3
 800771c:	f043 0302 	orr.w	r3, r3, #2
 8007720:	81a3      	strh	r3, [r4, #12]
 8007722:	e7e3      	b.n	80076ec <__smakebuf_r+0xc>
 8007724:	89a3      	ldrh	r3, [r4, #12]
 8007726:	6020      	str	r0, [r4, #0]
 8007728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800772c:	81a3      	strh	r3, [r4, #12]
 800772e:	9b00      	ldr	r3, [sp, #0]
 8007730:	6163      	str	r3, [r4, #20]
 8007732:	9b01      	ldr	r3, [sp, #4]
 8007734:	6120      	str	r0, [r4, #16]
 8007736:	b15b      	cbz	r3, 8007750 <__smakebuf_r+0x70>
 8007738:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800773c:	4630      	mov	r0, r6
 800773e:	f000 f81d 	bl	800777c <_isatty_r>
 8007742:	b128      	cbz	r0, 8007750 <__smakebuf_r+0x70>
 8007744:	89a3      	ldrh	r3, [r4, #12]
 8007746:	f023 0303 	bic.w	r3, r3, #3
 800774a:	f043 0301 	orr.w	r3, r3, #1
 800774e:	81a3      	strh	r3, [r4, #12]
 8007750:	89a3      	ldrh	r3, [r4, #12]
 8007752:	431d      	orrs	r5, r3
 8007754:	81a5      	strh	r5, [r4, #12]
 8007756:	e7cf      	b.n	80076f8 <__smakebuf_r+0x18>

08007758 <_fstat_r>:
 8007758:	b538      	push	{r3, r4, r5, lr}
 800775a:	4d07      	ldr	r5, [pc, #28]	; (8007778 <_fstat_r+0x20>)
 800775c:	2300      	movs	r3, #0
 800775e:	4604      	mov	r4, r0
 8007760:	4608      	mov	r0, r1
 8007762:	4611      	mov	r1, r2
 8007764:	602b      	str	r3, [r5, #0]
 8007766:	f7f9 fa4e 	bl	8000c06 <_fstat>
 800776a:	1c43      	adds	r3, r0, #1
 800776c:	d102      	bne.n	8007774 <_fstat_r+0x1c>
 800776e:	682b      	ldr	r3, [r5, #0]
 8007770:	b103      	cbz	r3, 8007774 <_fstat_r+0x1c>
 8007772:	6023      	str	r3, [r4, #0]
 8007774:	bd38      	pop	{r3, r4, r5, pc}
 8007776:	bf00      	nop
 8007778:	2000097c 	.word	0x2000097c

0800777c <_isatty_r>:
 800777c:	b538      	push	{r3, r4, r5, lr}
 800777e:	4d06      	ldr	r5, [pc, #24]	; (8007798 <_isatty_r+0x1c>)
 8007780:	2300      	movs	r3, #0
 8007782:	4604      	mov	r4, r0
 8007784:	4608      	mov	r0, r1
 8007786:	602b      	str	r3, [r5, #0]
 8007788:	f7f9 fa4d 	bl	8000c26 <_isatty>
 800778c:	1c43      	adds	r3, r0, #1
 800778e:	d102      	bne.n	8007796 <_isatty_r+0x1a>
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	b103      	cbz	r3, 8007796 <_isatty_r+0x1a>
 8007794:	6023      	str	r3, [r4, #0]
 8007796:	bd38      	pop	{r3, r4, r5, pc}
 8007798:	2000097c 	.word	0x2000097c

0800779c <_init>:
 800779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779e:	bf00      	nop
 80077a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a2:	bc08      	pop	{r3}
 80077a4:	469e      	mov	lr, r3
 80077a6:	4770      	bx	lr

080077a8 <_fini>:
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	bf00      	nop
 80077ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ae:	bc08      	pop	{r3}
 80077b0:	469e      	mov	lr, r3
 80077b2:	4770      	bx	lr
