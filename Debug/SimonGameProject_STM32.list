
SimonGameProject_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b78  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08008d00  08008d00  00018d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d2c  08008d2c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008d2c  08008d2c  00018d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d34  08008d34  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d34  08008d34  00018d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d38  08008d38  00018d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          0000099c  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a24  20000a24  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019082  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003f65  00000000  00000000  0003917d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014b0  00000000  00000000  0003d0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fe7  00000000  00000000  0003e598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000252cb  00000000  00000000  0003f57f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c29a  00000000  00000000  0006484a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d0587  00000000  00000000  00080ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005cf8  00000000  00000000  0015106c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00156d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ce8 	.word	0x08008ce8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	08008ce8 	.word	0x08008ce8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <SimonGameWelcome>:
void SimonGameWelcome(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SimonGameWelcome(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2108      	movs	r1, #8
 80004cc:	481d      	ldr	r0, [pc, #116]	; (8000544 <SimonGameWelcome+0x80>)
 80004ce:	f001 f969 	bl	80017a4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80004d2:	2064      	movs	r0, #100	; 0x64
 80004d4:	f000 fe24 	bl	8001120 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2108      	movs	r1, #8
 80004dc:	4819      	ldr	r0, [pc, #100]	; (8000544 <SimonGameWelcome+0x80>)
 80004de:	f001 f961 	bl	80017a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80004e2:	2201      	movs	r2, #1
 80004e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e8:	4817      	ldr	r0, [pc, #92]	; (8000548 <SimonGameWelcome+0x84>)
 80004ea:	f001 f95b 	bl	80017a4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80004ee:	2064      	movs	r0, #100	; 0x64
 80004f0:	f000 fe16 	bl	8001120 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004fa:	4813      	ldr	r0, [pc, #76]	; (8000548 <SimonGameWelcome+0x84>)
 80004fc:	f001 f952 	bl	80017a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000500:	2201      	movs	r2, #1
 8000502:	2140      	movs	r1, #64	; 0x40
 8000504:	4811      	ldr	r0, [pc, #68]	; (800054c <SimonGameWelcome+0x88>)
 8000506:	f001 f94d 	bl	80017a4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800050a:	2064      	movs	r0, #100	; 0x64
 800050c:	f000 fe08 	bl	8001120 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2140      	movs	r1, #64	; 0x40
 8000514:	480d      	ldr	r0, [pc, #52]	; (800054c <SimonGameWelcome+0x88>)
 8000516:	f001 f945 	bl	80017a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800051a:	2201      	movs	r2, #1
 800051c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000520:	480a      	ldr	r0, [pc, #40]	; (800054c <SimonGameWelcome+0x88>)
 8000522:	f001 f93f 	bl	80017a4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000526:	2064      	movs	r0, #100	; 0x64
 8000528:	f000 fdfa 	bl	8001120 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000532:	4806      	ldr	r0, [pc, #24]	; (800054c <SimonGameWelcome+0x88>)
 8000534:	f001 f936 	bl	80017a4 <HAL_GPIO_WritePin>

	HAL_Delay(2500);
 8000538:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800053c:	f000 fdf0 	bl	8001120 <HAL_Delay>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40020400 	.word	0x40020400
 8000548:	40020000 	.word	0x40020000
 800054c:	40020800 	.word	0x40020800

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 fd72 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f81a 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f964 	bl	8000828 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000560:	f000 f8aa 	bl	80006b8 <MX_I2C1_Init>
  MX_USB_HOST_Init();
 8000564:	f007 fc1e 	bl	8007da4 <MX_USB_HOST_Init>
  MX_DAC_Init();
 8000568:	f000 f87c 	bl	8000664 <MX_DAC_Init>
  MX_I2S3_Init();
 800056c:	f000 f8d2 	bl	8000714 <MX_I2S3_Init>
  MX_SPI2_Init();
 8000570:	f000 f8fe 	bl	8000770 <MX_SPI2_Init>
  MX_UART4_Init();
 8000574:	f000 f92e 	bl	80007d4 <MX_UART4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    printf("Hello World!!!\n");
 8000578:	4804      	ldr	r0, [pc, #16]	; (800058c <main+0x3c>)
 800057a:	f008 f8cd 	bl	8008718 <puts>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800057e:	f007 fc37 	bl	8007df0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	SimonGameWelcome();
 8000582:	f7ff ff9f 	bl	80004c4 <SimonGameWelcome>

	MX_USB_HOST_Process();
 8000586:	f007 fc33 	bl	8007df0 <MX_USB_HOST_Process>
  {
 800058a:	e7f5      	b.n	8000578 <main+0x28>
 800058c:	08008d00 	.word	0x08008d00

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f008 f99a 	bl	80088d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b28      	ldr	r3, [pc, #160]	; (800065c <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a27      	ldr	r2, [pc, #156]	; (800065c <SystemClock_Config+0xcc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b25      	ldr	r3, [pc, #148]	; (800065c <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a21      	ldr	r2, [pc, #132]	; (8000660 <SystemClock_Config+0xd0>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000600:	2308      	movs	r3, #8
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000604:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000608:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060e:	2307      	movs	r3, #7
 8000610:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	4618      	mov	r0, r3
 8000618:	f003 facc 	bl	8003bb4 <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000622:	f000 fa0d 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2302      	movs	r3, #2
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000632:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2105      	movs	r1, #5
 8000644:	4618      	mov	r0, r3
 8000646:	f003 fd2d 	bl	80040a4 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000650:	f000 f9f6 	bl	8000a40 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3750      	adds	r7, #80	; 0x50
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800066a:	463b      	mov	r3, r7
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_DAC_Init+0x4c>)
 8000674:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <MX_DAC_Init+0x50>)
 8000676:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000678:	480d      	ldr	r0, [pc, #52]	; (80006b0 <MX_DAC_Init+0x4c>)
 800067a:	f000 fe86 	bl	800138a <HAL_DAC_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000684:	f000 f9dc 	bl	8000a40 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000688:	2300      	movs	r3, #0
 800068a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	; (80006b0 <MX_DAC_Init+0x4c>)
 8000698:	f000 fe99 	bl	80013ce <HAL_DAC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80006a2:	f000 f9cd 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000a4 	.word	0x200000a4
 80006b4:	40007400 	.word	0x40007400

080006b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_I2C1_Init+0x50>)
 80006be:	4a13      	ldr	r2, [pc, #76]	; (800070c <MX_I2C1_Init+0x54>)
 80006c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_I2C1_Init+0x50>)
 80006c4:	4a12      	ldr	r2, [pc, #72]	; (8000710 <MX_I2C1_Init+0x58>)
 80006c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_I2C1_Init+0x50>)
 80006d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_I2C1_Init+0x50>)
 80006f6:	f002 fc79 	bl	8002fec <HAL_I2C_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000700:	f000 f99e 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000b8 	.word	0x200000b8
 800070c:	40005400 	.word	0x40005400
 8000710:	000186a0 	.word	0x000186a0

08000714 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000718:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_I2S3_Init+0x54>)
 800071a:	4a14      	ldr	r2, [pc, #80]	; (800076c <MX_I2S3_Init+0x58>)
 800071c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_I2S3_Init+0x54>)
 8000720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000724:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_I2S3_Init+0x54>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_I2S3_Init+0x54>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_I2S3_Init+0x54>)
 8000734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000738:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_I2S3_Init+0x54>)
 800073c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000740:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_I2S3_Init+0x54>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_I2S3_Init+0x54>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_I2S3_Init+0x54>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_I2S3_Init+0x54>)
 8000756:	f002 fd8d 	bl	8003274 <HAL_I2S_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000760:	f000 f96e 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000010c 	.word	0x2000010c
 800076c:	40003c00 	.word	0x40003c00

08000770 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_SPI2_Init+0x5c>)
 8000776:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <MX_SPI2_Init+0x60>)
 8000778:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_SPI2_Init+0x5c>)
 800077c:	2200      	movs	r2, #0
 800077e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_SPI2_Init+0x5c>)
 8000782:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000786:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_SPI2_Init+0x5c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_SPI2_Init+0x5c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000794:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <MX_SPI2_Init+0x5c>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_SPI2_Init+0x5c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_SPI2_Init+0x5c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_SPI2_Init+0x5c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_SPI2_Init+0x5c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_SPI2_Init+0x5c>)
 80007b4:	220a      	movs	r2, #10
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_SPI2_Init+0x5c>)
 80007ba:	f003 ffd3 	bl	8004764 <HAL_SPI_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 80007c4:	f000 f93c 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000154 	.word	0x20000154
 80007d0:	40003800 	.word	0x40003800

080007d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_UART4_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_UART4_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_UART4_Init+0x4c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_UART4_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_UART4_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_UART4_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_UART4_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_UART4_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_UART4_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_UART4_Init+0x4c>)
 800080c:	f004 f833 	bl	8004876 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000816:	f000 f913 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200001ac 	.word	0x200001ac
 8000824:	40004c00 	.word	0x40004c00

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08c      	sub	sp, #48	; 0x30
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
 8000842:	4b79      	ldr	r3, [pc, #484]	; (8000a28 <MX_GPIO_Init+0x200>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a78      	ldr	r2, [pc, #480]	; (8000a28 <MX_GPIO_Init+0x200>)
 8000848:	f043 0310 	orr.w	r3, r3, #16
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b76      	ldr	r3, [pc, #472]	; (8000a28 <MX_GPIO_Init+0x200>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0310 	and.w	r3, r3, #16
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	4b72      	ldr	r3, [pc, #456]	; (8000a28 <MX_GPIO_Init+0x200>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a71      	ldr	r2, [pc, #452]	; (8000a28 <MX_GPIO_Init+0x200>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b6f      	ldr	r3, [pc, #444]	; (8000a28 <MX_GPIO_Init+0x200>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b6b      	ldr	r3, [pc, #428]	; (8000a28 <MX_GPIO_Init+0x200>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a6a      	ldr	r2, [pc, #424]	; (8000a28 <MX_GPIO_Init+0x200>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b68      	ldr	r3, [pc, #416]	; (8000a28 <MX_GPIO_Init+0x200>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b64      	ldr	r3, [pc, #400]	; (8000a28 <MX_GPIO_Init+0x200>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a63      	ldr	r2, [pc, #396]	; (8000a28 <MX_GPIO_Init+0x200>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b61      	ldr	r3, [pc, #388]	; (8000a28 <MX_GPIO_Init+0x200>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b5d      	ldr	r3, [pc, #372]	; (8000a28 <MX_GPIO_Init+0x200>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a5c      	ldr	r2, [pc, #368]	; (8000a28 <MX_GPIO_Init+0x200>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b5a      	ldr	r3, [pc, #360]	; (8000a28 <MX_GPIO_Init+0x200>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b56      	ldr	r3, [pc, #344]	; (8000a28 <MX_GPIO_Init+0x200>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a55      	ldr	r2, [pc, #340]	; (8000a28 <MX_GPIO_Init+0x200>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b53      	ldr	r3, [pc, #332]	; (8000a28 <MX_GPIO_Init+0x200>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|CS_I2C_SPI_Pin|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	210f      	movs	r1, #15
 80008ea:	4850      	ldr	r0, [pc, #320]	; (8000a2c <MX_GPIO_Init+0x204>)
 80008ec:	f000 ff5a 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	f242 0152 	movw	r1, #8274	; 0x2052
 80008f6:	484e      	ldr	r0, [pc, #312]	; (8000a30 <MX_GPIO_Init+0x208>)
 80008f8:	f000 ff54 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2101      	movs	r1, #1
 8000900:	484b      	ldr	r0, [pc, #300]	; (8000a30 <MX_GPIO_Init+0x208>)
 8000902:	f000 ff4f 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800090c:	4849      	ldr	r0, [pc, #292]	; (8000a34 <MX_GPIO_Init+0x20c>)
 800090e:	f000 ff49 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000912:	2200      	movs	r2, #0
 8000914:	f24f 0117 	movw	r1, #61463	; 0xf017
 8000918:	4847      	ldr	r0, [pc, #284]	; (8000a38 <MX_GPIO_Init+0x210>)
 800091a:	f000 ff43 	bl	80017a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2108      	movs	r1, #8
 8000922:	4846      	ldr	r0, [pc, #280]	; (8000a3c <MX_GPIO_Init+0x214>)
 8000924:	f000 ff3e 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 CS_I2C_SPI_Pin PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|CS_I2C_SPI_Pin|GPIO_PIN_0|GPIO_PIN_1;
 8000928:	230f      	movs	r3, #15
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	483b      	ldr	r0, [pc, #236]	; (8000a2c <MX_GPIO_Init+0x204>)
 8000940:	f000 fd94 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 OTG_FS_PowerSwitchOn_Pin PC1 PC4
                           PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_1|GPIO_PIN_4
 8000944:	f242 0353 	movw	r3, #8275	; 0x2053
 8000948:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4834      	ldr	r0, [pc, #208]	; (8000a30 <MX_GPIO_Init+0x208>)
 800095e:	f000 fd85 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8;
 8000962:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	482e      	ldr	r0, [pc, #184]	; (8000a34 <MX_GPIO_Init+0x20c>)
 800097c:	f000 fd76 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin PB4 PB7 */
  GPIO_InitStruct.Pin = BOOT1_Pin|GPIO_PIN_4|GPIO_PIN_7;
 8000980:	2394      	movs	r3, #148	; 0x94
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	482a      	ldr	r0, [pc, #168]	; (8000a3c <MX_GPIO_Init+0x214>)
 8000994:	f000 fd6a 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           PD0 PD1 PD2 Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000998:	f24f 0317 	movw	r3, #61463	; 0xf017
 800099c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4821      	ldr	r0, [pc, #132]	; (8000a38 <MX_GPIO_Init+0x210>)
 80009b2:	f000 fd5b 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4819      	ldr	r0, [pc, #100]	; (8000a30 <MX_GPIO_Init+0x208>)
 80009cc:	f000 fd4e 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4813      	ldr	r0, [pc, #76]	; (8000a34 <MX_GPIO_Init+0x20c>)
 80009e6:	f000 fd41 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ea:	2320      	movs	r3, #32
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	480e      	ldr	r0, [pc, #56]	; (8000a38 <MX_GPIO_Init+0x210>)
 80009fe:	f000 fd35 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a02:	2308      	movs	r3, #8
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4808      	ldr	r0, [pc, #32]	; (8000a3c <MX_GPIO_Init+0x214>)
 8000a1a:	f000 fd27 	bl	800146c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1e:	bf00      	nop
 8000a20:	3730      	adds	r7, #48	; 0x30
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40020800 	.word	0x40020800
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40020c00 	.word	0x40020c00
 8000a3c:	40020400 	.word	0x40020400

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <Error_Handler+0x8>
	...

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	4a0f      	ldr	r2, [pc, #60]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a60:	6453      	str	r3, [r2, #68]	; 0x44
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a8a:	2007      	movs	r0, #7
 8000a8c:	f000 fc3c 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800

08000a9c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <HAL_DAC_MspInit+0x7c>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d127      	bne.n	8000b0e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <HAL_DAC_MspInit+0x80>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a15      	ldr	r2, [pc, #84]	; (8000b1c <HAL_DAC_MspInit+0x80>)
 8000ac8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <HAL_DAC_MspInit+0x80>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_DAC_MspInit+0x80>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_DAC_MspInit+0x80>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_DAC_MspInit+0x80>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000af6:	2310      	movs	r3, #16
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afa:	2303      	movs	r3, #3
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <HAL_DAC_MspInit+0x84>)
 8000b0a:	f000 fcaf 	bl	800146c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40007400 	.word	0x40007400
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000

08000b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <HAL_I2C_MspInit+0x84>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d12c      	bne.n	8000ba0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b62:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b68:	2312      	movs	r3, #18
 8000b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b74:	2304      	movs	r3, #4
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <HAL_I2C_MspInit+0x8c>)
 8000b80:	f000 fc74 	bl	800146c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b92:	6413      	str	r3, [r2, #64]	; 0x40
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40005400 	.word	0x40005400
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020400 	.word	0x40020400

08000bb4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	; 0x38
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a31      	ldr	r2, [pc, #196]	; (8000ca4 <HAL_I2S_MspInit+0xf0>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d15b      	bne.n	8000c9c <HAL_I2S_MspInit+0xe8>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000be4:	2301      	movs	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000be8:	23c0      	movs	r3, #192	; 0xc0
 8000bea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 fc75 	bl	80044e4 <HAL_RCCEx_PeriphCLKConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c00:	f7ff ff1e 	bl	8000a40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	4a26      	ldr	r2, [pc, #152]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c12:	6413      	str	r3, [r2, #64]	; 0x40
 8000c14:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	4a1f      	ldr	r2, [pc, #124]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000c58:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c6a:	2306      	movs	r3, #6
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <HAL_I2S_MspInit+0xf8>)
 8000c76:	f000 fbf9 	bl	800146c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c8c:	2306      	movs	r3, #6
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <HAL_I2S_MspInit+0xfc>)
 8000c98:	f000 fbe8 	bl	800146c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3738      	adds	r7, #56	; 0x38
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40003c00 	.word	0x40003c00
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020800 	.word	0x40020800
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a28      	ldr	r2, [pc, #160]	; (8000d74 <HAL_SPI_MspInit+0xc0>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d14a      	bne.n	8000d6c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <HAL_SPI_MspInit+0xc4>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a26      	ldr	r2, [pc, #152]	; (8000d78 <HAL_SPI_MspInit+0xc4>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce6:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <HAL_SPI_MspInit+0xc4>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <HAL_SPI_MspInit+0xc4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a1f      	ldr	r2, [pc, #124]	; (8000d78 <HAL_SPI_MspInit+0xc4>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <HAL_SPI_MspInit+0xc4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <HAL_SPI_MspInit+0xc4>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a18      	ldr	r2, [pc, #96]	; (8000d78 <HAL_SPI_MspInit+0xc4>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <HAL_SPI_MspInit+0xc4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d2a:	2308      	movs	r3, #8
 8000d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <HAL_SPI_MspInit+0xc8>)
 8000d46:	f000 fb91 	bl	800146c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d4a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d5c:	2305      	movs	r3, #5
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4806      	ldr	r0, [pc, #24]	; (8000d80 <HAL_SPI_MspInit+0xcc>)
 8000d68:	f000 fb80 	bl	800146c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	; 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40003800 	.word	0x40003800
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020800 	.word	0x40020800
 8000d80:	40020400 	.word	0x40020400

08000d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a19      	ldr	r2, [pc, #100]	; (8000e08 <HAL_UART_MspInit+0x84>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d12b      	bne.n	8000dfe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <HAL_UART_MspInit+0x88>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a17      	ldr	r2, [pc, #92]	; (8000e0c <HAL_UART_MspInit+0x88>)
 8000db0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_UART_MspInit+0x88>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_UART_MspInit+0x88>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a10      	ldr	r2, [pc, #64]	; (8000e0c <HAL_UART_MspInit+0x88>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_UART_MspInit+0x88>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dde:	2303      	movs	r3, #3
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000dee:	2308      	movs	r3, #8
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <HAL_UART_MspInit+0x8c>)
 8000dfa:	f000 fb37 	bl	800146c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	; 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40004c00 	.word	0x40004c00
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <NMI_Handler+0x4>

08000e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <MemManage_Handler+0x4>

08000e26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e60:	f000 f93e 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <OTG_FS_IRQHandler+0x10>)
 8000e6e:	f000 ff1d 	bl	8001cac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200005d4 	.word	0x200005d4

08000e7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	e00a      	b.n	8000ea4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e8e:	f3af 8000 	nop.w
 8000e92:	4601      	mov	r1, r0
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	60ba      	str	r2, [r7, #8]
 8000e9a:	b2ca      	uxtb	r2, r1
 8000e9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dbf0      	blt.n	8000e8e <_read+0x12>
  }

  return len;
 8000eac:	687b      	ldr	r3, [r7, #4]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b086      	sub	sp, #24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	60f8      	str	r0, [r7, #12]
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	e009      	b.n	8000edc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	60ba      	str	r2, [r7, #8]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dbf1      	blt.n	8000ec8 <_write+0x12>
  }
  return len;
 8000ee4:	687b      	ldr	r3, [r7, #4]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <_close>:

int _close(int file)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f16:	605a      	str	r2, [r3, #4]
  return 0;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <_isatty>:

int _isatty(int file)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f60:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <_sbrk+0x5c>)
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <_sbrk+0x60>)
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <_sbrk+0x64>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <_sbrk+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d207      	bcs.n	8000f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f88:	f007 fd04 	bl	8008994 <__errno>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	e009      	b.n	8000fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20020000 	.word	0x20020000
 8000fb8:	00000400 	.word	0x00000400
 8000fbc:	200001f0 	.word	0x200001f0
 8000fc0:	20000a28 	.word	0x20000a28

08000fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <SystemInit+0x20>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fce:	4a05      	ldr	r2, [pc, #20]	; (8000fe4 <SystemInit+0x20>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001020 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fee:	490e      	ldr	r1, [pc, #56]	; (8001028 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001004:	4c0b      	ldr	r4, [pc, #44]	; (8001034 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001012:	f7ff ffd7 	bl	8000fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001016:	f007 fcc3 	bl	80089a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101a:	f7ff fa99 	bl	8000550 <main>
  bx  lr    
 800101e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001020:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800102c:	08008d3c 	.word	0x08008d3c
  ldr r2, =_sbss
 8001030:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001034:	20000a24 	.word	0x20000a24

08001038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC_IRQHandler>
	...

0800103c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <HAL_Init+0x40>)
 8001046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800104a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_Init+0x40>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0a      	ldr	r2, [pc, #40]	; (800107c <HAL_Init+0x40>)
 8001052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <HAL_Init+0x40>)
 800105e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f000 f94f 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106a:	2000      	movs	r0, #0
 800106c:	f000 f808 	bl	8001080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001070:	f7ff fcec 	bl	8000a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023c00 	.word	0x40023c00

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x54>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_InitTick+0x58>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001096:	fbb3 f3f1 	udiv	r3, r3, r1
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f967 	bl	8001372 <HAL_SYSTICK_Config>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00e      	b.n	80010cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d80a      	bhi.n	80010ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f000 f92f 	bl	800131e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <HAL_InitTick+0x5c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008
 8001104:	200001f4 	.word	0x200001f4

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	200001f4 	.word	0x200001f4

08001120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff ffee 	bl	8001108 <HAL_GetTick>
 800112c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001138:	d005      	beq.n	8001146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_Delay+0x44>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001146:	bf00      	nop
 8001148:	f7ff ffde 	bl	8001108 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8f7      	bhi.n	8001148 <HAL_Delay+0x28>
  {
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008

08001168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <__NVIC_GetPriorityGrouping+0x18>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0307 	and.w	r3, r3, #7
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db0b      	blt.n	80011f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 021f 	and.w	r2, r3, #31
 80011e4:	4907      	ldr	r1, [pc, #28]	; (8001204 <__NVIC_EnableIRQ+0x38>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	2001      	movs	r0, #1
 80011ee:	fa00 f202 	lsl.w	r2, r0, r2
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e100 	.word	0xe000e100

08001208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	; (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	; (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
         );
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d4:	d301      	bcc.n	80012da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00f      	b.n	80012fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <SysTick_Config+0x40>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e2:	210f      	movs	r1, #15
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f7ff ff8e 	bl	8001208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <SysTick_Config+0x40>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	4b04      	ldr	r3, [pc, #16]	; (8001304 <SysTick_Config+0x40>)
 80012f4:	2207      	movs	r2, #7
 80012f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff29 	bl	8001168 <__NVIC_SetPriorityGrouping>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001330:	f7ff ff3e 	bl	80011b0 <__NVIC_GetPriorityGrouping>
 8001334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff ff8e 	bl	800125c <NVIC_EncodePriority>
 8001340:	4602      	mov	r2, r0
 8001342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff5d 	bl	8001208 <__NVIC_SetPriority>
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff31 	bl	80011cc <__NVIC_EnableIRQ>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffa2 	bl	80012c4 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e014      	b.n	80013c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	791b      	ldrb	r3, [r3, #4]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d105      	bne.n	80013b2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff fb75 	bl	8000a9c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2202      	movs	r2, #2
 80013b6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b087      	sub	sp, #28
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	795b      	ldrb	r3, [r3, #5]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d101      	bne.n	80013e6 <HAL_DAC_ConfigChannel+0x18>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e03c      	b.n	8001460 <HAL_DAC_ConfigChannel+0x92>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2201      	movs	r2, #1
 80013ea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2202      	movs	r2, #2
 80013f0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f003 0310 	and.w	r3, r3, #16
 8001400:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4013      	ands	r3, r2
 800140e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	4313      	orrs	r3, r2
 800142c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6819      	ldr	r1, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	22c0      	movs	r2, #192	; 0xc0
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43da      	mvns	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	400a      	ands	r2, r1
 8001450:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2201      	movs	r2, #1
 8001456:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2200      	movs	r2, #0
 800145c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	371c      	adds	r7, #28
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	e16b      	b.n	8001760 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001488:	2201      	movs	r2, #1
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	f040 815a 	bne.w	800175a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d005      	beq.n	80014be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d130      	bne.n	8001520 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	2203      	movs	r2, #3
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014f4:	2201      	movs	r2, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	091b      	lsrs	r3, r3, #4
 800150a:	f003 0201 	and.w	r2, r3, #1
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b03      	cmp	r3, #3
 800152a:	d017      	beq.n	800155c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d123      	bne.n	80015b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	08da      	lsrs	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3208      	adds	r2, #8
 8001570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	08da      	lsrs	r2, r3, #3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3208      	adds	r2, #8
 80015aa:	69b9      	ldr	r1, [r7, #24]
 80015ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0203 	and.w	r2, r3, #3
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80b4 	beq.w	800175a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b60      	ldr	r3, [pc, #384]	; (8001778 <HAL_GPIO_Init+0x30c>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	4a5f      	ldr	r2, [pc, #380]	; (8001778 <HAL_GPIO_Init+0x30c>)
 80015fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001600:	6453      	str	r3, [r2, #68]	; 0x44
 8001602:	4b5d      	ldr	r3, [pc, #372]	; (8001778 <HAL_GPIO_Init+0x30c>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800160e:	4a5b      	ldr	r2, [pc, #364]	; (800177c <HAL_GPIO_Init+0x310>)
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	3302      	adds	r3, #2
 8001616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	220f      	movs	r2, #15
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a52      	ldr	r2, [pc, #328]	; (8001780 <HAL_GPIO_Init+0x314>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d02b      	beq.n	8001692 <HAL_GPIO_Init+0x226>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a51      	ldr	r2, [pc, #324]	; (8001784 <HAL_GPIO_Init+0x318>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d025      	beq.n	800168e <HAL_GPIO_Init+0x222>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a50      	ldr	r2, [pc, #320]	; (8001788 <HAL_GPIO_Init+0x31c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d01f      	beq.n	800168a <HAL_GPIO_Init+0x21e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4f      	ldr	r2, [pc, #316]	; (800178c <HAL_GPIO_Init+0x320>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d019      	beq.n	8001686 <HAL_GPIO_Init+0x21a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4e      	ldr	r2, [pc, #312]	; (8001790 <HAL_GPIO_Init+0x324>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d013      	beq.n	8001682 <HAL_GPIO_Init+0x216>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a4d      	ldr	r2, [pc, #308]	; (8001794 <HAL_GPIO_Init+0x328>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d00d      	beq.n	800167e <HAL_GPIO_Init+0x212>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a4c      	ldr	r2, [pc, #304]	; (8001798 <HAL_GPIO_Init+0x32c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d007      	beq.n	800167a <HAL_GPIO_Init+0x20e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4b      	ldr	r2, [pc, #300]	; (800179c <HAL_GPIO_Init+0x330>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d101      	bne.n	8001676 <HAL_GPIO_Init+0x20a>
 8001672:	2307      	movs	r3, #7
 8001674:	e00e      	b.n	8001694 <HAL_GPIO_Init+0x228>
 8001676:	2308      	movs	r3, #8
 8001678:	e00c      	b.n	8001694 <HAL_GPIO_Init+0x228>
 800167a:	2306      	movs	r3, #6
 800167c:	e00a      	b.n	8001694 <HAL_GPIO_Init+0x228>
 800167e:	2305      	movs	r3, #5
 8001680:	e008      	b.n	8001694 <HAL_GPIO_Init+0x228>
 8001682:	2304      	movs	r3, #4
 8001684:	e006      	b.n	8001694 <HAL_GPIO_Init+0x228>
 8001686:	2303      	movs	r3, #3
 8001688:	e004      	b.n	8001694 <HAL_GPIO_Init+0x228>
 800168a:	2302      	movs	r3, #2
 800168c:	e002      	b.n	8001694 <HAL_GPIO_Init+0x228>
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <HAL_GPIO_Init+0x228>
 8001692:	2300      	movs	r3, #0
 8001694:	69fa      	ldr	r2, [r7, #28]
 8001696:	f002 0203 	and.w	r2, r2, #3
 800169a:	0092      	lsls	r2, r2, #2
 800169c:	4093      	lsls	r3, r2
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016a4:	4935      	ldr	r1, [pc, #212]	; (800177c <HAL_GPIO_Init+0x310>)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	3302      	adds	r3, #2
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016b2:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <HAL_GPIO_Init+0x334>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016d6:	4a32      	ldr	r2, [pc, #200]	; (80017a0 <HAL_GPIO_Init+0x334>)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016dc:	4b30      	ldr	r3, [pc, #192]	; (80017a0 <HAL_GPIO_Init+0x334>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001700:	4a27      	ldr	r2, [pc, #156]	; (80017a0 <HAL_GPIO_Init+0x334>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001706:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <HAL_GPIO_Init+0x334>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800172a:	4a1d      	ldr	r2, [pc, #116]	; (80017a0 <HAL_GPIO_Init+0x334>)
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_GPIO_Init+0x334>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001754:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <HAL_GPIO_Init+0x334>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3301      	adds	r3, #1
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	2b0f      	cmp	r3, #15
 8001764:	f67f ae90 	bls.w	8001488 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3724      	adds	r7, #36	; 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	40013800 	.word	0x40013800
 8001780:	40020000 	.word	0x40020000
 8001784:	40020400 	.word	0x40020400
 8001788:	40020800 	.word	0x40020800
 800178c:	40020c00 	.word	0x40020c00
 8001790:	40021000 	.word	0x40021000
 8001794:	40021400 	.word	0x40021400
 8001798:	40021800 	.word	0x40021800
 800179c:	40021c00 	.word	0x40021c00
 80017a0:	40013c00 	.word	0x40013c00

080017a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
 80017b0:	4613      	mov	r3, r2
 80017b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b4:	787b      	ldrb	r3, [r7, #1]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017c0:	e003      	b.n	80017ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	041a      	lsls	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	619a      	str	r2, [r3, #24]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80017d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d8:	b08f      	sub	sp, #60	; 0x3c
 80017da:	af0a      	add	r7, sp, #40	; 0x28
 80017dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e054      	b.n	8001892 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d106      	bne.n	8001808 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f006 fb2c 	bl	8007e60 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2203      	movs	r2, #3
 800180c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f003 fb58 	bl	8004edc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	687e      	ldr	r6, [r7, #4]
 8001834:	466d      	mov	r5, sp
 8001836:	f106 0410 	add.w	r4, r6, #16
 800183a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001842:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001846:	e885 0003 	stmia.w	r5, {r0, r1}
 800184a:	1d33      	adds	r3, r6, #4
 800184c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184e:	6838      	ldr	r0, [r7, #0]
 8001850:	f003 fad2 	bl	8004df8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2101      	movs	r1, #1
 800185a:	4618      	mov	r0, r3
 800185c:	f003 fb4f 	bl	8004efe <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	687e      	ldr	r6, [r7, #4]
 8001868:	466d      	mov	r5, sp
 800186a:	f106 0410 	add.w	r4, r6, #16
 800186e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001876:	e894 0003 	ldmia.w	r4, {r0, r1}
 800187a:	e885 0003 	stmia.w	r5, {r0, r1}
 800187e:	1d33      	adds	r3, r6, #4
 8001880:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001882:	6838      	ldr	r0, [r7, #0]
 8001884:	f003 fcd8 	bl	8005238 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800189a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800189a:	b590      	push	{r4, r7, lr}
 800189c:	b089      	sub	sp, #36	; 0x24
 800189e:	af04      	add	r7, sp, #16
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	4608      	mov	r0, r1
 80018a4:	4611      	mov	r1, r2
 80018a6:	461a      	mov	r2, r3
 80018a8:	4603      	mov	r3, r0
 80018aa:	70fb      	strb	r3, [r7, #3]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70bb      	strb	r3, [r7, #2]
 80018b0:	4613      	mov	r3, r2
 80018b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d101      	bne.n	80018c2 <HAL_HCD_HC_Init+0x28>
 80018be:	2302      	movs	r3, #2
 80018c0:	e076      	b.n	80019b0 <HAL_HCD_HC_Init+0x116>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	212c      	movs	r1, #44	; 0x2c
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	333d      	adds	r3, #61	; 0x3d
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	212c      	movs	r1, #44	; 0x2c
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	3338      	adds	r3, #56	; 0x38
 80018ea:	787a      	ldrb	r2, [r7, #1]
 80018ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	212c      	movs	r1, #44	; 0x2c
 80018f4:	fb01 f303 	mul.w	r3, r1, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	3340      	adds	r3, #64	; 0x40
 80018fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80018fe:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	212c      	movs	r1, #44	; 0x2c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	3339      	adds	r3, #57	; 0x39
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	212c      	movs	r1, #44	; 0x2c
 8001918:	fb01 f303 	mul.w	r3, r1, r3
 800191c:	4413      	add	r3, r2
 800191e:	333f      	adds	r3, #63	; 0x3f
 8001920:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001924:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	78ba      	ldrb	r2, [r7, #2]
 800192a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800192e:	b2d0      	uxtb	r0, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	212c      	movs	r1, #44	; 0x2c
 8001934:	fb01 f303 	mul.w	r3, r1, r3
 8001938:	4413      	add	r3, r2
 800193a:	333a      	adds	r3, #58	; 0x3a
 800193c:	4602      	mov	r2, r0
 800193e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001940:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001944:	2b00      	cmp	r3, #0
 8001946:	da09      	bge.n	800195c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	212c      	movs	r1, #44	; 0x2c
 800194e:	fb01 f303 	mul.w	r3, r1, r3
 8001952:	4413      	add	r3, r2
 8001954:	333b      	adds	r3, #59	; 0x3b
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	e008      	b.n	800196e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	212c      	movs	r1, #44	; 0x2c
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	4413      	add	r3, r2
 8001968:	333b      	adds	r3, #59	; 0x3b
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	212c      	movs	r1, #44	; 0x2c
 8001974:	fb01 f303 	mul.w	r3, r1, r3
 8001978:	4413      	add	r3, r2
 800197a:	333c      	adds	r3, #60	; 0x3c
 800197c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001980:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	787c      	ldrb	r4, [r7, #1]
 8001988:	78ba      	ldrb	r2, [r7, #2]
 800198a:	78f9      	ldrb	r1, [r7, #3]
 800198c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	f897 3020 	ldrb.w	r3, [r7, #32]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	4623      	mov	r3, r4
 800199e:	f003 fdd1 	bl	8005544 <USB_HC_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd90      	pop	{r4, r7, pc}

080019b8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_HCD_HC_Halt+0x1e>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e00f      	b.n	80019f6 <HAL_HCD_HC_Halt+0x3e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	78fa      	ldrb	r2, [r7, #3]
 80019e4:	4611      	mov	r1, r2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f004 f821 	bl	8005a2e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	4608      	mov	r0, r1
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4603      	mov	r3, r0
 8001a10:	70fb      	strb	r3, [r7, #3]
 8001a12:	460b      	mov	r3, r1
 8001a14:	70bb      	strb	r3, [r7, #2]
 8001a16:	4613      	mov	r3, r2
 8001a18:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	212c      	movs	r1, #44	; 0x2c
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	333b      	adds	r3, #59	; 0x3b
 8001a28:	78ba      	ldrb	r2, [r7, #2]
 8001a2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	212c      	movs	r1, #44	; 0x2c
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	333f      	adds	r3, #63	; 0x3f
 8001a3a:	787a      	ldrb	r2, [r7, #1]
 8001a3c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a3e:	7c3b      	ldrb	r3, [r7, #16]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d112      	bne.n	8001a6a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	212c      	movs	r1, #44	; 0x2c
 8001a4a:	fb01 f303 	mul.w	r3, r1, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	3342      	adds	r3, #66	; 0x42
 8001a52:	2203      	movs	r2, #3
 8001a54:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	212c      	movs	r1, #44	; 0x2c
 8001a5c:	fb01 f303 	mul.w	r3, r1, r3
 8001a60:	4413      	add	r3, r2
 8001a62:	333d      	adds	r3, #61	; 0x3d
 8001a64:	7f3a      	ldrb	r2, [r7, #28]
 8001a66:	701a      	strb	r2, [r3, #0]
 8001a68:	e008      	b.n	8001a7c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	212c      	movs	r1, #44	; 0x2c
 8001a70:	fb01 f303 	mul.w	r3, r1, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	3342      	adds	r3, #66	; 0x42
 8001a78:	2202      	movs	r2, #2
 8001a7a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a7c:	787b      	ldrb	r3, [r7, #1]
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	f200 80c6 	bhi.w	8001c10 <HAL_HCD_HC_SubmitRequest+0x210>
 8001a84:	a201      	add	r2, pc, #4	; (adr r2, 8001a8c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8a:	bf00      	nop
 8001a8c:	08001a9d 	.word	0x08001a9d
 8001a90:	08001bfd 	.word	0x08001bfd
 8001a94:	08001b01 	.word	0x08001b01
 8001a98:	08001b7f 	.word	0x08001b7f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a9c:	7c3b      	ldrb	r3, [r7, #16]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	f040 80b8 	bne.w	8001c14 <HAL_HCD_HC_SubmitRequest+0x214>
 8001aa4:	78bb      	ldrb	r3, [r7, #2]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f040 80b4 	bne.w	8001c14 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001aac:	8b3b      	ldrh	r3, [r7, #24]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d108      	bne.n	8001ac4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	212c      	movs	r1, #44	; 0x2c
 8001ab8:	fb01 f303 	mul.w	r3, r1, r3
 8001abc:	4413      	add	r3, r2
 8001abe:	3355      	adds	r3, #85	; 0x55
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	212c      	movs	r1, #44	; 0x2c
 8001aca:	fb01 f303 	mul.w	r3, r1, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	3355      	adds	r3, #85	; 0x55
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	212c      	movs	r1, #44	; 0x2c
 8001ade:	fb01 f303 	mul.w	r3, r1, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3342      	adds	r3, #66	; 0x42
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001aea:	e093      	b.n	8001c14 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	212c      	movs	r1, #44	; 0x2c
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	3342      	adds	r3, #66	; 0x42
 8001afa:	2202      	movs	r2, #2
 8001afc:	701a      	strb	r2, [r3, #0]
      break;
 8001afe:	e089      	b.n	8001c14 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b00:	78bb      	ldrb	r3, [r7, #2]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d11d      	bne.n	8001b42 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	212c      	movs	r1, #44	; 0x2c
 8001b0c:	fb01 f303 	mul.w	r3, r1, r3
 8001b10:	4413      	add	r3, r2
 8001b12:	3355      	adds	r3, #85	; 0x55
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	212c      	movs	r1, #44	; 0x2c
 8001b20:	fb01 f303 	mul.w	r3, r1, r3
 8001b24:	4413      	add	r3, r2
 8001b26:	3342      	adds	r3, #66	; 0x42
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b2c:	e073      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b2e:	78fb      	ldrb	r3, [r7, #3]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	212c      	movs	r1, #44	; 0x2c
 8001b34:	fb01 f303 	mul.w	r3, r1, r3
 8001b38:	4413      	add	r3, r2
 8001b3a:	3342      	adds	r3, #66	; 0x42
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	701a      	strb	r2, [r3, #0]
      break;
 8001b40:	e069      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	212c      	movs	r1, #44	; 0x2c
 8001b48:	fb01 f303 	mul.w	r3, r1, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3354      	adds	r3, #84	; 0x54
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d109      	bne.n	8001b6a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	212c      	movs	r1, #44	; 0x2c
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	4413      	add	r3, r2
 8001b62:	3342      	adds	r3, #66	; 0x42
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
      break;
 8001b68:	e055      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	212c      	movs	r1, #44	; 0x2c
 8001b70:	fb01 f303 	mul.w	r3, r1, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	3342      	adds	r3, #66	; 0x42
 8001b78:	2202      	movs	r2, #2
 8001b7a:	701a      	strb	r2, [r3, #0]
      break;
 8001b7c:	e04b      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b7e:	78bb      	ldrb	r3, [r7, #2]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d11d      	bne.n	8001bc0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	212c      	movs	r1, #44	; 0x2c
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	3355      	adds	r3, #85	; 0x55
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d109      	bne.n	8001bac <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	212c      	movs	r1, #44	; 0x2c
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3342      	adds	r3, #66	; 0x42
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001baa:	e034      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	212c      	movs	r1, #44	; 0x2c
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3342      	adds	r3, #66	; 0x42
 8001bba:	2202      	movs	r2, #2
 8001bbc:	701a      	strb	r2, [r3, #0]
      break;
 8001bbe:	e02a      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3354      	adds	r3, #84	; 0x54
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d109      	bne.n	8001be8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	212c      	movs	r1, #44	; 0x2c
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	3342      	adds	r3, #66	; 0x42
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
      break;
 8001be6:	e016      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	212c      	movs	r1, #44	; 0x2c
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3342      	adds	r3, #66	; 0x42
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	701a      	strb	r2, [r3, #0]
      break;
 8001bfa:	e00c      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	212c      	movs	r1, #44	; 0x2c
 8001c02:	fb01 f303 	mul.w	r3, r1, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	3342      	adds	r3, #66	; 0x42
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
      break;
 8001c0e:	e002      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001c10:	bf00      	nop
 8001c12:	e000      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001c14:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	212c      	movs	r1, #44	; 0x2c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	3344      	adds	r3, #68	; 0x44
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	8b3a      	ldrh	r2, [r7, #24]
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	202c      	movs	r0, #44	; 0x2c
 8001c30:	fb00 f303 	mul.w	r3, r0, r3
 8001c34:	440b      	add	r3, r1
 8001c36:	334c      	adds	r3, #76	; 0x4c
 8001c38:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	212c      	movs	r1, #44	; 0x2c
 8001c40:	fb01 f303 	mul.w	r3, r1, r3
 8001c44:	4413      	add	r3, r2
 8001c46:	3360      	adds	r3, #96	; 0x60
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	212c      	movs	r1, #44	; 0x2c
 8001c52:	fb01 f303 	mul.w	r3, r1, r3
 8001c56:	4413      	add	r3, r2
 8001c58:	3350      	adds	r3, #80	; 0x50
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	212c      	movs	r1, #44	; 0x2c
 8001c64:	fb01 f303 	mul.w	r3, r1, r3
 8001c68:	4413      	add	r3, r2
 8001c6a:	3339      	adds	r3, #57	; 0x39
 8001c6c:	78fa      	ldrb	r2, [r7, #3]
 8001c6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	212c      	movs	r1, #44	; 0x2c
 8001c76:	fb01 f303 	mul.w	r3, r1, r3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3361      	adds	r3, #97	; 0x61
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	222c      	movs	r2, #44	; 0x2c
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	3338      	adds	r3, #56	; 0x38
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	18d1      	adds	r1, r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	f003 fd74 	bl	8005788 <USB_HC_StartXfer>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop

08001cac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f003 fa75 	bl	80051b2 <USB_GetMode>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	f040 80f6 	bne.w	8001ebc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 fa59 	bl	800518c <USB_ReadInterrupts>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80ec 	beq.w	8001eba <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f003 fa50 	bl	800518c <USB_ReadInterrupts>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cf6:	d104      	bne.n	8001d02 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 fa40 	bl	800518c <USB_ReadInterrupts>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d16:	d104      	bne.n	8001d22 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 fa30 	bl	800518c <USB_ReadInterrupts>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d36:	d104      	bne.n	8001d42 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 fa20 	bl	800518c <USB_ReadInterrupts>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d103      	bne.n	8001d5e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 fa12 	bl	800518c <USB_ReadInterrupts>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d72:	d11c      	bne.n	8001dae <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d7c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10f      	bne.n	8001dae <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d8e:	2110      	movs	r1, #16
 8001d90:	6938      	ldr	r0, [r7, #16]
 8001d92:	f003 f901 	bl	8004f98 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d96:	6938      	ldr	r0, [r7, #16]
 8001d98:	f003 f932 	bl	8005000 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2101      	movs	r1, #1
 8001da2:	4618      	mov	r0, r3
 8001da4:	f003 fb08 	bl	80053b8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f006 f8c9 	bl	8007f40 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 f9ea 	bl	800518c <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc2:	d102      	bne.n	8001dca <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f001 f89e 	bl	8002f06 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f003 f9dc 	bl	800518c <USB_ReadInterrupts>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d106      	bne.n	8001dec <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f006 f892 	bl	8007f08 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2208      	movs	r2, #8
 8001dea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f003 f9cb 	bl	800518c <USB_ReadInterrupts>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b10      	cmp	r3, #16
 8001dfe:	d101      	bne.n	8001e04 <HAL_HCD_IRQHandler+0x158>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_HCD_IRQHandler+0x15a>
 8001e04:	2300      	movs	r3, #0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d012      	beq.n	8001e30 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699a      	ldr	r2, [r3, #24]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0210 	bic.w	r2, r2, #16
 8001e18:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 ffa1 	bl	8002d62 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0210 	orr.w	r2, r2, #16
 8001e2e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 f9a9 	bl	800518c <USB_ReadInterrupts>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e44:	d13a      	bne.n	8001ebc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 fdde 	bl	8005a0c <USB_HC_ReadInterrupt>
 8001e50:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	e025      	b.n	8001ea4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d018      	beq.n	8001e9e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e82:	d106      	bne.n	8001e92 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	4619      	mov	r1, r3
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8ab 	bl	8001fe6 <HCD_HC_IN_IRQHandler>
 8001e90:	e005      	b.n	8001e9e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	4619      	mov	r1, r3
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fbf9 	bl	8002690 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d3d4      	bcc.n	8001e58 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb6:	615a      	str	r2, [r3, #20]
 8001eb8:	e000      	b.n	8001ebc <HAL_HCD_IRQHandler+0x210>
      return;
 8001eba:	bf00      	nop
    }
  }
}
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_HCD_Start+0x16>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e013      	b.n	8001f00 <HAL_HCD_Start+0x3e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 faca 	bl	8005480 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f002 ffe2 	bl	8004eba <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_HCD_Stop+0x16>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e00d      	b.n	8001f3a <HAL_HCD_Stop+0x32>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 feb8 	bl	8005ca0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 fa6c 	bl	800542c <USB_ResetPort>
 8001f54:	4603      	mov	r3, r0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	212c      	movs	r1, #44	; 0x2c
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	3360      	adds	r3, #96	; 0x60
 8001f78:	781b      	ldrb	r3, [r3, #0]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3350      	adds	r3, #80	; 0x50
 8001fa0:	681b      	ldr	r3, [r3, #0]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f003 fab0 	bl	8005520 <USB_GetCurrentFrame>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f003 fa8b 	bl	80054f2 <USB_GetHostSpeed>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b04      	cmp	r3, #4
 8002014:	d11a      	bne.n	800204c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4413      	add	r3, r2
 800201e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002022:	461a      	mov	r2, r3
 8002024:	2304      	movs	r3, #4
 8002026:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	4413      	add	r3, r2
 8002034:	3361      	adds	r3, #97	; 0x61
 8002036:	2206      	movs	r2, #6
 8002038:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f003 fcf2 	bl	8005a2e <USB_HC_Halt>
 800204a:	e0af      	b.n	80021ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	015a      	lsls	r2, r3, #5
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4413      	add	r3, r2
 8002054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002062:	d11b      	bne.n	800209c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002070:	461a      	mov	r2, r3
 8002072:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002076:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	3361      	adds	r3, #97	; 0x61
 8002086:	2207      	movs	r2, #7
 8002088:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f003 fcca 	bl	8005a2e <USB_HC_Halt>
 800209a:	e087      	b.n	80021ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	2b20      	cmp	r3, #32
 80020b0:	d109      	bne.n	80020c6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020be:	461a      	mov	r2, r3
 80020c0:	2320      	movs	r3, #32
 80020c2:	6093      	str	r3, [r2, #8]
 80020c4:	e072      	b.n	80021ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d11a      	bne.n	8002112 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e8:	461a      	mov	r2, r3
 80020ea:	2308      	movs	r3, #8
 80020ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	212c      	movs	r1, #44	; 0x2c
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	3361      	adds	r3, #97	; 0x61
 80020fc:	2205      	movs	r2, #5
 80020fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f003 fc8f 	bl	8005a2e <USB_HC_Halt>
 8002110:	e04c      	b.n	80021ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002128:	d11b      	bne.n	8002162 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002136:	461a      	mov	r2, r3
 8002138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800213c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	212c      	movs	r1, #44	; 0x2c
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	3361      	adds	r3, #97	; 0x61
 800214c:	2208      	movs	r2, #8
 800214e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f003 fc67 	bl	8005a2e <USB_HC_Halt>
 8002160:	e024      	b.n	80021ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4413      	add	r3, r2
 800216a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002174:	2b80      	cmp	r3, #128	; 0x80
 8002176:	d119      	bne.n	80021ac <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002184:	461a      	mov	r2, r3
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	212c      	movs	r1, #44	; 0x2c
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	4413      	add	r3, r2
 8002196:	3361      	adds	r3, #97	; 0x61
 8002198:	2206      	movs	r2, #6
 800219a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	4611      	mov	r1, r2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f003 fc41 	bl	8005a2e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c2:	d112      	bne.n	80021ea <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f003 fc2d 	bl	8005a2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e0:	461a      	mov	r2, r3
 80021e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80021e8:	e24e      	b.n	8002688 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	f040 80df 	bne.w	80023c0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d019      	beq.n	800223e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	3348      	adds	r3, #72	; 0x48
 8002218:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	0159      	lsls	r1, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	440b      	add	r3, r1
 8002222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800222c:	1ad2      	subs	r2, r2, r3
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	202c      	movs	r0, #44	; 0x2c
 8002234:	fb00 f303 	mul.w	r3, r0, r3
 8002238:	440b      	add	r3, r1
 800223a:	3350      	adds	r3, #80	; 0x50
 800223c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	3361      	adds	r3, #97	; 0x61
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	335c      	adds	r3, #92	; 0x5c
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	461a      	mov	r2, r3
 8002270:	2301      	movs	r3, #1
 8002272:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	333f      	adds	r3, #63	; 0x3f
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d009      	beq.n	800229c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	333f      	adds	r3, #63	; 0x3f
 8002296:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002298:	2b02      	cmp	r3, #2
 800229a:	d111      	bne.n	80022c0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f003 fbc1 	bl	8005a2e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	015a      	lsls	r2, r3, #5
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b8:	461a      	mov	r2, r3
 80022ba:	2310      	movs	r3, #16
 80022bc:	6093      	str	r3, [r2, #8]
 80022be:	e03a      	b.n	8002336 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	212c      	movs	r1, #44	; 0x2c
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	333f      	adds	r3, #63	; 0x3f
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d009      	beq.n	80022e8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	212c      	movs	r1, #44	; 0x2c
 80022da:	fb01 f303 	mul.w	r3, r1, r3
 80022de:	4413      	add	r3, r2
 80022e0:	333f      	adds	r3, #63	; 0x3f
 80022e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d126      	bne.n	8002336 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	0151      	lsls	r1, r2, #5
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	440a      	add	r2, r1
 80022fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002302:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002306:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	3360      	adds	r3, #96	; 0x60
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	b2d9      	uxtb	r1, r3
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	202c      	movs	r0, #44	; 0x2c
 8002324:	fb00 f303 	mul.w	r3, r0, r3
 8002328:	4413      	add	r3, r2
 800232a:	3360      	adds	r3, #96	; 0x60
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f005 fe13 	bl	8007f5c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d12b      	bne.n	8002396 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	212c      	movs	r1, #44	; 0x2c
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	4413      	add	r3, r2
 800234a:	3348      	adds	r3, #72	; 0x48
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	202c      	movs	r0, #44	; 0x2c
 8002354:	fb00 f202 	mul.w	r2, r0, r2
 8002358:	440a      	add	r2, r1
 800235a:	3240      	adds	r2, #64	; 0x40
 800235c:	8812      	ldrh	r2, [r2, #0]
 800235e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 818e 	beq.w	8002688 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	212c      	movs	r1, #44	; 0x2c
 8002372:	fb01 f303 	mul.w	r3, r1, r3
 8002376:	4413      	add	r3, r2
 8002378:	3354      	adds	r3, #84	; 0x54
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	f083 0301 	eor.w	r3, r3, #1
 8002380:	b2d8      	uxtb	r0, r3
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	3354      	adds	r3, #84	; 0x54
 8002390:	4602      	mov	r2, r0
 8002392:	701a      	strb	r2, [r3, #0]
}
 8002394:	e178      	b.n	8002688 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	212c      	movs	r1, #44	; 0x2c
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	3354      	adds	r3, #84	; 0x54
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	f083 0301 	eor.w	r3, r3, #1
 80023aa:	b2d8      	uxtb	r0, r3
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	212c      	movs	r1, #44	; 0x2c
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	3354      	adds	r3, #84	; 0x54
 80023ba:	4602      	mov	r2, r0
 80023bc:	701a      	strb	r2, [r3, #0]
}
 80023be:	e163      	b.n	8002688 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	f040 80f6 	bne.w	80025c4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	3361      	adds	r3, #97	; 0x61
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d109      	bne.n	8002400 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	212c      	movs	r1, #44	; 0x2c
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	3360      	adds	r3, #96	; 0x60
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
 80023fe:	e0c9      	b.n	8002594 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	212c      	movs	r1, #44	; 0x2c
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	4413      	add	r3, r2
 800240c:	3361      	adds	r3, #97	; 0x61
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b05      	cmp	r3, #5
 8002412:	d109      	bne.n	8002428 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	212c      	movs	r1, #44	; 0x2c
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	4413      	add	r3, r2
 8002420:	3360      	adds	r3, #96	; 0x60
 8002422:	2205      	movs	r2, #5
 8002424:	701a      	strb	r2, [r3, #0]
 8002426:	e0b5      	b.n	8002594 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	212c      	movs	r1, #44	; 0x2c
 800242e:	fb01 f303 	mul.w	r3, r1, r3
 8002432:	4413      	add	r3, r2
 8002434:	3361      	adds	r3, #97	; 0x61
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b06      	cmp	r3, #6
 800243a:	d009      	beq.n	8002450 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	212c      	movs	r1, #44	; 0x2c
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	4413      	add	r3, r2
 8002448:	3361      	adds	r3, #97	; 0x61
 800244a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800244c:	2b08      	cmp	r3, #8
 800244e:	d150      	bne.n	80024f2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	212c      	movs	r1, #44	; 0x2c
 8002456:	fb01 f303 	mul.w	r3, r1, r3
 800245a:	4413      	add	r3, r2
 800245c:	335c      	adds	r3, #92	; 0x5c
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	202c      	movs	r0, #44	; 0x2c
 8002468:	fb00 f303 	mul.w	r3, r0, r3
 800246c:	440b      	add	r3, r1
 800246e:	335c      	adds	r3, #92	; 0x5c
 8002470:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	212c      	movs	r1, #44	; 0x2c
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	335c      	adds	r3, #92	; 0x5c
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d912      	bls.n	80024ac <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	335c      	adds	r3, #92	; 0x5c
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	212c      	movs	r1, #44	; 0x2c
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	3360      	adds	r3, #96	; 0x60
 80024a6:	2204      	movs	r2, #4
 80024a8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024aa:	e073      	b.n	8002594 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	212c      	movs	r1, #44	; 0x2c
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	3360      	adds	r3, #96	; 0x60
 80024ba:	2202      	movs	r2, #2
 80024bc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024d4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024dc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ea:	461a      	mov	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024f0:	e050      	b.n	8002594 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	212c      	movs	r1, #44	; 0x2c
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	4413      	add	r3, r2
 80024fe:	3361      	adds	r3, #97	; 0x61
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b03      	cmp	r3, #3
 8002504:	d122      	bne.n	800254c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	3360      	adds	r3, #96	; 0x60
 8002514:	2202      	movs	r2, #2
 8002516:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4413      	add	r3, r2
 8002520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800252e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002536:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002544:	461a      	mov	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	e023      	b.n	8002594 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	212c      	movs	r1, #44	; 0x2c
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4413      	add	r3, r2
 8002558:	3361      	adds	r3, #97	; 0x61
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b07      	cmp	r3, #7
 800255e:	d119      	bne.n	8002594 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	335c      	adds	r3, #92	; 0x5c
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	202c      	movs	r0, #44	; 0x2c
 8002578:	fb00 f303 	mul.w	r3, r0, r3
 800257c:	440b      	add	r3, r1
 800257e:	335c      	adds	r3, #92	; 0x5c
 8002580:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	212c      	movs	r1, #44	; 0x2c
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4413      	add	r3, r2
 800258e:	3360      	adds	r3, #96	; 0x60
 8002590:	2204      	movs	r2, #4
 8002592:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4413      	add	r3, r2
 800259c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a0:	461a      	mov	r2, r3
 80025a2:	2302      	movs	r3, #2
 80025a4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	b2d9      	uxtb	r1, r3
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	202c      	movs	r0, #44	; 0x2c
 80025b0:	fb00 f303 	mul.w	r3, r0, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	3360      	adds	r3, #96	; 0x60
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f005 fccd 	bl	8007f5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80025c2:	e061      	b.n	8002688 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d156      	bne.n	8002688 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	333f      	adds	r3, #63	; 0x3f
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d111      	bne.n	8002612 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	335c      	adds	r3, #92	; 0x5c
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	4611      	mov	r1, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f003 fa0f 	bl	8005a2e <USB_HC_Halt>
 8002610:	e031      	b.n	8002676 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	212c      	movs	r1, #44	; 0x2c
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	4413      	add	r3, r2
 800261e:	333f      	adds	r3, #63	; 0x3f
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	333f      	adds	r3, #63	; 0x3f
 8002634:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002636:	2b02      	cmp	r3, #2
 8002638:	d11d      	bne.n	8002676 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	212c      	movs	r1, #44	; 0x2c
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4413      	add	r3, r2
 8002646:	335c      	adds	r3, #92	; 0x5c
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d110      	bne.n	8002676 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	3361      	adds	r3, #97	; 0x61
 8002662:	2203      	movs	r2, #3
 8002664:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f003 f9dc 	bl	8005a2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002682:	461a      	mov	r2, r3
 8002684:	2310      	movs	r3, #16
 8002686:	6093      	str	r3, [r2, #8]
}
 8002688:	bf00      	nop
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d11a      	bne.n	80026f6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026cc:	461a      	mov	r2, r3
 80026ce:	2304      	movs	r3, #4
 80026d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	3361      	adds	r3, #97	; 0x61
 80026e0:	2206      	movs	r2, #6
 80026e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f003 f99d 	bl	8005a2e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80026f4:	e331      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	015a      	lsls	r2, r3, #5
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	4413      	add	r3, r2
 80026fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b20      	cmp	r3, #32
 800270a:	d12e      	bne.n	800276a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	4413      	add	r3, r2
 8002714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002718:	461a      	mov	r2, r3
 800271a:	2320      	movs	r3, #32
 800271c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	333d      	adds	r3, #61	; 0x3d
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b01      	cmp	r3, #1
 8002730:	f040 8313 	bne.w	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	333d      	adds	r3, #61	; 0x3d
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	3360      	adds	r3, #96	; 0x60
 8002754:	2202      	movs	r2, #2
 8002756:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f003 f963 	bl	8005a2e <USB_HC_Halt>
}
 8002768:	e2f7      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	4413      	add	r3, r2
 8002772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800277c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002780:	d112      	bne.n	80027a8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	4413      	add	r3, r2
 800278a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278e:	461a      	mov	r2, r3
 8002790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002794:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	4611      	mov	r1, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f003 f944 	bl	8005a2e <USB_HC_Halt>
}
 80027a6:	e2d8      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d140      	bne.n	8002840 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	335c      	adds	r3, #92	; 0x5c
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e2:	2b40      	cmp	r3, #64	; 0x40
 80027e4:	d111      	bne.n	800280a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	333d      	adds	r3, #61	; 0x3d
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002804:	461a      	mov	r2, r3
 8002806:	2340      	movs	r3, #64	; 0x40
 8002808:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	4413      	add	r3, r2
 8002812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002816:	461a      	mov	r2, r3
 8002818:	2301      	movs	r3, #1
 800281a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	3361      	adds	r3, #97	; 0x61
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f003 f8f8 	bl	8005a2e <USB_HC_Halt>
}
 800283e:	e28c      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002852:	2b40      	cmp	r3, #64	; 0x40
 8002854:	d12c      	bne.n	80028b0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	3361      	adds	r3, #97	; 0x61
 8002864:	2204      	movs	r2, #4
 8002866:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	333d      	adds	r3, #61	; 0x3d
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	212c      	movs	r1, #44	; 0x2c
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	4413      	add	r3, r2
 8002886:	335c      	adds	r3, #92	; 0x5c
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f003 f8c9 	bl	8005a2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	461a      	mov	r2, r3
 80028aa:	2340      	movs	r3, #64	; 0x40
 80028ac:	6093      	str	r3, [r2, #8]
}
 80028ae:	e254      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d11a      	bne.n	80028fc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d2:	461a      	mov	r2, r3
 80028d4:	2308      	movs	r3, #8
 80028d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3361      	adds	r3, #97	; 0x61
 80028e6:	2205      	movs	r2, #5
 80028e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f003 f89a 	bl	8005a2e <USB_HC_Halt>
}
 80028fa:	e22e      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	2b10      	cmp	r3, #16
 8002910:	d140      	bne.n	8002994 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	335c      	adds	r3, #92	; 0x5c
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	3361      	adds	r3, #97	; 0x61
 8002932:	2203      	movs	r2, #3
 8002934:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	212c      	movs	r1, #44	; 0x2c
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	333d      	adds	r3, #61	; 0x3d
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d112      	bne.n	8002970 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	333c      	adds	r3, #60	; 0x3c
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d108      	bne.n	8002970 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	333d      	adds	r3, #61	; 0x3d
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f003 f857 	bl	8005a2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	4413      	add	r3, r2
 8002988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298c:	461a      	mov	r2, r3
 800298e:	2310      	movs	r3, #16
 8002990:	6093      	str	r3, [r2, #8]
}
 8002992:	e1e2      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a6:	2b80      	cmp	r3, #128	; 0x80
 80029a8:	d164      	bne.n	8002a74 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d111      	bne.n	80029d6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	3361      	adds	r3, #97	; 0x61
 80029c0:	2206      	movs	r2, #6
 80029c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f003 f82d 	bl	8005a2e <USB_HC_Halt>
 80029d4:	e044      	b.n	8002a60 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	335c      	adds	r3, #92	; 0x5c
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	202c      	movs	r0, #44	; 0x2c
 80029ee:	fb00 f303 	mul.w	r3, r0, r3
 80029f2:	440b      	add	r3, r1
 80029f4:	335c      	adds	r3, #92	; 0x5c
 80029f6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	335c      	adds	r3, #92	; 0x5c
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d920      	bls.n	8002a4e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	335c      	adds	r3, #92	; 0x5c
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	3360      	adds	r3, #96	; 0x60
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	b2d9      	uxtb	r1, r3
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	202c      	movs	r0, #44	; 0x2c
 8002a3a:	fb00 f303 	mul.w	r3, r0, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3360      	adds	r3, #96	; 0x60
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f005 fa88 	bl	8007f5c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a4c:	e008      	b.n	8002a60 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	3360      	adds	r3, #96	; 0x60
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	6093      	str	r3, [r2, #8]
}
 8002a72:	e172      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8a:	d11b      	bne.n	8002ac4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	3361      	adds	r3, #97	; 0x61
 8002a9a:	2208      	movs	r2, #8
 8002a9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f002 ffc0 	bl	8005a2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aba:	461a      	mov	r2, r3
 8002abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ac0:	6093      	str	r3, [r2, #8]
}
 8002ac2:	e14a      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	f040 813f 	bne.w	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3361      	adds	r3, #97	; 0x61
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d17d      	bne.n	8002bec <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	3360      	adds	r3, #96	; 0x60
 8002afe:	2201      	movs	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	333f      	adds	r3, #63	; 0x3f
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d00a      	beq.n	8002b2c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	333f      	adds	r3, #63	; 0x3f
 8002b24:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	f040 8100 	bne.w	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d113      	bne.n	8002b5c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	212c      	movs	r1, #44	; 0x2c
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	3355      	adds	r3, #85	; 0x55
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	f083 0301 	eor.w	r3, r3, #1
 8002b48:	b2d8      	uxtb	r0, r3
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3355      	adds	r3, #85	; 0x55
 8002b58:	4602      	mov	r2, r0
 8002b5a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	f040 80e3 	bne.w	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	212c      	movs	r1, #44	; 0x2c
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	334c      	adds	r3, #76	; 0x4c
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 80d8 	beq.w	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	334c      	adds	r3, #76	; 0x4c
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	202c      	movs	r0, #44	; 0x2c
 8002b92:	fb00 f202 	mul.w	r2, r0, r2
 8002b96:	440a      	add	r2, r1
 8002b98:	3240      	adds	r2, #64	; 0x40
 8002b9a:	8812      	ldrh	r2, [r2, #0]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	202c      	movs	r0, #44	; 0x2c
 8002ba6:	fb00 f202 	mul.w	r2, r0, r2
 8002baa:	440a      	add	r2, r1
 8002bac:	3240      	adds	r2, #64	; 0x40
 8002bae:	8812      	ldrh	r2, [r2, #0]
 8002bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80b5 	beq.w	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3355      	adds	r3, #85	; 0x55
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	f083 0301 	eor.w	r3, r3, #1
 8002bd6:	b2d8      	uxtb	r0, r3
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	212c      	movs	r1, #44	; 0x2c
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	3355      	adds	r3, #85	; 0x55
 8002be6:	4602      	mov	r2, r0
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	e09f      	b.n	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	212c      	movs	r1, #44	; 0x2c
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3361      	adds	r3, #97	; 0x61
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d109      	bne.n	8002c14 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	212c      	movs	r1, #44	; 0x2c
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3360      	adds	r3, #96	; 0x60
 8002c0e:	2202      	movs	r2, #2
 8002c10:	701a      	strb	r2, [r3, #0]
 8002c12:	e08b      	b.n	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	212c      	movs	r1, #44	; 0x2c
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3361      	adds	r3, #97	; 0x61
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d109      	bne.n	8002c3c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	212c      	movs	r1, #44	; 0x2c
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	3360      	adds	r3, #96	; 0x60
 8002c36:	2202      	movs	r2, #2
 8002c38:	701a      	strb	r2, [r3, #0]
 8002c3a:	e077      	b.n	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3361      	adds	r3, #97	; 0x61
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b05      	cmp	r3, #5
 8002c4e:	d109      	bne.n	8002c64 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3360      	adds	r3, #96	; 0x60
 8002c5e:	2205      	movs	r2, #5
 8002c60:	701a      	strb	r2, [r3, #0]
 8002c62:	e063      	b.n	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	3361      	adds	r3, #97	; 0x61
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b06      	cmp	r3, #6
 8002c76:	d009      	beq.n	8002c8c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3361      	adds	r3, #97	; 0x61
 8002c86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d14f      	bne.n	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	335c      	adds	r3, #92	; 0x5c
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	202c      	movs	r0, #44	; 0x2c
 8002ca4:	fb00 f303 	mul.w	r3, r0, r3
 8002ca8:	440b      	add	r3, r1
 8002caa:	335c      	adds	r3, #92	; 0x5c
 8002cac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	335c      	adds	r3, #92	; 0x5c
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d912      	bls.n	8002ce8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	212c      	movs	r1, #44	; 0x2c
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	335c      	adds	r3, #92	; 0x5c
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	212c      	movs	r1, #44	; 0x2c
 8002cda:	fb01 f303 	mul.w	r3, r1, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	3360      	adds	r3, #96	; 0x60
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	e021      	b.n	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	212c      	movs	r1, #44	; 0x2c
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3360      	adds	r3, #96	; 0x60
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d10:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d18:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d26:	461a      	mov	r2, r3
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d38:	461a      	mov	r2, r3
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	b2d9      	uxtb	r1, r3
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	202c      	movs	r0, #44	; 0x2c
 8002d48:	fb00 f303 	mul.w	r3, r0, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3360      	adds	r3, #96	; 0x60
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f005 f901 	bl	8007f5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d5a:	bf00      	nop
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b08a      	sub	sp, #40	; 0x28
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	0c5b      	lsrs	r3, r3, #17
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d96:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d004      	beq.n	8002da8 <HCD_RXQLVL_IRQHandler+0x46>
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	f000 80a9 	beq.w	8002ef8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002da6:	e0aa      	b.n	8002efe <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 80a6 	beq.w	8002efc <HCD_RXQLVL_IRQHandler+0x19a>
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	212c      	movs	r1, #44	; 0x2c
 8002db6:	fb01 f303 	mul.w	r3, r1, r3
 8002dba:	4413      	add	r3, r2
 8002dbc:	3344      	adds	r3, #68	; 0x44
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 809b 	beq.w	8002efc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3350      	adds	r3, #80	; 0x50
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	441a      	add	r2, r3
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	202c      	movs	r0, #44	; 0x2c
 8002de0:	fb00 f303 	mul.w	r3, r0, r3
 8002de4:	440b      	add	r3, r1
 8002de6:	334c      	adds	r3, #76	; 0x4c
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d87a      	bhi.n	8002ee4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3344      	adds	r3, #68	; 0x44
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	b292      	uxth	r2, r2
 8002e06:	4619      	mov	r1, r3
 8002e08:	f002 f968 	bl	80050dc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3344      	adds	r3, #68	; 0x44
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	441a      	add	r2, r3
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	202c      	movs	r0, #44	; 0x2c
 8002e26:	fb00 f303 	mul.w	r3, r0, r3
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3344      	adds	r3, #68	; 0x44
 8002e2e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	212c      	movs	r1, #44	; 0x2c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3350      	adds	r3, #80	; 0x50
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	441a      	add	r2, r3
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	202c      	movs	r0, #44	; 0x2c
 8002e4a:	fb00 f303 	mul.w	r3, r0, r3
 8002e4e:	440b      	add	r3, r1
 8002e50:	3350      	adds	r3, #80	; 0x50
 8002e52:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	0cdb      	lsrs	r3, r3, #19
 8002e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e68:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	212c      	movs	r1, #44	; 0x2c
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	4413      	add	r3, r2
 8002e76:	3340      	adds	r3, #64	; 0x40
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d13c      	bne.n	8002efc <HCD_RXQLVL_IRQHandler+0x19a>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d039      	beq.n	8002efc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e9e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ea6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	212c      	movs	r1, #44	; 0x2c
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3354      	adds	r3, #84	; 0x54
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	f083 0301 	eor.w	r3, r3, #1
 8002ece:	b2d8      	uxtb	r0, r3
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	3354      	adds	r3, #84	; 0x54
 8002ede:	4602      	mov	r2, r0
 8002ee0:	701a      	strb	r2, [r3, #0]
      break;
 8002ee2:	e00b      	b.n	8002efc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	212c      	movs	r1, #44	; 0x2c
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	3360      	adds	r3, #96	; 0x60
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	701a      	strb	r2, [r3, #0]
      break;
 8002ef6:	e001      	b.n	8002efc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002ef8:	bf00      	nop
 8002efa:	e000      	b.n	8002efe <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002efc:	bf00      	nop
  }
}
 8002efe:	bf00      	nop
 8002f00:	3728      	adds	r7, #40	; 0x28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b086      	sub	sp, #24
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f32:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d10b      	bne.n	8002f56 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d102      	bne.n	8002f4e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f004 ffeb 	bl	8007f24 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f043 0302 	orr.w	r3, r3, #2
 8002f54:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d132      	bne.n	8002fc6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f043 0308 	orr.w	r3, r3, #8
 8002f66:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d126      	bne.n	8002fc0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d113      	bne.n	8002fa2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f84:	d106      	bne.n	8002f94 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2102      	movs	r1, #2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f002 fa13 	bl	80053b8 <USB_InitFSLSPClkSel>
 8002f92:	e011      	b.n	8002fb8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2101      	movs	r1, #1
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f002 fa0c 	bl	80053b8 <USB_InitFSLSPClkSel>
 8002fa0:	e00a      	b.n	8002fb8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d106      	bne.n	8002fb8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002fb6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f004 ffdd 	bl	8007f78 <HAL_HCD_PortEnabled_Callback>
 8002fbe:	e002      	b.n	8002fc6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f004 ffe7 	bl	8007f94 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f003 0320 	and.w	r3, r3, #32
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d103      	bne.n	8002fd8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f043 0320 	orr.w	r3, r3, #32
 8002fd6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fde:	461a      	mov	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6013      	str	r3, [r2, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e12b      	b.n	8003256 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fd fd86 	bl	8000b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2224      	movs	r2, #36	; 0x24
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0201 	bic.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800303e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800304e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003050:	f001 fa20 	bl	8004494 <HAL_RCC_GetPCLK1Freq>
 8003054:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4a81      	ldr	r2, [pc, #516]	; (8003260 <HAL_I2C_Init+0x274>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d807      	bhi.n	8003070 <HAL_I2C_Init+0x84>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4a80      	ldr	r2, [pc, #512]	; (8003264 <HAL_I2C_Init+0x278>)
 8003064:	4293      	cmp	r3, r2
 8003066:	bf94      	ite	ls
 8003068:	2301      	movls	r3, #1
 800306a:	2300      	movhi	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e006      	b.n	800307e <HAL_I2C_Init+0x92>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4a7d      	ldr	r2, [pc, #500]	; (8003268 <HAL_I2C_Init+0x27c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	bf94      	ite	ls
 8003078:	2301      	movls	r3, #1
 800307a:	2300      	movhi	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e0e7      	b.n	8003256 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4a78      	ldr	r2, [pc, #480]	; (800326c <HAL_I2C_Init+0x280>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	0c9b      	lsrs	r3, r3, #18
 8003090:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4a6a      	ldr	r2, [pc, #424]	; (8003260 <HAL_I2C_Init+0x274>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d802      	bhi.n	80030c0 <HAL_I2C_Init+0xd4>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	3301      	adds	r3, #1
 80030be:	e009      	b.n	80030d4 <HAL_I2C_Init+0xe8>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030c6:	fb02 f303 	mul.w	r3, r2, r3
 80030ca:	4a69      	ldr	r2, [pc, #420]	; (8003270 <HAL_I2C_Init+0x284>)
 80030cc:	fba2 2303 	umull	r2, r3, r2, r3
 80030d0:	099b      	lsrs	r3, r3, #6
 80030d2:	3301      	adds	r3, #1
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	430b      	orrs	r3, r1
 80030da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	495c      	ldr	r1, [pc, #368]	; (8003260 <HAL_I2C_Init+0x274>)
 80030f0:	428b      	cmp	r3, r1
 80030f2:	d819      	bhi.n	8003128 <HAL_I2C_Init+0x13c>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1e59      	subs	r1, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003102:	1c59      	adds	r1, r3, #1
 8003104:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003108:	400b      	ands	r3, r1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <HAL_I2C_Init+0x138>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	1e59      	subs	r1, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fbb1 f3f3 	udiv	r3, r1, r3
 800311c:	3301      	adds	r3, #1
 800311e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003122:	e051      	b.n	80031c8 <HAL_I2C_Init+0x1dc>
 8003124:	2304      	movs	r3, #4
 8003126:	e04f      	b.n	80031c8 <HAL_I2C_Init+0x1dc>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d111      	bne.n	8003154 <HAL_I2C_Init+0x168>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1e58      	subs	r0, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	440b      	add	r3, r1
 800313e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003142:	3301      	adds	r3, #1
 8003144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e012      	b.n	800317a <HAL_I2C_Init+0x18e>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1e58      	subs	r0, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	0099      	lsls	r1, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	fbb0 f3f3 	udiv	r3, r0, r3
 800316a:	3301      	adds	r3, #1
 800316c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_I2C_Init+0x196>
 800317e:	2301      	movs	r3, #1
 8003180:	e022      	b.n	80031c8 <HAL_I2C_Init+0x1dc>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10e      	bne.n	80031a8 <HAL_I2C_Init+0x1bc>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1e58      	subs	r0, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6859      	ldr	r1, [r3, #4]
 8003192:	460b      	mov	r3, r1
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	440b      	add	r3, r1
 8003198:	fbb0 f3f3 	udiv	r3, r0, r3
 800319c:	3301      	adds	r3, #1
 800319e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a6:	e00f      	b.n	80031c8 <HAL_I2C_Init+0x1dc>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1e58      	subs	r0, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	0099      	lsls	r1, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80031be:	3301      	adds	r3, #1
 80031c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	6809      	ldr	r1, [r1, #0]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69da      	ldr	r2, [r3, #28]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6911      	ldr	r1, [r2, #16]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	68d2      	ldr	r2, [r2, #12]
 8003202:	4311      	orrs	r1, r2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	430b      	orrs	r3, r1
 800320a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695a      	ldr	r2, [r3, #20]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	000186a0 	.word	0x000186a0
 8003264:	001e847f 	.word	0x001e847f
 8003268:	003d08ff 	.word	0x003d08ff
 800326c:	431bde83 	.word	0x431bde83
 8003270:	10624dd3 	.word	0x10624dd3

08003274 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e128      	b.n	80034d8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a90      	ldr	r2, [pc, #576]	; (80034e0 <HAL_I2S_Init+0x26c>)
 800329e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7fd fc87 	bl	8000bb4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2202      	movs	r2, #2
 80032aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032bc:	f023 030f 	bic.w	r3, r3, #15
 80032c0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2202      	movs	r2, #2
 80032c8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d060      	beq.n	8003394 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80032da:	2310      	movs	r3, #16
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	e001      	b.n	80032e4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80032e0:	2320      	movs	r3, #32
 80032e2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d802      	bhi.n	80032f2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80032f2:	2001      	movs	r0, #1
 80032f4:	f001 f9d8 	bl	80046a8 <HAL_RCCEx_GetPeriphCLKFreq>
 80032f8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003302:	d125      	bne.n	8003350 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d010      	beq.n	800332e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	fbb2 f2f3 	udiv	r2, r2, r3
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	461a      	mov	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	fbb2 f3f3 	udiv	r3, r2, r3
 8003328:	3305      	adds	r3, #5
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	e01f      	b.n	800336e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	fbb2 f2f3 	udiv	r2, r2, r3
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	461a      	mov	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	fbb2 f3f3 	udiv	r3, r2, r3
 800334a:	3305      	adds	r3, #5
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	e00e      	b.n	800336e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	fbb2 f2f3 	udiv	r2, r2, r3
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	461a      	mov	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	fbb2 f3f3 	udiv	r3, r2, r3
 800336a:	3305      	adds	r3, #5
 800336c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4a5c      	ldr	r2, [pc, #368]	; (80034e4 <HAL_I2S_Init+0x270>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	08db      	lsrs	r3, r3, #3
 8003378:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	085b      	lsrs	r3, r3, #1
 800338a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	021b      	lsls	r3, r3, #8
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	e003      	b.n	800339c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003394:	2302      	movs	r3, #2
 8003396:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d902      	bls.n	80033a8 <HAL_I2S_Init+0x134>
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	2bff      	cmp	r3, #255	; 0xff
 80033a6:	d907      	bls.n	80033b8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ac:	f043 0210 	orr.w	r2, r3, #16
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e08f      	b.n	80034d8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	ea42 0103 	orr.w	r1, r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69fa      	ldr	r2, [r7, #28]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033d6:	f023 030f 	bic.w	r3, r3, #15
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6851      	ldr	r1, [r2, #4]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6892      	ldr	r2, [r2, #8]
 80033e2:	4311      	orrs	r1, r2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68d2      	ldr	r2, [r2, #12]
 80033e8:	4311      	orrs	r1, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6992      	ldr	r2, [r2, #24]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033fa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d161      	bne.n	80034c8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a38      	ldr	r2, [pc, #224]	; (80034e8 <HAL_I2S_Init+0x274>)
 8003408:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a37      	ldr	r2, [pc, #220]	; (80034ec <HAL_I2S_Init+0x278>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d101      	bne.n	8003418 <HAL_I2S_Init+0x1a4>
 8003414:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <HAL_I2S_Init+0x27c>)
 8003416:	e001      	b.n	800341c <HAL_I2S_Init+0x1a8>
 8003418:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	4932      	ldr	r1, [pc, #200]	; (80034ec <HAL_I2S_Init+0x278>)
 8003424:	428a      	cmp	r2, r1
 8003426:	d101      	bne.n	800342c <HAL_I2S_Init+0x1b8>
 8003428:	4a31      	ldr	r2, [pc, #196]	; (80034f0 <HAL_I2S_Init+0x27c>)
 800342a:	e001      	b.n	8003430 <HAL_I2S_Init+0x1bc>
 800342c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003430:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003434:	f023 030f 	bic.w	r3, r3, #15
 8003438:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a2b      	ldr	r2, [pc, #172]	; (80034ec <HAL_I2S_Init+0x278>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d101      	bne.n	8003448 <HAL_I2S_Init+0x1d4>
 8003444:	4b2a      	ldr	r3, [pc, #168]	; (80034f0 <HAL_I2S_Init+0x27c>)
 8003446:	e001      	b.n	800344c <HAL_I2S_Init+0x1d8>
 8003448:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800344c:	2202      	movs	r2, #2
 800344e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a25      	ldr	r2, [pc, #148]	; (80034ec <HAL_I2S_Init+0x278>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <HAL_I2S_Init+0x1ea>
 800345a:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <HAL_I2S_Init+0x27c>)
 800345c:	e001      	b.n	8003462 <HAL_I2S_Init+0x1ee>
 800345e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800346e:	d003      	beq.n	8003478 <HAL_I2S_Init+0x204>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d103      	bne.n	8003480 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	e001      	b.n	8003484 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003480:	2300      	movs	r3, #0
 8003482:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800348e:	4313      	orrs	r3, r2
 8003490:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003498:	4313      	orrs	r3, r2
 800349a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034a2:	4313      	orrs	r3, r2
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	897b      	ldrh	r3, [r7, #10]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034b0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a0d      	ldr	r2, [pc, #52]	; (80034ec <HAL_I2S_Init+0x278>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d101      	bne.n	80034c0 <HAL_I2S_Init+0x24c>
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <HAL_I2S_Init+0x27c>)
 80034be:	e001      	b.n	80034c4 <HAL_I2S_Init+0x250>
 80034c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034c4:	897a      	ldrh	r2, [r7, #10]
 80034c6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	080035eb 	.word	0x080035eb
 80034e4:	cccccccd 	.word	0xcccccccd
 80034e8:	08003701 	.word	0x08003701
 80034ec:	40003800 	.word	0x40003800
 80034f0:	40003400 	.word	0x40003400

080034f4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	881a      	ldrh	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	1c9a      	adds	r2, r3, #2
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10e      	bne.n	8003584 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003574:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff ffb8 	bl	80034f4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003584:	bf00      	nop
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359e:	b292      	uxth	r2, r2
 80035a0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	1c9a      	adds	r2, r3, #2
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10e      	bne.n	80035e2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035d2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ff93 	bl	8003508 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b086      	sub	sp, #24
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b04      	cmp	r3, #4
 8003604:	d13a      	bne.n	800367c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d109      	bne.n	8003624 <I2S_IRQHandler+0x3a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b40      	cmp	r3, #64	; 0x40
 800361c:	d102      	bne.n	8003624 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff ffb4 	bl	800358c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d126      	bne.n	800367c <I2S_IRQHandler+0x92>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b20      	cmp	r3, #32
 800363a:	d11f      	bne.n	800367c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800364a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800364c:	2300      	movs	r3, #0
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	f043 0202 	orr.w	r2, r3, #2
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff ff50 	bl	800351c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b03      	cmp	r3, #3
 8003686:	d136      	bne.n	80036f6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b02      	cmp	r3, #2
 8003690:	d109      	bne.n	80036a6 <I2S_IRQHandler+0xbc>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369c:	2b80      	cmp	r3, #128	; 0x80
 800369e:	d102      	bne.n	80036a6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff ff45 	bl	8003530 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d122      	bne.n	80036f6 <I2S_IRQHandler+0x10c>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d11b      	bne.n	80036f6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036cc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e8:	f043 0204 	orr.w	r2, r3, #4
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff ff13 	bl	800351c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036f6:	bf00      	nop
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a92      	ldr	r2, [pc, #584]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800371a:	4b92      	ldr	r3, [pc, #584]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800371c:	e001      	b.n	8003722 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800371e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a8b      	ldr	r2, [pc, #556]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d101      	bne.n	800373c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003738:	4b8a      	ldr	r3, [pc, #552]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800373a:	e001      	b.n	8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800373c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800374c:	d004      	beq.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f040 8099 	bne.w	800388a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b02      	cmp	r3, #2
 8003760:	d107      	bne.n	8003772 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f925 	bl	80039bc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b01      	cmp	r3, #1
 800377a:	d107      	bne.n	800378c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f9c8 	bl	8003b1c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003792:	2b40      	cmp	r3, #64	; 0x40
 8003794:	d13a      	bne.n	800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d035      	beq.n	800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a6e      	ldr	r2, [pc, #440]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d101      	bne.n	80037ae <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80037aa:	4b6e      	ldr	r3, [pc, #440]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037ac:	e001      	b.n	80037b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80037ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4969      	ldr	r1, [pc, #420]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037ba:	428b      	cmp	r3, r1
 80037bc:	d101      	bne.n	80037c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80037be:	4b69      	ldr	r3, [pc, #420]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037c0:	e001      	b.n	80037c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80037c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ca:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	f043 0202 	orr.w	r2, r3, #2
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff fe88 	bl	800351c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b08      	cmp	r3, #8
 8003814:	f040 80c3 	bne.w	800399e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80bd 	beq.w	800399e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003832:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a49      	ldr	r2, [pc, #292]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d101      	bne.n	8003842 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800383e:	4b49      	ldr	r3, [pc, #292]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003840:	e001      	b.n	8003846 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003842:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4944      	ldr	r1, [pc, #272]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800384e:	428b      	cmp	r3, r1
 8003850:	d101      	bne.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003852:	4b44      	ldr	r3, [pc, #272]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003854:	e001      	b.n	800385a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003856:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800385e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003860:	2300      	movs	r3, #0
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	60bb      	str	r3, [r7, #8]
 800386c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f043 0204 	orr.w	r2, r3, #4
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff fe4a 	bl	800351c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003888:	e089      	b.n	800399e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b02      	cmp	r3, #2
 8003892:	d107      	bne.n	80038a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8be 	bl	8003a20 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d107      	bne.n	80038be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f8fd 	bl	8003ab8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d12f      	bne.n	8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d02a      	beq.n	8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038e0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1e      	ldr	r2, [pc, #120]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d101      	bne.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80038ec:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038ee:	e001      	b.n	80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80038f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4919      	ldr	r1, [pc, #100]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038fc:	428b      	cmp	r3, r1
 80038fe:	d101      	bne.n	8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003900:	4b18      	ldr	r3, [pc, #96]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003902:	e001      	b.n	8003908 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003904:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003908:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800390c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f043 0202 	orr.w	r2, r3, #2
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff fdfa 	bl	800351c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b08      	cmp	r3, #8
 8003930:	d136      	bne.n	80039a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d031      	beq.n	80039a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a07      	ldr	r2, [pc, #28]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003948:	e001      	b.n	800394e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800394a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4902      	ldr	r1, [pc, #8]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003956:	428b      	cmp	r3, r1
 8003958:	d106      	bne.n	8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800395a:	4b02      	ldr	r3, [pc, #8]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800395c:	e006      	b.n	800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800395e:	bf00      	nop
 8003960:	40003800 	.word	0x40003800
 8003964:	40003400 	.word	0x40003400
 8003968:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800396c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003970:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003980:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	f043 0204 	orr.w	r2, r3, #4
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fdc0 	bl	800351c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800399c:	e000      	b.n	80039a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800399e:	bf00      	nop
}
 80039a0:	bf00      	nop
 80039a2:	3720      	adds	r7, #32
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	1c99      	adds	r1, r3, #2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6251      	str	r1, [r2, #36]	; 0x24
 80039ce:	881a      	ldrh	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d113      	bne.n	8003a16 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d106      	bne.n	8003a16 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff ffc9 	bl	80039a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	1c99      	adds	r1, r3, #2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6251      	str	r1, [r2, #36]	; 0x24
 8003a32:	8819      	ldrh	r1, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d101      	bne.n	8003a42 <I2SEx_TxISR_I2SExt+0x22>
 8003a3e:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <I2SEx_TxISR_I2SExt+0x94>)
 8003a40:	e001      	b.n	8003a46 <I2SEx_TxISR_I2SExt+0x26>
 8003a42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a46:	460a      	mov	r2, r1
 8003a48:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d121      	bne.n	8003aa6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a12      	ldr	r2, [pc, #72]	; (8003ab0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d101      	bne.n	8003a70 <I2SEx_TxISR_I2SExt+0x50>
 8003a6c:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <I2SEx_TxISR_I2SExt+0x94>)
 8003a6e:	e001      	b.n	8003a74 <I2SEx_TxISR_I2SExt+0x54>
 8003a70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	490d      	ldr	r1, [pc, #52]	; (8003ab0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a7c:	428b      	cmp	r3, r1
 8003a7e:	d101      	bne.n	8003a84 <I2SEx_TxISR_I2SExt+0x64>
 8003a80:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <I2SEx_TxISR_I2SExt+0x94>)
 8003a82:	e001      	b.n	8003a88 <I2SEx_TxISR_I2SExt+0x68>
 8003a84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a8c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d106      	bne.n	8003aa6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff ff81 	bl	80039a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40003800 	.word	0x40003800
 8003ab4:	40003400 	.word	0x40003400

08003ab8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68d8      	ldr	r0, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	1c99      	adds	r1, r3, #2
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ad0:	b282      	uxth	r2, r0
 8003ad2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d113      	bne.n	8003b14 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003afa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff ff4a 	bl	80039a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a20      	ldr	r2, [pc, #128]	; (8003bac <I2SEx_RxISR_I2SExt+0x90>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <I2SEx_RxISR_I2SExt+0x16>
 8003b2e:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b30:	e001      	b.n	8003b36 <I2SEx_RxISR_I2SExt+0x1a>
 8003b32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b36:	68d8      	ldr	r0, [r3, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	1c99      	adds	r1, r3, #2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b42:	b282      	uxth	r2, r0
 8003b44:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d121      	bne.n	8003ba2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a12      	ldr	r2, [pc, #72]	; (8003bac <I2SEx_RxISR_I2SExt+0x90>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d101      	bne.n	8003b6c <I2SEx_RxISR_I2SExt+0x50>
 8003b68:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b6a:	e001      	b.n	8003b70 <I2SEx_RxISR_I2SExt+0x54>
 8003b6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	490d      	ldr	r1, [pc, #52]	; (8003bac <I2SEx_RxISR_I2SExt+0x90>)
 8003b78:	428b      	cmp	r3, r1
 8003b7a:	d101      	bne.n	8003b80 <I2SEx_RxISR_I2SExt+0x64>
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b7e:	e001      	b.n	8003b84 <I2SEx_RxISR_I2SExt+0x68>
 8003b80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b88:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d106      	bne.n	8003ba2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ff03 	bl	80039a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40003800 	.word	0x40003800
 8003bb0:	40003400 	.word	0x40003400

08003bb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e267      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d075      	beq.n	8003cbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bd2:	4b88      	ldr	r3, [pc, #544]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d00c      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bde:	4b85      	ldr	r3, [pc, #532]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d112      	bne.n	8003c10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bea:	4b82      	ldr	r3, [pc, #520]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf6:	d10b      	bne.n	8003c10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf8:	4b7e      	ldr	r3, [pc, #504]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d05b      	beq.n	8003cbc <HAL_RCC_OscConfig+0x108>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d157      	bne.n	8003cbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e242      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c18:	d106      	bne.n	8003c28 <HAL_RCC_OscConfig+0x74>
 8003c1a:	4b76      	ldr	r3, [pc, #472]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a75      	ldr	r2, [pc, #468]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	e01d      	b.n	8003c64 <HAL_RCC_OscConfig+0xb0>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c30:	d10c      	bne.n	8003c4c <HAL_RCC_OscConfig+0x98>
 8003c32:	4b70      	ldr	r3, [pc, #448]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a6f      	ldr	r2, [pc, #444]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	4b6d      	ldr	r3, [pc, #436]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a6c      	ldr	r2, [pc, #432]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e00b      	b.n	8003c64 <HAL_RCC_OscConfig+0xb0>
 8003c4c:	4b69      	ldr	r3, [pc, #420]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a68      	ldr	r2, [pc, #416]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	4b66      	ldr	r3, [pc, #408]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a65      	ldr	r2, [pc, #404]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d013      	beq.n	8003c94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6c:	f7fd fa4c 	bl	8001108 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c74:	f7fd fa48 	bl	8001108 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	; 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e207      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c86:	4b5b      	ldr	r3, [pc, #364]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0xc0>
 8003c92:	e014      	b.n	8003cbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fd fa38 	bl	8001108 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c9c:	f7fd fa34 	bl	8001108 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	; 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e1f3      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cae:	4b51      	ldr	r3, [pc, #324]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0xe8>
 8003cba:	e000      	b.n	8003cbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d063      	beq.n	8003d92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cca:	4b4a      	ldr	r3, [pc, #296]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cd6:	4b47      	ldr	r3, [pc, #284]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d11c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ce2:	4b44      	ldr	r3, [pc, #272]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d116      	bne.n	8003d1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cee:	4b41      	ldr	r3, [pc, #260]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_RCC_OscConfig+0x152>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d001      	beq.n	8003d06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e1c7      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d06:	4b3b      	ldr	r3, [pc, #236]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4937      	ldr	r1, [pc, #220]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1a:	e03a      	b.n	8003d92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d020      	beq.n	8003d66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d24:	4b34      	ldr	r3, [pc, #208]	; (8003df8 <HAL_RCC_OscConfig+0x244>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7fd f9ed 	bl	8001108 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d32:	f7fd f9e9 	bl	8001108 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e1a8      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d44:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d50:	4b28      	ldr	r3, [pc, #160]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	4925      	ldr	r1, [pc, #148]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	600b      	str	r3, [r1, #0]
 8003d64:	e015      	b.n	8003d92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d66:	4b24      	ldr	r3, [pc, #144]	; (8003df8 <HAL_RCC_OscConfig+0x244>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6c:	f7fd f9cc 	bl	8001108 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d74:	f7fd f9c8 	bl	8001108 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e187      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d86:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d036      	beq.n	8003e0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d016      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da6:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <HAL_RCC_OscConfig+0x248>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dac:	f7fd f9ac 	bl	8001108 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db4:	f7fd f9a8 	bl	8001108 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e167      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0x200>
 8003dd2:	e01b      	b.n	8003e0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd4:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <HAL_RCC_OscConfig+0x248>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dda:	f7fd f995 	bl	8001108 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de0:	e00e      	b.n	8003e00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de2:	f7fd f991 	bl	8001108 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d907      	bls.n	8003e00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e150      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
 8003df4:	40023800 	.word	0x40023800
 8003df8:	42470000 	.word	0x42470000
 8003dfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e00:	4b88      	ldr	r3, [pc, #544]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1ea      	bne.n	8003de2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8097 	beq.w	8003f48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e1e:	4b81      	ldr	r3, [pc, #516]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10f      	bne.n	8003e4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	4b7d      	ldr	r3, [pc, #500]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	4a7c      	ldr	r2, [pc, #496]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e38:	6413      	str	r3, [r2, #64]	; 0x40
 8003e3a:	4b7a      	ldr	r3, [pc, #488]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e42:	60bb      	str	r3, [r7, #8]
 8003e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e46:	2301      	movs	r3, #1
 8003e48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4a:	4b77      	ldr	r3, [pc, #476]	; (8004028 <HAL_RCC_OscConfig+0x474>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d118      	bne.n	8003e88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e56:	4b74      	ldr	r3, [pc, #464]	; (8004028 <HAL_RCC_OscConfig+0x474>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a73      	ldr	r2, [pc, #460]	; (8004028 <HAL_RCC_OscConfig+0x474>)
 8003e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e62:	f7fd f951 	bl	8001108 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6a:	f7fd f94d 	bl	8001108 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e10c      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7c:	4b6a      	ldr	r3, [pc, #424]	; (8004028 <HAL_RCC_OscConfig+0x474>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0f0      	beq.n	8003e6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d106      	bne.n	8003e9e <HAL_RCC_OscConfig+0x2ea>
 8003e90:	4b64      	ldr	r3, [pc, #400]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	4a63      	ldr	r2, [pc, #396]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9c:	e01c      	b.n	8003ed8 <HAL_RCC_OscConfig+0x324>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b05      	cmp	r3, #5
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x30c>
 8003ea6:	4b5f      	ldr	r3, [pc, #380]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a5e      	ldr	r2, [pc, #376]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003eac:	f043 0304 	orr.w	r3, r3, #4
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb2:	4b5c      	ldr	r3, [pc, #368]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a5b      	ldr	r2, [pc, #364]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ebe:	e00b      	b.n	8003ed8 <HAL_RCC_OscConfig+0x324>
 8003ec0:	4b58      	ldr	r3, [pc, #352]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec4:	4a57      	ldr	r2, [pc, #348]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003ec6:	f023 0301 	bic.w	r3, r3, #1
 8003eca:	6713      	str	r3, [r2, #112]	; 0x70
 8003ecc:	4b55      	ldr	r3, [pc, #340]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed0:	4a54      	ldr	r2, [pc, #336]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003ed2:	f023 0304 	bic.w	r3, r3, #4
 8003ed6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d015      	beq.n	8003f0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7fd f912 	bl	8001108 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee6:	e00a      	b.n	8003efe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee8:	f7fd f90e 	bl	8001108 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e0cb      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efe:	4b49      	ldr	r3, [pc, #292]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0ee      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x334>
 8003f0a:	e014      	b.n	8003f36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0c:	f7fd f8fc 	bl	8001108 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f12:	e00a      	b.n	8003f2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f14:	f7fd f8f8 	bl	8001108 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e0b5      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2a:	4b3e      	ldr	r3, [pc, #248]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1ee      	bne.n	8003f14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d105      	bne.n	8003f48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f3c:	4b39      	ldr	r3, [pc, #228]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	4a38      	ldr	r2, [pc, #224]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80a1 	beq.w	8004094 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f52:	4b34      	ldr	r3, [pc, #208]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d05c      	beq.n	8004018 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d141      	bne.n	8003fea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f66:	4b31      	ldr	r3, [pc, #196]	; (800402c <HAL_RCC_OscConfig+0x478>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6c:	f7fd f8cc 	bl	8001108 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f74:	f7fd f8c8 	bl	8001108 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e087      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f86:	4b27      	ldr	r3, [pc, #156]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69da      	ldr	r2, [r3, #28]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	019b      	lsls	r3, r3, #6
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	085b      	lsrs	r3, r3, #1
 8003faa:	3b01      	subs	r3, #1
 8003fac:	041b      	lsls	r3, r3, #16
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	061b      	lsls	r3, r3, #24
 8003fb6:	491b      	ldr	r1, [pc, #108]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fbc:	4b1b      	ldr	r3, [pc, #108]	; (800402c <HAL_RCC_OscConfig+0x478>)
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc2:	f7fd f8a1 	bl	8001108 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fca:	f7fd f89d 	bl	8001108 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e05c      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fdc:	4b11      	ldr	r3, [pc, #68]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0f0      	beq.n	8003fca <HAL_RCC_OscConfig+0x416>
 8003fe8:	e054      	b.n	8004094 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fea:	4b10      	ldr	r3, [pc, #64]	; (800402c <HAL_RCC_OscConfig+0x478>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff0:	f7fd f88a 	bl	8001108 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff8:	f7fd f886 	bl	8001108 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e045      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400a:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x444>
 8004016:	e03d      	b.n	8004094 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d107      	bne.n	8004030 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e038      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
 8004024:	40023800 	.word	0x40023800
 8004028:	40007000 	.word	0x40007000
 800402c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004030:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <HAL_RCC_OscConfig+0x4ec>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d028      	beq.n	8004090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004048:	429a      	cmp	r2, r3
 800404a:	d121      	bne.n	8004090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d11a      	bne.n	8004090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004060:	4013      	ands	r3, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004066:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004068:	4293      	cmp	r3, r2
 800406a:	d111      	bne.n	8004090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	085b      	lsrs	r3, r3, #1
 8004078:	3b01      	subs	r3, #1
 800407a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800407c:	429a      	cmp	r2, r3
 800407e:	d107      	bne.n	8004090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800

080040a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0cc      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040b8:	4b68      	ldr	r3, [pc, #416]	; (800425c <HAL_RCC_ClockConfig+0x1b8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d90c      	bls.n	80040e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c6:	4b65      	ldr	r3, [pc, #404]	; (800425c <HAL_RCC_ClockConfig+0x1b8>)
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ce:	4b63      	ldr	r3, [pc, #396]	; (800425c <HAL_RCC_ClockConfig+0x1b8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d001      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0b8      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d020      	beq.n	800412e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f8:	4b59      	ldr	r3, [pc, #356]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a58      	ldr	r2, [pc, #352]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004102:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004110:	4b53      	ldr	r3, [pc, #332]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	4a52      	ldr	r2, [pc, #328]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800411a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800411c:	4b50      	ldr	r3, [pc, #320]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	494d      	ldr	r1, [pc, #308]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	4313      	orrs	r3, r2
 800412c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d044      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d107      	bne.n	8004152 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004142:	4b47      	ldr	r3, [pc, #284]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d119      	bne.n	8004182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e07f      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b02      	cmp	r3, #2
 8004158:	d003      	beq.n	8004162 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800415e:	2b03      	cmp	r3, #3
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004162:	4b3f      	ldr	r3, [pc, #252]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d109      	bne.n	8004182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e06f      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004172:	4b3b      	ldr	r3, [pc, #236]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e067      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004182:	4b37      	ldr	r3, [pc, #220]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f023 0203 	bic.w	r2, r3, #3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	4934      	ldr	r1, [pc, #208]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	4313      	orrs	r3, r2
 8004192:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004194:	f7fc ffb8 	bl	8001108 <HAL_GetTick>
 8004198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	e00a      	b.n	80041b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800419c:	f7fc ffb4 	bl	8001108 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e04f      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b2:	4b2b      	ldr	r3, [pc, #172]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 020c 	and.w	r2, r3, #12
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d1eb      	bne.n	800419c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041c4:	4b25      	ldr	r3, [pc, #148]	; (800425c <HAL_RCC_ClockConfig+0x1b8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d20c      	bcs.n	80041ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d2:	4b22      	ldr	r3, [pc, #136]	; (800425c <HAL_RCC_ClockConfig+0x1b8>)
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041da:	4b20      	ldr	r3, [pc, #128]	; (800425c <HAL_RCC_ClockConfig+0x1b8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d001      	beq.n	80041ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e032      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f8:	4b19      	ldr	r3, [pc, #100]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4916      	ldr	r1, [pc, #88]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d009      	beq.n	800422a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004216:	4b12      	ldr	r3, [pc, #72]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	490e      	ldr	r1, [pc, #56]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	4313      	orrs	r3, r2
 8004228:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800422a:	f000 f821 	bl	8004270 <HAL_RCC_GetSysClockFreq>
 800422e:	4602      	mov	r2, r0
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	490a      	ldr	r1, [pc, #40]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 800423c:	5ccb      	ldrb	r3, [r1, r3]
 800423e:	fa22 f303 	lsr.w	r3, r2, r3
 8004242:	4a09      	ldr	r2, [pc, #36]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004246:	4b09      	ldr	r3, [pc, #36]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f7fc ff18 	bl	8001080 <HAL_InitTick>

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40023c00 	.word	0x40023c00
 8004260:	40023800 	.word	0x40023800
 8004264:	08008d14 	.word	0x08008d14
 8004268:	20000000 	.word	0x20000000
 800426c:	20000004 	.word	0x20000004

08004270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004274:	b094      	sub	sp, #80	; 0x50
 8004276:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	647b      	str	r3, [r7, #68]	; 0x44
 800427c:	2300      	movs	r3, #0
 800427e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004280:	2300      	movs	r3, #0
 8004282:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004288:	4b79      	ldr	r3, [pc, #484]	; (8004470 <HAL_RCC_GetSysClockFreq+0x200>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 030c 	and.w	r3, r3, #12
 8004290:	2b08      	cmp	r3, #8
 8004292:	d00d      	beq.n	80042b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004294:	2b08      	cmp	r3, #8
 8004296:	f200 80e1 	bhi.w	800445c <HAL_RCC_GetSysClockFreq+0x1ec>
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_RCC_GetSysClockFreq+0x34>
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d003      	beq.n	80042aa <HAL_RCC_GetSysClockFreq+0x3a>
 80042a2:	e0db      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042a4:	4b73      	ldr	r3, [pc, #460]	; (8004474 <HAL_RCC_GetSysClockFreq+0x204>)
 80042a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042a8:	e0db      	b.n	8004462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042aa:	4b73      	ldr	r3, [pc, #460]	; (8004478 <HAL_RCC_GetSysClockFreq+0x208>)
 80042ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042ae:	e0d8      	b.n	8004462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042b0:	4b6f      	ldr	r3, [pc, #444]	; (8004470 <HAL_RCC_GetSysClockFreq+0x200>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ba:	4b6d      	ldr	r3, [pc, #436]	; (8004470 <HAL_RCC_GetSysClockFreq+0x200>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d063      	beq.n	800438e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c6:	4b6a      	ldr	r3, [pc, #424]	; (8004470 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	099b      	lsrs	r3, r3, #6
 80042cc:	2200      	movs	r2, #0
 80042ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80042d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d8:	633b      	str	r3, [r7, #48]	; 0x30
 80042da:	2300      	movs	r3, #0
 80042dc:	637b      	str	r3, [r7, #52]	; 0x34
 80042de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042e2:	4622      	mov	r2, r4
 80042e4:	462b      	mov	r3, r5
 80042e6:	f04f 0000 	mov.w	r0, #0
 80042ea:	f04f 0100 	mov.w	r1, #0
 80042ee:	0159      	lsls	r1, r3, #5
 80042f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042f4:	0150      	lsls	r0, r2, #5
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4621      	mov	r1, r4
 80042fc:	1a51      	subs	r1, r2, r1
 80042fe:	6139      	str	r1, [r7, #16]
 8004300:	4629      	mov	r1, r5
 8004302:	eb63 0301 	sbc.w	r3, r3, r1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004314:	4659      	mov	r1, fp
 8004316:	018b      	lsls	r3, r1, #6
 8004318:	4651      	mov	r1, sl
 800431a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800431e:	4651      	mov	r1, sl
 8004320:	018a      	lsls	r2, r1, #6
 8004322:	4651      	mov	r1, sl
 8004324:	ebb2 0801 	subs.w	r8, r2, r1
 8004328:	4659      	mov	r1, fp
 800432a:	eb63 0901 	sbc.w	r9, r3, r1
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800433a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800433e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004342:	4690      	mov	r8, r2
 8004344:	4699      	mov	r9, r3
 8004346:	4623      	mov	r3, r4
 8004348:	eb18 0303 	adds.w	r3, r8, r3
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	462b      	mov	r3, r5
 8004350:	eb49 0303 	adc.w	r3, r9, r3
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004362:	4629      	mov	r1, r5
 8004364:	024b      	lsls	r3, r1, #9
 8004366:	4621      	mov	r1, r4
 8004368:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800436c:	4621      	mov	r1, r4
 800436e:	024a      	lsls	r2, r1, #9
 8004370:	4610      	mov	r0, r2
 8004372:	4619      	mov	r1, r3
 8004374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004376:	2200      	movs	r2, #0
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
 800437a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800437c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004380:	f7fb ff22 	bl	80001c8 <__aeabi_uldivmod>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4613      	mov	r3, r2
 800438a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800438c:	e058      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438e:	4b38      	ldr	r3, [pc, #224]	; (8004470 <HAL_RCC_GetSysClockFreq+0x200>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	099b      	lsrs	r3, r3, #6
 8004394:	2200      	movs	r2, #0
 8004396:	4618      	mov	r0, r3
 8004398:	4611      	mov	r1, r2
 800439a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800439e:	623b      	str	r3, [r7, #32]
 80043a0:	2300      	movs	r3, #0
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
 80043a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043a8:	4642      	mov	r2, r8
 80043aa:	464b      	mov	r3, r9
 80043ac:	f04f 0000 	mov.w	r0, #0
 80043b0:	f04f 0100 	mov.w	r1, #0
 80043b4:	0159      	lsls	r1, r3, #5
 80043b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ba:	0150      	lsls	r0, r2, #5
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4641      	mov	r1, r8
 80043c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80043c6:	4649      	mov	r1, r9
 80043c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043e0:	ebb2 040a 	subs.w	r4, r2, sl
 80043e4:	eb63 050b 	sbc.w	r5, r3, fp
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	00eb      	lsls	r3, r5, #3
 80043f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043f6:	00e2      	lsls	r2, r4, #3
 80043f8:	4614      	mov	r4, r2
 80043fa:	461d      	mov	r5, r3
 80043fc:	4643      	mov	r3, r8
 80043fe:	18e3      	adds	r3, r4, r3
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	464b      	mov	r3, r9
 8004404:	eb45 0303 	adc.w	r3, r5, r3
 8004408:	607b      	str	r3, [r7, #4]
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004416:	4629      	mov	r1, r5
 8004418:	028b      	lsls	r3, r1, #10
 800441a:	4621      	mov	r1, r4
 800441c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004420:	4621      	mov	r1, r4
 8004422:	028a      	lsls	r2, r1, #10
 8004424:	4610      	mov	r0, r2
 8004426:	4619      	mov	r1, r3
 8004428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800442a:	2200      	movs	r2, #0
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	61fa      	str	r2, [r7, #28]
 8004430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004434:	f7fb fec8 	bl	80001c8 <__aeabi_uldivmod>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4613      	mov	r3, r2
 800443e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <HAL_RCC_GetSysClockFreq+0x200>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	0c1b      	lsrs	r3, r3, #16
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	3301      	adds	r3, #1
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004450:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004454:	fbb2 f3f3 	udiv	r3, r2, r3
 8004458:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800445a:	e002      	b.n	8004462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_RCC_GetSysClockFreq+0x204>)
 800445e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004464:	4618      	mov	r0, r3
 8004466:	3750      	adds	r7, #80	; 0x50
 8004468:	46bd      	mov	sp, r7
 800446a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800
 8004474:	00f42400 	.word	0x00f42400
 8004478:	007a1200 	.word	0x007a1200

0800447c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004480:	4b03      	ldr	r3, [pc, #12]	; (8004490 <HAL_RCC_GetHCLKFreq+0x14>)
 8004482:	681b      	ldr	r3, [r3, #0]
}
 8004484:	4618      	mov	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	20000000 	.word	0x20000000

08004494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004498:	f7ff fff0 	bl	800447c <HAL_RCC_GetHCLKFreq>
 800449c:	4602      	mov	r2, r0
 800449e:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	0a9b      	lsrs	r3, r3, #10
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	4903      	ldr	r1, [pc, #12]	; (80044b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044aa:	5ccb      	ldrb	r3, [r1, r3]
 80044ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40023800 	.word	0x40023800
 80044b8:	08008d24 	.word	0x08008d24

080044bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044c0:	f7ff ffdc 	bl	800447c <HAL_RCC_GetHCLKFreq>
 80044c4:	4602      	mov	r2, r0
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	0b5b      	lsrs	r3, r3, #13
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	4903      	ldr	r1, [pc, #12]	; (80044e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044d2:	5ccb      	ldrb	r3, [r1, r3]
 80044d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d8:	4618      	mov	r0, r3
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40023800 	.word	0x40023800
 80044e0:	08008d24 	.word	0x08008d24

080044e4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d105      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004508:	2b00      	cmp	r3, #0
 800450a:	d035      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800450c:	4b62      	ldr	r3, [pc, #392]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004512:	f7fc fdf9 	bl	8001108 <HAL_GetTick>
 8004516:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004518:	e008      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800451a:	f7fc fdf5 	bl	8001108 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e0b0      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800452c:	4b5b      	ldr	r3, [pc, #364]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f0      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	019a      	lsls	r2, r3, #6
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	071b      	lsls	r3, r3, #28
 8004544:	4955      	ldr	r1, [pc, #340]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800454c:	4b52      	ldr	r3, [pc, #328]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800454e:	2201      	movs	r2, #1
 8004550:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004552:	f7fc fdd9 	bl	8001108 <HAL_GetTick>
 8004556:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004558:	e008      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800455a:	f7fc fdd5 	bl	8001108 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e090      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800456c:	4b4b      	ldr	r3, [pc, #300]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0f0      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8083 	beq.w	800468c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	4b44      	ldr	r3, [pc, #272]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	4a43      	ldr	r2, [pc, #268]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004594:	6413      	str	r3, [r2, #64]	; 0x40
 8004596:	4b41      	ldr	r3, [pc, #260]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80045a2:	4b3f      	ldr	r3, [pc, #252]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a3e      	ldr	r2, [pc, #248]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045ae:	f7fc fdab 	bl	8001108 <HAL_GetTick>
 80045b2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045b4:	e008      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045b6:	f7fc fda7 	bl	8001108 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e062      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045c8:	4b35      	ldr	r3, [pc, #212]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0f0      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045d4:	4b31      	ldr	r3, [pc, #196]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045dc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d02f      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d028      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045f2:	4b2a      	ldr	r3, [pc, #168]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045fa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045fc:	4b29      	ldr	r3, [pc, #164]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045fe:	2201      	movs	r2, #1
 8004600:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004602:	4b28      	ldr	r3, [pc, #160]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004608:	4a24      	ldr	r2, [pc, #144]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800460e:	4b23      	ldr	r3, [pc, #140]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b01      	cmp	r3, #1
 8004618:	d114      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800461a:	f7fc fd75 	bl	8001108 <HAL_GetTick>
 800461e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004620:	e00a      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004622:	f7fc fd71 	bl	8001108 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004630:	4293      	cmp	r3, r2
 8004632:	d901      	bls.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e02a      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004638:	4b18      	ldr	r3, [pc, #96]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800463a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0ee      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800464c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004650:	d10d      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004652:	4b12      	ldr	r3, [pc, #72]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004666:	490d      	ldr	r1, [pc, #52]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004668:	4313      	orrs	r3, r2
 800466a:	608b      	str	r3, [r1, #8]
 800466c:	e005      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800466e:	4b0b      	ldr	r3, [pc, #44]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	4a0a      	ldr	r2, [pc, #40]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004674:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004678:	6093      	str	r3, [r2, #8]
 800467a:	4b08      	ldr	r3, [pc, #32]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800467c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004686:	4905      	ldr	r1, [pc, #20]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004688:	4313      	orrs	r3, r2
 800468a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	42470068 	.word	0x42470068
 800469c:	40023800 	.word	0x40023800
 80046a0:	40007000 	.word	0x40007000
 80046a4:	42470e40 	.word	0x42470e40

080046a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d13e      	bne.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80046c6:	4b23      	ldr	r3, [pc, #140]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d12f      	bne.n	800473c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80046dc:	4b1e      	ldr	r3, [pc, #120]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046de:	617b      	str	r3, [r7, #20]
          break;
 80046e0:	e02f      	b.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046e2:	4b1c      	ldr	r3, [pc, #112]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ee:	d108      	bne.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046f0:	4b18      	ldr	r3, [pc, #96]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046f8:	4a18      	ldr	r2, [pc, #96]	; (800475c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80046fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	e007      	b.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004702:	4b14      	ldr	r3, [pc, #80]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800470a:	4a15      	ldr	r2, [pc, #84]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800470c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004710:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004712:	4b10      	ldr	r3, [pc, #64]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004718:	099b      	lsrs	r3, r3, #6
 800471a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	fb02 f303 	mul.w	r3, r2, r3
 8004724:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004726:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800472c:	0f1b      	lsrs	r3, r3, #28
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	fbb2 f3f3 	udiv	r3, r2, r3
 8004738:	617b      	str	r3, [r7, #20]
          break;
 800473a:	e002      	b.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]
          break;
 8004740:	bf00      	nop
        }
      }
      break;
 8004742:	bf00      	nop
    }
  }
  return frequency;
 8004744:	697b      	ldr	r3, [r7, #20]
}
 8004746:	4618      	mov	r0, r3
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40023800 	.word	0x40023800
 8004758:	00bb8000 	.word	0x00bb8000
 800475c:	007a1200 	.word	0x007a1200
 8004760:	00f42400 	.word	0x00f42400

08004764 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e07b      	b.n	800486e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	2b00      	cmp	r3, #0
 800477c:	d108      	bne.n	8004790 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004786:	d009      	beq.n	800479c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	61da      	str	r2, [r3, #28]
 800478e:	e005      	b.n	800479c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fc fa7c 	bl	8000cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004820:	ea42 0103 	orr.w	r1, r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	0c1b      	lsrs	r3, r3, #16
 800483a:	f003 0104 	and.w	r1, r3, #4
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	f003 0210 	and.w	r2, r3, #16
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800485c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e03f      	b.n	8004908 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d106      	bne.n	80048a2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7fc fa71 	bl	8000d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2224      	movs	r2, #36	; 0x24
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048b8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f828 	bl	8004910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695a      	ldr	r2, [r3, #20]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048de:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048ee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004914:	b0c0      	sub	sp, #256	; 0x100
 8004916:	af00      	add	r7, sp, #0
 8004918:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	68d9      	ldr	r1, [r3, #12]
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	ea40 0301 	orr.w	r3, r0, r1
 8004938:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800493a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	431a      	orrs	r2, r3
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	431a      	orrs	r2, r3
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004968:	f021 010c 	bic.w	r1, r1, #12
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004976:	430b      	orrs	r3, r1
 8004978:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800497a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498a:	6999      	ldr	r1, [r3, #24]
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	ea40 0301 	orr.w	r3, r0, r1
 8004996:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	4b8f      	ldr	r3, [pc, #572]	; (8004bdc <UART_SetConfig+0x2cc>)
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d005      	beq.n	80049b0 <UART_SetConfig+0xa0>
 80049a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b8d      	ldr	r3, [pc, #564]	; (8004be0 <UART_SetConfig+0x2d0>)
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d104      	bne.n	80049ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049b0:	f7ff fd84 	bl	80044bc <HAL_RCC_GetPCLK2Freq>
 80049b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049b8:	e003      	b.n	80049c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049ba:	f7ff fd6b 	bl	8004494 <HAL_RCC_GetPCLK1Freq>
 80049be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049cc:	f040 810c 	bne.w	8004be8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d4:	2200      	movs	r2, #0
 80049d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049e2:	4622      	mov	r2, r4
 80049e4:	462b      	mov	r3, r5
 80049e6:	1891      	adds	r1, r2, r2
 80049e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80049ea:	415b      	adcs	r3, r3
 80049ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049f2:	4621      	mov	r1, r4
 80049f4:	eb12 0801 	adds.w	r8, r2, r1
 80049f8:	4629      	mov	r1, r5
 80049fa:	eb43 0901 	adc.w	r9, r3, r1
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a12:	4690      	mov	r8, r2
 8004a14:	4699      	mov	r9, r3
 8004a16:	4623      	mov	r3, r4
 8004a18:	eb18 0303 	adds.w	r3, r8, r3
 8004a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a20:	462b      	mov	r3, r5
 8004a22:	eb49 0303 	adc.w	r3, r9, r3
 8004a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a3e:	460b      	mov	r3, r1
 8004a40:	18db      	adds	r3, r3, r3
 8004a42:	653b      	str	r3, [r7, #80]	; 0x50
 8004a44:	4613      	mov	r3, r2
 8004a46:	eb42 0303 	adc.w	r3, r2, r3
 8004a4a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a54:	f7fb fbb8 	bl	80001c8 <__aeabi_uldivmod>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4b61      	ldr	r3, [pc, #388]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	011c      	lsls	r4, r3, #4
 8004a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a78:	4642      	mov	r2, r8
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	1891      	adds	r1, r2, r2
 8004a7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a80:	415b      	adcs	r3, r3
 8004a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a88:	4641      	mov	r1, r8
 8004a8a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a8e:	4649      	mov	r1, r9
 8004a90:	eb43 0b01 	adc.w	fp, r3, r1
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004aa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004aa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aa8:	4692      	mov	sl, r2
 8004aaa:	469b      	mov	fp, r3
 8004aac:	4643      	mov	r3, r8
 8004aae:	eb1a 0303 	adds.w	r3, sl, r3
 8004ab2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	eb4b 0303 	adc.w	r3, fp, r3
 8004abc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004acc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ad0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	18db      	adds	r3, r3, r3
 8004ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8004ada:	4613      	mov	r3, r2
 8004adc:	eb42 0303 	adc.w	r3, r2, r3
 8004ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ae6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004aea:	f7fb fb6d 	bl	80001c8 <__aeabi_uldivmod>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4611      	mov	r1, r2
 8004af4:	4b3b      	ldr	r3, [pc, #236]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004af6:	fba3 2301 	umull	r2, r3, r3, r1
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	2264      	movs	r2, #100	; 0x64
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	1acb      	subs	r3, r1, r3
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b0a:	4b36      	ldr	r3, [pc, #216]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004b0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b18:	441c      	add	r4, r3
 8004b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	1891      	adds	r1, r2, r2
 8004b32:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b34:	415b      	adcs	r3, r3
 8004b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	1851      	adds	r1, r2, r1
 8004b40:	6339      	str	r1, [r7, #48]	; 0x30
 8004b42:	4649      	mov	r1, r9
 8004b44:	414b      	adcs	r3, r1
 8004b46:	637b      	str	r3, [r7, #52]	; 0x34
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b54:	4659      	mov	r1, fp
 8004b56:	00cb      	lsls	r3, r1, #3
 8004b58:	4651      	mov	r1, sl
 8004b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b5e:	4651      	mov	r1, sl
 8004b60:	00ca      	lsls	r2, r1, #3
 8004b62:	4610      	mov	r0, r2
 8004b64:	4619      	mov	r1, r3
 8004b66:	4603      	mov	r3, r0
 8004b68:	4642      	mov	r2, r8
 8004b6a:	189b      	adds	r3, r3, r2
 8004b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b70:	464b      	mov	r3, r9
 8004b72:	460a      	mov	r2, r1
 8004b74:	eb42 0303 	adc.w	r3, r2, r3
 8004b78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b90:	460b      	mov	r3, r1
 8004b92:	18db      	adds	r3, r3, r3
 8004b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b96:	4613      	mov	r3, r2
 8004b98:	eb42 0303 	adc.w	r3, r2, r3
 8004b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ba2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ba6:	f7fb fb0f 	bl	80001c8 <__aeabi_uldivmod>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb4:	095b      	lsrs	r3, r3, #5
 8004bb6:	2164      	movs	r1, #100	; 0x64
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	3332      	adds	r3, #50	; 0x32
 8004bc2:	4a08      	ldr	r2, [pc, #32]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	f003 0207 	and.w	r2, r3, #7
 8004bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4422      	add	r2, r4
 8004bd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bd8:	e106      	b.n	8004de8 <UART_SetConfig+0x4d8>
 8004bda:	bf00      	nop
 8004bdc:	40011000 	.word	0x40011000
 8004be0:	40011400 	.word	0x40011400
 8004be4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bec:	2200      	movs	r2, #0
 8004bee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bf2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bf6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bfa:	4642      	mov	r2, r8
 8004bfc:	464b      	mov	r3, r9
 8004bfe:	1891      	adds	r1, r2, r2
 8004c00:	6239      	str	r1, [r7, #32]
 8004c02:	415b      	adcs	r3, r3
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
 8004c06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c0a:	4641      	mov	r1, r8
 8004c0c:	1854      	adds	r4, r2, r1
 8004c0e:	4649      	mov	r1, r9
 8004c10:	eb43 0501 	adc.w	r5, r3, r1
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	00eb      	lsls	r3, r5, #3
 8004c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c22:	00e2      	lsls	r2, r4, #3
 8004c24:	4614      	mov	r4, r2
 8004c26:	461d      	mov	r5, r3
 8004c28:	4643      	mov	r3, r8
 8004c2a:	18e3      	adds	r3, r4, r3
 8004c2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c30:	464b      	mov	r3, r9
 8004c32:	eb45 0303 	adc.w	r3, r5, r3
 8004c36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c56:	4629      	mov	r1, r5
 8004c58:	008b      	lsls	r3, r1, #2
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c60:	4621      	mov	r1, r4
 8004c62:	008a      	lsls	r2, r1, #2
 8004c64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c68:	f7fb faae 	bl	80001c8 <__aeabi_uldivmod>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4b60      	ldr	r3, [pc, #384]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004c72:	fba3 2302 	umull	r2, r3, r3, r2
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	011c      	lsls	r4, r3, #4
 8004c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c8c:	4642      	mov	r2, r8
 8004c8e:	464b      	mov	r3, r9
 8004c90:	1891      	adds	r1, r2, r2
 8004c92:	61b9      	str	r1, [r7, #24]
 8004c94:	415b      	adcs	r3, r3
 8004c96:	61fb      	str	r3, [r7, #28]
 8004c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	1851      	adds	r1, r2, r1
 8004ca0:	6139      	str	r1, [r7, #16]
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	414b      	adcs	r3, r1
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cb4:	4659      	mov	r1, fp
 8004cb6:	00cb      	lsls	r3, r1, #3
 8004cb8:	4651      	mov	r1, sl
 8004cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cbe:	4651      	mov	r1, sl
 8004cc0:	00ca      	lsls	r2, r1, #3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4642      	mov	r2, r8
 8004cca:	189b      	adds	r3, r3, r2
 8004ccc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cd0:	464b      	mov	r3, r9
 8004cd2:	460a      	mov	r2, r1
 8004cd4:	eb42 0303 	adc.w	r3, r2, r3
 8004cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ce6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cf4:	4649      	mov	r1, r9
 8004cf6:	008b      	lsls	r3, r1, #2
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cfe:	4641      	mov	r1, r8
 8004d00:	008a      	lsls	r2, r1, #2
 8004d02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d06:	f7fb fa5f 	bl	80001c8 <__aeabi_uldivmod>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4b38      	ldr	r3, [pc, #224]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004d12:	fba3 2301 	umull	r2, r3, r3, r1
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	2264      	movs	r2, #100	; 0x64
 8004d1a:	fb02 f303 	mul.w	r3, r2, r3
 8004d1e:	1acb      	subs	r3, r1, r3
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	3332      	adds	r3, #50	; 0x32
 8004d24:	4a33      	ldr	r2, [pc, #204]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d30:	441c      	add	r4, r3
 8004d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d36:	2200      	movs	r2, #0
 8004d38:	673b      	str	r3, [r7, #112]	; 0x70
 8004d3a:	677a      	str	r2, [r7, #116]	; 0x74
 8004d3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d40:	4642      	mov	r2, r8
 8004d42:	464b      	mov	r3, r9
 8004d44:	1891      	adds	r1, r2, r2
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	415b      	adcs	r3, r3
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d50:	4641      	mov	r1, r8
 8004d52:	1851      	adds	r1, r2, r1
 8004d54:	6039      	str	r1, [r7, #0]
 8004d56:	4649      	mov	r1, r9
 8004d58:	414b      	adcs	r3, r1
 8004d5a:	607b      	str	r3, [r7, #4]
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d68:	4659      	mov	r1, fp
 8004d6a:	00cb      	lsls	r3, r1, #3
 8004d6c:	4651      	mov	r1, sl
 8004d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d72:	4651      	mov	r1, sl
 8004d74:	00ca      	lsls	r2, r1, #3
 8004d76:	4610      	mov	r0, r2
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	189b      	adds	r3, r3, r2
 8004d80:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d82:	464b      	mov	r3, r9
 8004d84:	460a      	mov	r2, r1
 8004d86:	eb42 0303 	adc.w	r3, r2, r3
 8004d8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	663b      	str	r3, [r7, #96]	; 0x60
 8004d96:	667a      	str	r2, [r7, #100]	; 0x64
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004da4:	4649      	mov	r1, r9
 8004da6:	008b      	lsls	r3, r1, #2
 8004da8:	4641      	mov	r1, r8
 8004daa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dae:	4641      	mov	r1, r8
 8004db0:	008a      	lsls	r2, r1, #2
 8004db2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004db6:	f7fb fa07 	bl	80001c8 <__aeabi_uldivmod>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	2164      	movs	r1, #100	; 0x64
 8004dc8:	fb01 f303 	mul.w	r3, r1, r3
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	3332      	adds	r3, #50	; 0x32
 8004dd2:	4a08      	ldr	r2, [pc, #32]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd8:	095b      	lsrs	r3, r3, #5
 8004dda:	f003 020f 	and.w	r2, r3, #15
 8004dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4422      	add	r2, r4
 8004de6:	609a      	str	r2, [r3, #8]
}
 8004de8:	bf00      	nop
 8004dea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dee:	46bd      	mov	sp, r7
 8004df0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004df4:	51eb851f 	.word	0x51eb851f

08004df8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004df8:	b084      	sub	sp, #16
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	f107 001c 	add.w	r0, r7, #28
 8004e06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d122      	bne.n	8004e56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d105      	bne.n	8004e4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f9c0 	bl	80051d0 <USB_CoreReset>
 8004e50:	4603      	mov	r3, r0
 8004e52:	73fb      	strb	r3, [r7, #15]
 8004e54:	e01a      	b.n	8004e8c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f9b4 	bl	80051d0 <USB_CoreReset>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38
 8004e7e:	e005      	b.n	8004e8c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d10b      	bne.n	8004eaa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f043 0206 	orr.w	r2, r3, #6
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f043 0220 	orr.w	r2, r3, #32
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eb6:	b004      	add	sp, #16
 8004eb8:	4770      	bx	lr

08004eba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f043 0201 	orr.w	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f023 0201 	bic.w	r2, r3, #1
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b084      	sub	sp, #16
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	460b      	mov	r3, r1
 8004f08:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d115      	bne.n	8004f4c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f2c:	2001      	movs	r0, #1
 8004f2e:	f7fc f8f7 	bl	8001120 <HAL_Delay>
      ms++;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3301      	adds	r3, #1
 8004f36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f93a 	bl	80051b2 <USB_GetMode>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d01e      	beq.n	8004f82 <USB_SetCurrentMode+0x84>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b31      	cmp	r3, #49	; 0x31
 8004f48:	d9f0      	bls.n	8004f2c <USB_SetCurrentMode+0x2e>
 8004f4a:	e01a      	b.n	8004f82 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f4c:	78fb      	ldrb	r3, [r7, #3]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d115      	bne.n	8004f7e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f5e:	2001      	movs	r0, #1
 8004f60:	f7fc f8de 	bl	8001120 <HAL_Delay>
      ms++;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3301      	adds	r3, #1
 8004f68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f921 	bl	80051b2 <USB_GetMode>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d005      	beq.n	8004f82 <USB_SetCurrentMode+0x84>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b31      	cmp	r3, #49	; 0x31
 8004f7a:	d9f0      	bls.n	8004f5e <USB_SetCurrentMode+0x60>
 8004f7c:	e001      	b.n	8004f82 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e005      	b.n	8004f8e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b32      	cmp	r3, #50	; 0x32
 8004f86:	d101      	bne.n	8004f8c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4a13      	ldr	r2, [pc, #76]	; (8004ffc <USB_FlushTxFifo+0x64>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d901      	bls.n	8004fb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e01b      	b.n	8004ff0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	daf2      	bge.n	8004fa6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	019b      	lsls	r3, r3, #6
 8004fc8:	f043 0220 	orr.w	r2, r3, #32
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4a08      	ldr	r2, [pc, #32]	; (8004ffc <USB_FlushTxFifo+0x64>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d901      	bls.n	8004fe2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e006      	b.n	8004ff0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b20      	cmp	r3, #32
 8004fec:	d0f0      	beq.n	8004fd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	00030d40 	.word	0x00030d40

08005000 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	3301      	adds	r3, #1
 8005010:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	4a11      	ldr	r2, [pc, #68]	; (800505c <USB_FlushRxFifo+0x5c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d901      	bls.n	800501e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e018      	b.n	8005050 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	daf2      	bge.n	800500c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2210      	movs	r2, #16
 800502e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3301      	adds	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4a08      	ldr	r2, [pc, #32]	; (800505c <USB_FlushRxFifo+0x5c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d901      	bls.n	8005042 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e006      	b.n	8005050 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b10      	cmp	r3, #16
 800504c:	d0f0      	beq.n	8005030 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	00030d40 	.word	0x00030d40

08005060 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005060:	b480      	push	{r7}
 8005062:	b089      	sub	sp, #36	; 0x24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	4611      	mov	r1, r2
 800506c:	461a      	mov	r2, r3
 800506e:	460b      	mov	r3, r1
 8005070:	71fb      	strb	r3, [r7, #7]
 8005072:	4613      	mov	r3, r2
 8005074:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800507e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005082:	2b00      	cmp	r3, #0
 8005084:	d123      	bne.n	80050ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005086:	88bb      	ldrh	r3, [r7, #4]
 8005088:	3303      	adds	r3, #3
 800508a:	089b      	lsrs	r3, r3, #2
 800508c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800508e:	2300      	movs	r3, #0
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	e018      	b.n	80050c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005094:	79fb      	ldrb	r3, [r7, #7]
 8005096:	031a      	lsls	r2, r3, #12
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	4413      	add	r3, r2
 800509c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a0:	461a      	mov	r2, r3
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	3301      	adds	r3, #1
 80050ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	3301      	adds	r3, #1
 80050b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	3301      	adds	r3, #1
 80050b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	3301      	adds	r3, #1
 80050be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	3301      	adds	r3, #1
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d3e2      	bcc.n	8005094 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3724      	adds	r7, #36	; 0x24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050dc:	b480      	push	{r7}
 80050de:	b08b      	sub	sp, #44	; 0x2c
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	4613      	mov	r3, r2
 80050e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	089b      	lsrs	r3, r3, #2
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050fa:	88fb      	ldrh	r3, [r7, #6]
 80050fc:	f003 0303 	and.w	r3, r3, #3
 8005100:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005102:	2300      	movs	r3, #0
 8005104:	623b      	str	r3, [r7, #32]
 8005106:	e014      	b.n	8005132 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	601a      	str	r2, [r3, #0]
    pDest++;
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	3301      	adds	r3, #1
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	3301      	adds	r3, #1
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	3301      	adds	r3, #1
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	3301      	adds	r3, #1
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	3301      	adds	r3, #1
 8005130:	623b      	str	r3, [r7, #32]
 8005132:	6a3a      	ldr	r2, [r7, #32]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	429a      	cmp	r2, r3
 8005138:	d3e6      	bcc.n	8005108 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800513a:	8bfb      	ldrh	r3, [r7, #30]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01e      	beq.n	800517e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800514a:	461a      	mov	r2, r3
 800514c:	f107 0310 	add.w	r3, r7, #16
 8005150:	6812      	ldr	r2, [r2, #0]
 8005152:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	fa22 f303 	lsr.w	r3, r2, r3
 8005160:	b2da      	uxtb	r2, r3
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	701a      	strb	r2, [r3, #0]
      i++;
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	3301      	adds	r3, #1
 800516a:	623b      	str	r3, [r7, #32]
      pDest++;
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	3301      	adds	r3, #1
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005172:	8bfb      	ldrh	r3, [r7, #30]
 8005174:	3b01      	subs	r3, #1
 8005176:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005178:	8bfb      	ldrh	r3, [r7, #30]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1ea      	bne.n	8005154 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005180:	4618      	mov	r0, r3
 8005182:	372c      	adds	r7, #44	; 0x2c
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4013      	ands	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051a4:	68fb      	ldr	r3, [r7, #12]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f003 0301 	and.w	r3, r3, #1
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
	...

080051d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3301      	adds	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4a13      	ldr	r2, [pc, #76]	; (8005234 <USB_CoreReset+0x64>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d901      	bls.n	80051ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e01b      	b.n	8005226 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	daf2      	bge.n	80051dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f043 0201 	orr.w	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3301      	adds	r3, #1
 800520a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4a09      	ldr	r2, [pc, #36]	; (8005234 <USB_CoreReset+0x64>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d901      	bls.n	8005218 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e006      	b.n	8005226 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b01      	cmp	r3, #1
 8005222:	d0f0      	beq.n	8005206 <USB_CoreReset+0x36>

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	00030d40 	.word	0x00030d40

08005238 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005238:	b084      	sub	sp, #16
 800523a:	b580      	push	{r7, lr}
 800523c:	b086      	sub	sp, #24
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005246:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005258:	461a      	mov	r2, r3
 800525a:	2300      	movs	r3, #0
 800525c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d018      	beq.n	80052c0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800528e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005290:	2b01      	cmp	r3, #1
 8005292:	d10a      	bne.n	80052aa <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052a2:	f043 0304 	orr.w	r3, r3, #4
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	e014      	b.n	80052d4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052b8:	f023 0304 	bic.w	r3, r3, #4
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	e009      	b.n	80052d4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052ce:	f023 0304 	bic.w	r3, r3, #4
 80052d2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052d4:	2110      	movs	r1, #16
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff fe5e 	bl	8004f98 <USB_FlushTxFifo>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7ff fe8a 	bl	8005000 <USB_FlushRxFifo>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80052f6:	2300      	movs	r3, #0
 80052f8:	613b      	str	r3, [r7, #16]
 80052fa:	e015      	b.n	8005328 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005308:	461a      	mov	r2, r3
 800530a:	f04f 33ff 	mov.w	r3, #4294967295
 800530e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531c:	461a      	mov	r2, r3
 800531e:	2300      	movs	r3, #0
 8005320:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	3301      	adds	r3, #1
 8005326:	613b      	str	r3, [r7, #16]
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	429a      	cmp	r2, r3
 800532e:	d3e5      	bcc.n	80052fc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f04f 32ff 	mov.w	r2, #4294967295
 800533c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00b      	beq.n	8005362 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005350:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a13      	ldr	r2, [pc, #76]	; (80053a4 <USB_HostInit+0x16c>)
 8005356:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a13      	ldr	r2, [pc, #76]	; (80053a8 <USB_HostInit+0x170>)
 800535c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005360:	e009      	b.n	8005376 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2280      	movs	r2, #128	; 0x80
 8005366:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a10      	ldr	r2, [pc, #64]	; (80053ac <USB_HostInit+0x174>)
 800536c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a0f      	ldr	r2, [pc, #60]	; (80053b0 <USB_HostInit+0x178>)
 8005372:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	2b00      	cmp	r3, #0
 800537a:	d105      	bne.n	8005388 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f043 0210 	orr.w	r2, r3, #16
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699a      	ldr	r2, [r3, #24]
 800538c:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <USB_HostInit+0x17c>)
 800538e:	4313      	orrs	r3, r2
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005394:	7dfb      	ldrb	r3, [r7, #23]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053a0:	b004      	add	sp, #16
 80053a2:	4770      	bx	lr
 80053a4:	01000200 	.word	0x01000200
 80053a8:	00e00300 	.word	0x00e00300
 80053ac:	00600080 	.word	0x00600080
 80053b0:	004000e0 	.word	0x004000e0
 80053b4:	a3200008 	.word	0xa3200008

080053b8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053d6:	f023 0303 	bic.w	r3, r3, #3
 80053da:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	68f9      	ldr	r1, [r7, #12]
 80053ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053f0:	4313      	orrs	r3, r2
 80053f2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d107      	bne.n	800540a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005400:	461a      	mov	r2, r3
 8005402:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005406:	6053      	str	r3, [r2, #4]
 8005408:	e009      	b.n	800541e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800540a:	78fb      	ldrb	r3, [r7, #3]
 800540c:	2b02      	cmp	r3, #2
 800540e:	d106      	bne.n	800541e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005416:	461a      	mov	r2, r3
 8005418:	f241 7370 	movw	r3, #6000	; 0x1770
 800541c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800544c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800545a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800545c:	2064      	movs	r0, #100	; 0x64
 800545e:	f7fb fe5f 	bl	8001120 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800546a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800546e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005470:	200a      	movs	r0, #10
 8005472:	f7fb fe55 	bl	8001120 <HAL_Delay>

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	460b      	mov	r3, r1
 800548a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80054a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d109      	bne.n	80054c4 <USB_DriveVbus+0x44>
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d106      	bne.n	80054c4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054c2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ce:	d109      	bne.n	80054e4 <USB_DriveVbus+0x64>
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054e2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b085      	sub	sp, #20
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	0c5b      	lsrs	r3, r3, #17
 8005510:	f003 0303 	and.w	r3, r3, #3
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	b29b      	uxth	r3, r3
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
	...

08005544 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	4608      	mov	r0, r1
 800554e:	4611      	mov	r1, r2
 8005550:	461a      	mov	r2, r3
 8005552:	4603      	mov	r3, r0
 8005554:	70fb      	strb	r3, [r7, #3]
 8005556:	460b      	mov	r3, r1
 8005558:	70bb      	strb	r3, [r7, #2]
 800555a:	4613      	mov	r3, r2
 800555c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005566:	78fb      	ldrb	r3, [r7, #3]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	4413      	add	r3, r2
 800556e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005572:	461a      	mov	r2, r3
 8005574:	f04f 33ff 	mov.w	r3, #4294967295
 8005578:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800557a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800557e:	2b03      	cmp	r3, #3
 8005580:	d87e      	bhi.n	8005680 <USB_HC_Init+0x13c>
 8005582:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <USB_HC_Init+0x44>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	08005599 	.word	0x08005599
 800558c:	08005643 	.word	0x08005643
 8005590:	08005599 	.word	0x08005599
 8005594:	08005605 	.word	0x08005605
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a4:	461a      	mov	r2, r3
 80055a6:	f240 439d 	movw	r3, #1181	; 0x49d
 80055aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80055ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	da10      	bge.n	80055d6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	78fa      	ldrb	r2, [r7, #3]
 80055c4:	0151      	lsls	r1, r2, #5
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	440a      	add	r2, r1
 80055ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80055d4:	e057      	b.n	8005686 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d051      	beq.n	8005686 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80055e2:	78fb      	ldrb	r3, [r7, #3]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	78fa      	ldrb	r2, [r7, #3]
 80055f2:	0151      	lsls	r1, r2, #5
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	440a      	add	r2, r1
 80055f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005600:	60d3      	str	r3, [r2, #12]
      break;
 8005602:	e040      	b.n	8005686 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005604:	78fb      	ldrb	r3, [r7, #3]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	4413      	add	r3, r2
 800560c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005610:	461a      	mov	r2, r3
 8005612:	f240 639d 	movw	r3, #1693	; 0x69d
 8005616:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005618:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800561c:	2b00      	cmp	r3, #0
 800561e:	da34      	bge.n	800568a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	4413      	add	r3, r2
 8005628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	78fa      	ldrb	r2, [r7, #3]
 8005630:	0151      	lsls	r1, r2, #5
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	440a      	add	r2, r1
 8005636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800563a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005640:	e023      	b.n	800568a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	4413      	add	r3, r2
 800564a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564e:	461a      	mov	r2, r3
 8005650:	f240 2325 	movw	r3, #549	; 0x225
 8005654:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005656:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800565a:	2b00      	cmp	r3, #0
 800565c:	da17      	bge.n	800568e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800565e:	78fb      	ldrb	r3, [r7, #3]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	4413      	add	r3, r2
 8005666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	78fa      	ldrb	r2, [r7, #3]
 800566e:	0151      	lsls	r1, r2, #5
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	440a      	add	r2, r1
 8005674:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005678:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800567c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800567e:	e006      	b.n	800568e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	77fb      	strb	r3, [r7, #31]
      break;
 8005684:	e004      	b.n	8005690 <USB_HC_Init+0x14c>
      break;
 8005686:	bf00      	nop
 8005688:	e002      	b.n	8005690 <USB_HC_Init+0x14c>
      break;
 800568a:	bf00      	nop
 800568c:	e000      	b.n	8005690 <USB_HC_Init+0x14c>
      break;
 800568e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	4413      	add	r3, r2
 8005698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	78fa      	ldrb	r2, [r7, #3]
 80056a0:	0151      	lsls	r1, r2, #5
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	440a      	add	r2, r1
 80056a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056aa:	f043 0302 	orr.w	r3, r3, #2
 80056ae:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056b6:	699a      	ldr	r2, [r3, #24]
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	2101      	movs	r1, #1
 80056c0:	fa01 f303 	lsl.w	r3, r1, r3
 80056c4:	6939      	ldr	r1, [r7, #16]
 80056c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80056ca:	4313      	orrs	r3, r2
 80056cc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80056da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	da03      	bge.n	80056ea <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80056e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056e6:	61bb      	str	r3, [r7, #24]
 80056e8:	e001      	b.n	80056ee <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7ff feff 	bl	80054f2 <USB_GetHostSpeed>
 80056f4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80056f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d106      	bne.n	800570c <USB_HC_Init+0x1c8>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d003      	beq.n	800570c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005708:	617b      	str	r3, [r7, #20]
 800570a:	e001      	b.n	8005710 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005710:	787b      	ldrb	r3, [r7, #1]
 8005712:	059b      	lsls	r3, r3, #22
 8005714:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005718:	78bb      	ldrb	r3, [r7, #2]
 800571a:	02db      	lsls	r3, r3, #11
 800571c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005720:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005722:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005726:	049b      	lsls	r3, r3, #18
 8005728:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800572c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800572e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005730:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005734:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800573a:	78fb      	ldrb	r3, [r7, #3]
 800573c:	0159      	lsls	r1, r3, #5
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	440b      	add	r3, r1
 8005742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005746:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800574c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800574e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005752:	2b03      	cmp	r3, #3
 8005754:	d003      	beq.n	800575e <USB_HC_Init+0x21a>
 8005756:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800575a:	2b01      	cmp	r3, #1
 800575c:	d10f      	bne.n	800577e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	4413      	add	r3, r2
 8005766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	78fa      	ldrb	r2, [r7, #3]
 800576e:	0151      	lsls	r1, r2, #5
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	440a      	add	r2, r1
 8005774:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005778:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800577c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800577e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3720      	adds	r7, #32
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08c      	sub	sp, #48	; 0x30
 800578c:	af02      	add	r7, sp, #8
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	4613      	mov	r3, r2
 8005794:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	785b      	ldrb	r3, [r3, #1]
 800579e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80057a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057a4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d02d      	beq.n	800580e <USB_HC_StartXfer+0x86>
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	791b      	ldrb	r3, [r3, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d129      	bne.n	800580e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d117      	bne.n	80057f0 <USB_HC_StartXfer+0x68>
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	79db      	ldrb	r3, [r3, #7]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <USB_HC_StartXfer+0x48>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	79db      	ldrb	r3, [r3, #7]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d10f      	bne.n	80057f0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	0151      	lsls	r1, r2, #5
 80057e2:	6a3a      	ldr	r2, [r7, #32]
 80057e4:	440a      	add	r2, r1
 80057e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ee:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80057f0:	79fb      	ldrb	r3, [r7, #7]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10b      	bne.n	800580e <USB_HC_StartXfer+0x86>
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	795b      	ldrb	r3, [r3, #5]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d107      	bne.n	800580e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	785b      	ldrb	r3, [r3, #1]
 8005802:	4619      	mov	r1, r3
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 fa0f 	bl	8005c28 <USB_DoPing>
      return HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	e0f8      	b.n	8005a00 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d018      	beq.n	8005848 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	8912      	ldrh	r2, [r2, #8]
 800581e:	4413      	add	r3, r2
 8005820:	3b01      	subs	r3, #1
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	8912      	ldrh	r2, [r2, #8]
 8005826:	fbb3 f3f2 	udiv	r3, r3, r2
 800582a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800582c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800582e:	8b7b      	ldrh	r3, [r7, #26]
 8005830:	429a      	cmp	r2, r3
 8005832:	d90b      	bls.n	800584c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005834:	8b7b      	ldrh	r3, [r7, #26]
 8005836:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005838:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	8912      	ldrh	r2, [r2, #8]
 800583e:	fb03 f202 	mul.w	r2, r3, r2
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	611a      	str	r2, [r3, #16]
 8005846:	e001      	b.n	800584c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005848:	2301      	movs	r3, #1
 800584a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	78db      	ldrb	r3, [r3, #3]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d007      	beq.n	8005864 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005854:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	8912      	ldrh	r2, [r2, #8]
 800585a:	fb03 f202 	mul.w	r2, r3, r2
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	611a      	str	r2, [r3, #16]
 8005862:	e003      	b.n	800586c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	695a      	ldr	r2, [r3, #20]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005874:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005876:	04d9      	lsls	r1, r3, #19
 8005878:	4b63      	ldr	r3, [pc, #396]	; (8005a08 <USB_HC_StartXfer+0x280>)
 800587a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800587c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	7a9b      	ldrb	r3, [r3, #10]
 8005882:	075b      	lsls	r3, r3, #29
 8005884:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005888:	69f9      	ldr	r1, [r7, #28]
 800588a:	0148      	lsls	r0, r1, #5
 800588c:	6a39      	ldr	r1, [r7, #32]
 800588e:	4401      	add	r1, r0
 8005890:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005894:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005896:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005898:	79fb      	ldrb	r3, [r7, #7]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d009      	beq.n	80058b2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	68d9      	ldr	r1, [r3, #12]
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ae:	460a      	mov	r2, r1
 80058b0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	bf0c      	ite	eq
 80058c2:	2301      	moveq	r3, #1
 80058c4:	2300      	movne	r3, #0
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	69fa      	ldr	r2, [r7, #28]
 80058da:	0151      	lsls	r1, r2, #5
 80058dc:	6a3a      	ldr	r2, [r7, #32]
 80058de:	440a      	add	r2, r1
 80058e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80058e8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	7e7b      	ldrb	r3, [r7, #25]
 80058fa:	075b      	lsls	r3, r3, #29
 80058fc:	69f9      	ldr	r1, [r7, #28]
 80058fe:	0148      	lsls	r0, r1, #5
 8005900:	6a39      	ldr	r1, [r7, #32]
 8005902:	4401      	add	r1, r0
 8005904:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005908:	4313      	orrs	r3, r2
 800590a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	4413      	add	r3, r2
 8005914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005922:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	78db      	ldrb	r3, [r3, #3]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d004      	beq.n	8005936 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	e003      	b.n	800593e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800593c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005944:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	4413      	add	r3, r2
 800594e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005952:	461a      	mov	r2, r3
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	e04e      	b.n	8005a00 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	78db      	ldrb	r3, [r3, #3]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d149      	bne.n	80059fe <USB_HC_StartXfer+0x276>
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d045      	beq.n	80059fe <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	79db      	ldrb	r3, [r3, #7]
 8005976:	2b03      	cmp	r3, #3
 8005978:	d830      	bhi.n	80059dc <USB_HC_StartXfer+0x254>
 800597a:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <USB_HC_StartXfer+0x1f8>)
 800597c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005980:	08005991 	.word	0x08005991
 8005984:	080059b5 	.word	0x080059b5
 8005988:	08005991 	.word	0x08005991
 800598c:	080059b5 	.word	0x080059b5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	3303      	adds	r3, #3
 8005996:	089b      	lsrs	r3, r3, #2
 8005998:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800599a:	8afa      	ldrh	r2, [r7, #22]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d91c      	bls.n	80059e0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	f043 0220 	orr.w	r2, r3, #32
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	619a      	str	r2, [r3, #24]
        }
        break;
 80059b2:	e015      	b.n	80059e0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	3303      	adds	r3, #3
 80059ba:	089b      	lsrs	r3, r3, #2
 80059bc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80059be:	8afa      	ldrh	r2, [r7, #22]
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d90a      	bls.n	80059e4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80059da:	e003      	b.n	80059e4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80059dc:	bf00      	nop
 80059de:	e002      	b.n	80059e6 <USB_HC_StartXfer+0x25e>
        break;
 80059e0:	bf00      	nop
 80059e2:	e000      	b.n	80059e6 <USB_HC_StartXfer+0x25e>
        break;
 80059e4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	68d9      	ldr	r1, [r3, #12]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	785a      	ldrb	r2, [r3, #1]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	2000      	movs	r0, #0
 80059f6:	9000      	str	r0, [sp, #0]
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f7ff fb31 	bl	8005060 <USB_WritePacket>
  }

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3728      	adds	r7, #40	; 0x28
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	1ff80000 	.word	0x1ff80000

08005a0c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	b29b      	uxth	r3, r3
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b089      	sub	sp, #36	; 0x24
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	460b      	mov	r3, r1
 8005a38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005a3e:	78fb      	ldrb	r3, [r7, #3]
 8005a40:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	0c9b      	lsrs	r3, r3, #18
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	0fdb      	lsrs	r3, r3, #31
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b20      	cmp	r3, #32
 8005a7c:	d104      	bne.n	8005a88 <USB_HC_Halt+0x5a>
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	e0c8      	b.n	8005c1a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <USB_HC_Halt+0x66>
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d163      	bne.n	8005b5c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	0151      	lsls	r1, r2, #5
 8005aa6:	69fa      	ldr	r2, [r7, #28]
 8005aa8:	440a      	add	r2, r1
 8005aaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ab2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f040 80ab 	bne.w	8005c18 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d133      	bne.n	8005b36 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ae8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005aec:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b0c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3301      	adds	r3, #1
 8005b12:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b1a:	d81d      	bhi.n	8005b58 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b32:	d0ec      	beq.n	8005b0e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b34:	e070      	b.n	8005c18 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	0151      	lsls	r1, r2, #5
 8005b48:	69fa      	ldr	r2, [r7, #28]
 8005b4a:	440a      	add	r2, r1
 8005b4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b54:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b56:	e05f      	b.n	8005c18 <USB_HC_Halt+0x1ea>
            break;
 8005b58:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b5a:	e05d      	b.n	8005c18 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	0151      	lsls	r1, r2, #5
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	440a      	add	r2, r1
 8005b72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b7a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d133      	bne.n	8005bf4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	0151      	lsls	r1, r2, #5
 8005b9e:	69fa      	ldr	r2, [r7, #28]
 8005ba0:	440a      	add	r2, r1
 8005ba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ba6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005baa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	0151      	lsls	r1, r2, #5
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	440a      	add	r2, r1
 8005bc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bca:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bd8:	d81d      	bhi.n	8005c16 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bf0:	d0ec      	beq.n	8005bcc <USB_HC_Halt+0x19e>
 8005bf2:	e011      	b.n	8005c18 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	0151      	lsls	r1, r2, #5
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	440a      	add	r2, r1
 8005c0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	e000      	b.n	8005c18 <USB_HC_Halt+0x1ea>
          break;
 8005c16:	bf00      	nop
    }
  }

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3724      	adds	r7, #36	; 0x24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
	...

08005c28 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	04da      	lsls	r2, r3, #19
 8005c44:	4b15      	ldr	r3, [pc, #84]	; (8005c9c <USB_DoPing+0x74>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	0151      	lsls	r1, r2, #5
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	440a      	add	r2, r1
 8005c50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c58:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c70:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c78:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c86:	461a      	mov	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	1ff80000 	.word	0x1ff80000

08005ca0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff f911 	bl	8004edc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cba:	2110      	movs	r1, #16
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff f96b 	bl	8004f98 <USB_FlushTxFifo>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff f997 	bl	8005000 <USB_FlushRxFifo>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005cdc:	2300      	movs	r3, #0
 8005cde:	61bb      	str	r3, [r7, #24]
 8005ce0:	e01f      	b.n	8005d22 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cf8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d08:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d16:	461a      	mov	r2, r3
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	61bb      	str	r3, [r7, #24]
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	2b0f      	cmp	r3, #15
 8005d26:	d9dc      	bls.n	8005ce2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61bb      	str	r3, [r7, #24]
 8005d2c:	e034      	b.n	8005d98 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d44:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d4c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d54:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d62:	461a      	mov	r2, r3
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d74:	d80c      	bhi.n	8005d90 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d8c:	d0ec      	beq.n	8005d68 <USB_StopHost+0xc8>
 8005d8e:	e000      	b.n	8005d92 <USB_StopHost+0xf2>
        break;
 8005d90:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	3301      	adds	r3, #1
 8005d96:	61bb      	str	r3, [r7, #24]
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	2b0f      	cmp	r3, #15
 8005d9c:	d9c7      	bls.n	8005d2e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005da4:	461a      	mov	r2, r3
 8005da6:	f04f 33ff 	mov.w	r3, #4294967295
 8005daa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f04f 32ff 	mov.w	r2, #4294967295
 8005db2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff f880 	bl	8004eba <USB_EnableGlobalInt>

  return ret;
 8005dba:	7ffb      	ldrb	r3, [r7, #31]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3720      	adds	r7, #32
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005dc4:	b590      	push	{r4, r7, lr}
 8005dc6:	b089      	sub	sp, #36	; 0x24
 8005dc8:	af04      	add	r7, sp, #16
 8005dca:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005dcc:	2301      	movs	r3, #1
 8005dce:	2202      	movs	r2, #2
 8005dd0:	2102      	movs	r1, #2
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fc66 	bl	80066a4 <USBH_FindInterface>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	2bff      	cmp	r3, #255	; 0xff
 8005de0:	d002      	beq.n	8005de8 <USBH_CDC_InterfaceInit+0x24>
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d901      	bls.n	8005dec <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005de8:	2302      	movs	r3, #2
 8005dea:	e13d      	b.n	8006068 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fc3b 	bl	800666c <USBH_SelectInterface>
 8005df6:	4603      	mov	r3, r0
 8005df8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005dfa:	7bbb      	ldrb	r3, [r7, #14]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005e00:	2302      	movs	r3, #2
 8005e02:	e131      	b.n	8006068 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005e0a:	2050      	movs	r0, #80	; 0x50
 8005e0c:	f002 fac4 	bl	8008398 <malloc>
 8005e10:	4603      	mov	r3, r0
 8005e12:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005e24:	2302      	movs	r3, #2
 8005e26:	e11f      	b.n	8006068 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005e28:	2250      	movs	r2, #80	; 0x50
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	68b8      	ldr	r0, [r7, #8]
 8005e2e:	f002 fd53 	bl	80088d8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	211a      	movs	r1, #26
 8005e38:	fb01 f303 	mul.w	r3, r1, r3
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	b25b      	sxtb	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	da15      	bge.n	8005e76 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	211a      	movs	r1, #26
 8005e50:	fb01 f303 	mul.w	r3, r1, r3
 8005e54:	4413      	add	r3, r2
 8005e56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e5a:	781a      	ldrb	r2, [r3, #0]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	211a      	movs	r1, #26
 8005e66:	fb01 f303 	mul.w	r3, r1, r3
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e70:	881a      	ldrh	r2, [r3, #0]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	785b      	ldrb	r3, [r3, #1]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f001 ff2e 	bl	8007cde <USBH_AllocPipe>
 8005e82:	4603      	mov	r3, r0
 8005e84:	461a      	mov	r2, r3
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	7819      	ldrb	r1, [r3, #0]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	7858      	ldrb	r0, [r3, #1]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	8952      	ldrh	r2, [r2, #10]
 8005ea2:	9202      	str	r2, [sp, #8]
 8005ea4:	2203      	movs	r2, #3
 8005ea6:	9201      	str	r2, [sp, #4]
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	4623      	mov	r3, r4
 8005eac:	4602      	mov	r2, r0
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f001 fee6 	bl	8007c80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f002 f9e7 	bl	8008290 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	210a      	movs	r1, #10
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fbeb 	bl	80066a4 <USBH_FindInterface>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	2bff      	cmp	r3, #255	; 0xff
 8005ed6:	d002      	beq.n	8005ede <USBH_CDC_InterfaceInit+0x11a>
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d901      	bls.n	8005ee2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005ede:	2302      	movs	r3, #2
 8005ee0:	e0c2      	b.n	8006068 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	211a      	movs	r1, #26
 8005ee8:	fb01 f303 	mul.w	r3, r1, r3
 8005eec:	4413      	add	r3, r2
 8005eee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	b25b      	sxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	da16      	bge.n	8005f28 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	211a      	movs	r1, #26
 8005f00:	fb01 f303 	mul.w	r3, r1, r3
 8005f04:	4413      	add	r3, r2
 8005f06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f0a:	781a      	ldrb	r2, [r3, #0]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	211a      	movs	r1, #26
 8005f16:	fb01 f303 	mul.w	r3, r1, r3
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f20:	881a      	ldrh	r2, [r3, #0]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	835a      	strh	r2, [r3, #26]
 8005f26:	e015      	b.n	8005f54 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	211a      	movs	r1, #26
 8005f2e:	fb01 f303 	mul.w	r3, r1, r3
 8005f32:	4413      	add	r3, r2
 8005f34:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f38:	781a      	ldrb	r2, [r3, #0]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	211a      	movs	r1, #26
 8005f44:	fb01 f303 	mul.w	r3, r1, r3
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f4e:	881a      	ldrh	r2, [r3, #0]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	211a      	movs	r1, #26
 8005f5a:	fb01 f303 	mul.w	r3, r1, r3
 8005f5e:	4413      	add	r3, r2
 8005f60:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	b25b      	sxtb	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	da16      	bge.n	8005f9a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	211a      	movs	r1, #26
 8005f72:	fb01 f303 	mul.w	r3, r1, r3
 8005f76:	4413      	add	r3, r2
 8005f78:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f7c:	781a      	ldrb	r2, [r3, #0]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	211a      	movs	r1, #26
 8005f88:	fb01 f303 	mul.w	r3, r1, r3
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f92:	881a      	ldrh	r2, [r3, #0]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	835a      	strh	r2, [r3, #26]
 8005f98:	e015      	b.n	8005fc6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	211a      	movs	r1, #26
 8005fa0:	fb01 f303 	mul.w	r3, r1, r3
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005faa:	781a      	ldrb	r2, [r3, #0]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	211a      	movs	r1, #26
 8005fb6:	fb01 f303 	mul.w	r3, r1, r3
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005fc0:	881a      	ldrh	r2, [r3, #0]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	7b9b      	ldrb	r3, [r3, #14]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 fe86 	bl	8007cde <USBH_AllocPipe>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	7bdb      	ldrb	r3, [r3, #15]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 fe7c 	bl	8007cde <USBH_AllocPipe>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	461a      	mov	r2, r3
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	7b59      	ldrb	r1, [r3, #13]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	7b98      	ldrb	r0, [r3, #14]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	8b12      	ldrh	r2, [r2, #24]
 8006006:	9202      	str	r2, [sp, #8]
 8006008:	2202      	movs	r2, #2
 800600a:	9201      	str	r2, [sp, #4]
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	4623      	mov	r3, r4
 8006010:	4602      	mov	r2, r0
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f001 fe34 	bl	8007c80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	7b19      	ldrb	r1, [r3, #12]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	7bd8      	ldrb	r0, [r3, #15]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	8b52      	ldrh	r2, [r2, #26]
 8006030:	9202      	str	r2, [sp, #8]
 8006032:	2202      	movs	r2, #2
 8006034:	9201      	str	r2, [sp, #4]
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	4623      	mov	r3, r4
 800603a:	4602      	mov	r2, r0
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f001 fe1f 	bl	8007c80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	7b5b      	ldrb	r3, [r3, #13]
 800604e:	2200      	movs	r2, #0
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f002 f91c 	bl	8008290 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	7b1b      	ldrb	r3, [r3, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	4619      	mov	r1, r3
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f002 f915 	bl	8008290 <USBH_LL_SetToggle>

  return USBH_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	bd90      	pop	{r4, r7, pc}

08006070 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00e      	beq.n	80060a8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f001 fe14 	bl	8007cbe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 fe3f 	bl	8007d20 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	7b1b      	ldrb	r3, [r3, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00e      	beq.n	80060ce <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	7b1b      	ldrb	r3, [r3, #12]
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f001 fe01 	bl	8007cbe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	7b1b      	ldrb	r3, [r3, #12]
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f001 fe2c 	bl	8007d20 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	7b5b      	ldrb	r3, [r3, #13]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00e      	beq.n	80060f4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	7b5b      	ldrb	r3, [r3, #13]
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f001 fdee 	bl	8007cbe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	7b5b      	ldrb	r3, [r3, #13]
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f001 fe19 	bl	8007d20 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00b      	beq.n	8006118 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	4618      	mov	r0, r3
 800610a:	f002 f94d 	bl	80083a8 <free>
    phost->pActiveClass->pData = 0U;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006114:	2200      	movs	r2, #0
 8006116:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	3340      	adds	r3, #64	; 0x40
 8006138:	4619      	mov	r1, r3
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f8b1 	bl	80062a2 <GetLineCoding>
 8006140:	4603      	mov	r3, r0
 8006142:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006144:	7afb      	ldrb	r3, [r7, #11]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d105      	bne.n	8006156 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006150:	2102      	movs	r1, #2
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006156:	7afb      	ldrb	r3, [r7, #11]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006168:	2301      	movs	r3, #1
 800616a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006180:	2b04      	cmp	r3, #4
 8006182:	d877      	bhi.n	8006274 <USBH_CDC_Process+0x114>
 8006184:	a201      	add	r2, pc, #4	; (adr r2, 800618c <USBH_CDC_Process+0x2c>)
 8006186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618a:	bf00      	nop
 800618c:	080061a1 	.word	0x080061a1
 8006190:	080061a7 	.word	0x080061a7
 8006194:	080061d7 	.word	0x080061d7
 8006198:	0800624b 	.word	0x0800624b
 800619c:	08006259 	.word	0x08006259
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	73fb      	strb	r3, [r7, #15]
      break;
 80061a4:	e06d      	b.n	8006282 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061aa:	4619      	mov	r1, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f897 	bl	80062e0 <SetLineCoding>
 80061b2:	4603      	mov	r3, r0
 80061b4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80061b6:	7bbb      	ldrb	r3, [r7, #14]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d104      	bne.n	80061c6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80061c4:	e058      	b.n	8006278 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80061c6:	7bbb      	ldrb	r3, [r7, #14]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d055      	beq.n	8006278 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2204      	movs	r2, #4
 80061d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80061d4:	e050      	b.n	8006278 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	3340      	adds	r3, #64	; 0x40
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f860 	bl	80062a2 <GetLineCoding>
 80061e2:	4603      	mov	r3, r0
 80061e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80061e6:	7bbb      	ldrb	r3, [r7, #14]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d126      	bne.n	800623a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061fe:	791b      	ldrb	r3, [r3, #4]
 8006200:	429a      	cmp	r2, r3
 8006202:	d13b      	bne.n	800627c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800620e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006210:	429a      	cmp	r2, r3
 8006212:	d133      	bne.n	800627c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800621e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006220:	429a      	cmp	r2, r3
 8006222:	d12b      	bne.n	800627c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800622c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800622e:	429a      	cmp	r2, r3
 8006230:	d124      	bne.n	800627c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f958 	bl	80064e8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006238:	e020      	b.n	800627c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800623a:	7bbb      	ldrb	r3, [r7, #14]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d01d      	beq.n	800627c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2204      	movs	r2, #4
 8006244:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006248:	e018      	b.n	800627c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f867 	bl	800631e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f8da 	bl	800640a <CDC_ProcessReception>
      break;
 8006256:	e014      	b.n	8006282 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006258:	2100      	movs	r1, #0
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 ffef 	bl	800723e <USBH_ClrFeature>
 8006260:	4603      	mov	r3, r0
 8006262:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006264:	7bbb      	ldrb	r3, [r7, #14]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10a      	bne.n	8006280 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006272:	e005      	b.n	8006280 <USBH_CDC_Process+0x120>

    default:
      break;
 8006274:	bf00      	nop
 8006276:	e004      	b.n	8006282 <USBH_CDC_Process+0x122>
      break;
 8006278:	bf00      	nop
 800627a:	e002      	b.n	8006282 <USBH_CDC_Process+0x122>
      break;
 800627c:	bf00      	nop
 800627e:	e000      	b.n	8006282 <USBH_CDC_Process+0x122>
      break;
 8006280:	bf00      	nop

  }

  return status;
 8006282:	7bfb      	ldrb	r3, [r7, #15]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b082      	sub	sp, #8
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	22a1      	movs	r2, #161	; 0xa1
 80062b0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2221      	movs	r2, #33	; 0x21
 80062b6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2207      	movs	r2, #7
 80062c8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2207      	movs	r2, #7
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f001 fa83 	bl	80077dc <USBH_CtlReq>
 80062d6:	4603      	mov	r3, r0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2221      	movs	r2, #33	; 0x21
 80062ee:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2207      	movs	r2, #7
 8006306:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2207      	movs	r2, #7
 800630c:	4619      	mov	r1, r3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f001 fa64 	bl	80077dc <USBH_CtlReq>
 8006314:	4603      	mov	r3, r0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b086      	sub	sp, #24
 8006322:	af02      	add	r7, sp, #8
 8006324:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006330:	2300      	movs	r3, #0
 8006332:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800633a:	2b01      	cmp	r3, #1
 800633c:	d002      	beq.n	8006344 <CDC_ProcessTransmission+0x26>
 800633e:	2b02      	cmp	r3, #2
 8006340:	d023      	beq.n	800638a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006342:	e05e      	b.n	8006402 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	8b12      	ldrh	r2, [r2, #24]
 800634c:	4293      	cmp	r3, r2
 800634e:	d90b      	bls.n	8006368 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	69d9      	ldr	r1, [r3, #28]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8b1a      	ldrh	r2, [r3, #24]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	7b5b      	ldrb	r3, [r3, #13]
 800635c:	2001      	movs	r0, #1
 800635e:	9000      	str	r0, [sp, #0]
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 fc4a 	bl	8007bfa <USBH_BulkSendData>
 8006366:	e00b      	b.n	8006380 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006370:	b29a      	uxth	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	7b5b      	ldrb	r3, [r3, #13]
 8006376:	2001      	movs	r0, #1
 8006378:	9000      	str	r0, [sp, #0]
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 fc3d 	bl	8007bfa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006388:	e03b      	b.n	8006402 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	7b5b      	ldrb	r3, [r3, #13]
 800638e:	4619      	mov	r1, r3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f001 ff53 	bl	800823c <USBH_LL_GetURBState>
 8006396:	4603      	mov	r3, r0
 8006398:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800639a:	7afb      	ldrb	r3, [r7, #11]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d128      	bne.n	80063f2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	8b12      	ldrh	r2, [r2, #24]
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d90e      	bls.n	80063ca <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	8b12      	ldrh	r2, [r2, #24]
 80063b4:	1a9a      	subs	r2, r3, r2
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	8b12      	ldrh	r2, [r2, #24]
 80063c2:	441a      	add	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	61da      	str	r2, [r3, #28]
 80063c8:	e002      	b.n	80063d0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d004      	beq.n	80063e2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063e0:	e00e      	b.n	8006400 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f868 	bl	80064c0 <USBH_CDC_TransmitCallback>
      break;
 80063f0:	e006      	b.n	8006400 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80063f2:	7afb      	ldrb	r3, [r7, #11]
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d103      	bne.n	8006400 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006400:	bf00      	nop
  }
}
 8006402:	bf00      	nop
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b086      	sub	sp, #24
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800641c:	2300      	movs	r3, #0
 800641e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006426:	2b03      	cmp	r3, #3
 8006428:	d002      	beq.n	8006430 <CDC_ProcessReception+0x26>
 800642a:	2b04      	cmp	r3, #4
 800642c:	d00e      	beq.n	800644c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800642e:	e043      	b.n	80064b8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	6a19      	ldr	r1, [r3, #32]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	8b5a      	ldrh	r2, [r3, #26]
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	7b1b      	ldrb	r3, [r3, #12]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 fc01 	bl	8007c44 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2204      	movs	r2, #4
 8006446:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800644a:	e035      	b.n	80064b8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	7b1b      	ldrb	r3, [r3, #12]
 8006450:	4619      	mov	r1, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 fef2 	bl	800823c <USBH_LL_GetURBState>
 8006458:	4603      	mov	r3, r0
 800645a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800645c:	7cfb      	ldrb	r3, [r7, #19]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d129      	bne.n	80064b6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	7b1b      	ldrb	r3, [r3, #12]
 8006466:	4619      	mov	r1, r3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f001 fe55 	bl	8008118 <USBH_LL_GetLastXferSize>
 800646e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	429a      	cmp	r2, r3
 8006478:	d016      	beq.n	80064a8 <CDC_ProcessReception+0x9e>
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	8b5b      	ldrh	r3, [r3, #26]
 800647e:	461a      	mov	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4293      	cmp	r3, r2
 8006484:	d910      	bls.n	80064a8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1ad2      	subs	r2, r2, r3
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	6a1a      	ldr	r2, [r3, #32]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	441a      	add	r2, r3
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2203      	movs	r2, #3
 80064a2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80064a6:	e006      	b.n	80064b6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f80f 	bl	80064d4 <USBH_CDC_ReceiveCallback>
      break;
 80064b6:	bf00      	nop
  }
}
 80064b8:	bf00      	nop
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	4613      	mov	r3, r2
 8006508:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006510:	2302      	movs	r3, #2
 8006512:	e029      	b.n	8006568 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	79fa      	ldrb	r2, [r7, #7]
 8006518:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 f81f 	bl	8006570 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d003      	beq.n	8006560 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f001 fd25 	bl	8007fb0 <USBH_LL_Init>

  return USBH_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800657c:	2300      	movs	r3, #0
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	e009      	b.n	8006596 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	33e0      	adds	r3, #224	; 0xe0
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	2200      	movs	r2, #0
 800658e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3301      	adds	r3, #1
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b0f      	cmp	r3, #15
 800659a:	d9f2      	bls.n	8006582 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800659c:	2300      	movs	r3, #0
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	e009      	b.n	80065b6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80065ac:	2200      	movs	r2, #0
 80065ae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3301      	adds	r3, #1
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065bc:	d3f1      	bcc.n	80065a2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2240      	movs	r2, #64	; 0x40
 80065e2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d016      	beq.n	800665a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10e      	bne.n	8006654 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800663c:	1c59      	adds	r1, r3, #1
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	33de      	adds	r3, #222	; 0xde
 8006648:	6839      	ldr	r1, [r7, #0]
 800664a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	73fb      	strb	r3, [r7, #15]
 8006652:	e004      	b.n	800665e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006654:	2302      	movs	r3, #2
 8006656:	73fb      	strb	r3, [r7, #15]
 8006658:	e001      	b.n	800665e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800665a:	2302      	movs	r3, #2
 800665c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800665e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006682:	78fa      	ldrb	r2, [r7, #3]
 8006684:	429a      	cmp	r2, r3
 8006686:	d204      	bcs.n	8006692 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	78fa      	ldrb	r2, [r7, #3]
 800668c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006690:	e001      	b.n	8006696 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006692:	2302      	movs	r3, #2
 8006694:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006696:	7bfb      	ldrb	r3, [r7, #15]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	4608      	mov	r0, r1
 80066ae:	4611      	mov	r1, r2
 80066b0:	461a      	mov	r2, r3
 80066b2:	4603      	mov	r3, r0
 80066b4:	70fb      	strb	r3, [r7, #3]
 80066b6:	460b      	mov	r3, r1
 80066b8:	70bb      	strb	r3, [r7, #2]
 80066ba:	4613      	mov	r3, r2
 80066bc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80066c2:	2300      	movs	r3, #0
 80066c4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80066cc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80066ce:	e025      	b.n	800671c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80066d0:	7dfb      	ldrb	r3, [r7, #23]
 80066d2:	221a      	movs	r2, #26
 80066d4:	fb02 f303 	mul.w	r3, r2, r3
 80066d8:	3308      	adds	r3, #8
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	3302      	adds	r3, #2
 80066e0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	795b      	ldrb	r3, [r3, #5]
 80066e6:	78fa      	ldrb	r2, [r7, #3]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d002      	beq.n	80066f2 <USBH_FindInterface+0x4e>
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	2bff      	cmp	r3, #255	; 0xff
 80066f0:	d111      	bne.n	8006716 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80066f6:	78ba      	ldrb	r2, [r7, #2]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d002      	beq.n	8006702 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066fc:	78bb      	ldrb	r3, [r7, #2]
 80066fe:	2bff      	cmp	r3, #255	; 0xff
 8006700:	d109      	bne.n	8006716 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006706:	787a      	ldrb	r2, [r7, #1]
 8006708:	429a      	cmp	r2, r3
 800670a:	d002      	beq.n	8006712 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800670c:	787b      	ldrb	r3, [r7, #1]
 800670e:	2bff      	cmp	r3, #255	; 0xff
 8006710:	d101      	bne.n	8006716 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006712:	7dfb      	ldrb	r3, [r7, #23]
 8006714:	e006      	b.n	8006724 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006716:	7dfb      	ldrb	r3, [r7, #23]
 8006718:	3301      	adds	r3, #1
 800671a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800671c:	7dfb      	ldrb	r3, [r7, #23]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d9d6      	bls.n	80066d0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006722:	23ff      	movs	r3, #255	; 0xff
}
 8006724:	4618      	mov	r0, r3
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f001 fc75 	bl	8008028 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800673e:	2101      	movs	r1, #1
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 fd8e 	bl	8008262 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b088      	sub	sp, #32
 8006754:	af04      	add	r7, sp, #16
 8006756:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006758:	2302      	movs	r3, #2
 800675a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800675c:	2300      	movs	r3, #0
 800675e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b01      	cmp	r3, #1
 800676a:	d102      	bne.n	8006772 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2203      	movs	r2, #3
 8006770:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b0b      	cmp	r3, #11
 800677a:	f200 81be 	bhi.w	8006afa <USBH_Process+0x3aa>
 800677e:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <USBH_Process+0x34>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	080067b5 	.word	0x080067b5
 8006788:	080067e7 	.word	0x080067e7
 800678c:	0800684f 	.word	0x0800684f
 8006790:	08006a95 	.word	0x08006a95
 8006794:	08006afb 	.word	0x08006afb
 8006798:	080068f3 	.word	0x080068f3
 800679c:	08006a3b 	.word	0x08006a3b
 80067a0:	08006929 	.word	0x08006929
 80067a4:	08006949 	.word	0x08006949
 80067a8:	08006969 	.word	0x08006969
 80067ac:	080069ad 	.word	0x080069ad
 80067b0:	08006a7d 	.word	0x08006a7d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 819e 	beq.w	8006afe <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80067c8:	20c8      	movs	r0, #200	; 0xc8
 80067ca:	f001 fd91 	bl	80082f0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f001 fc87 	bl	80080e2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80067e4:	e18b      	b.n	8006afe <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d107      	bne.n	8006800 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80067fe:	e18d      	b.n	8006b1c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800680a:	d914      	bls.n	8006836 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006812:	3301      	adds	r3, #1
 8006814:	b2da      	uxtb	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006822:	2b03      	cmp	r3, #3
 8006824:	d903      	bls.n	800682e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	220d      	movs	r2, #13
 800682a:	701a      	strb	r2, [r3, #0]
      break;
 800682c:	e176      	b.n	8006b1c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	701a      	strb	r2, [r3, #0]
      break;
 8006834:	e172      	b.n	8006b1c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800683c:	f103 020a 	add.w	r2, r3, #10
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006846:	200a      	movs	r0, #10
 8006848:	f001 fd52 	bl	80082f0 <USBH_Delay>
      break;
 800684c:	e166      	b.n	8006b1c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006854:	2b00      	cmp	r3, #0
 8006856:	d005      	beq.n	8006864 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800685e:	2104      	movs	r1, #4
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006864:	2064      	movs	r0, #100	; 0x64
 8006866:	f001 fd43 	bl	80082f0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f001 fc12 	bl	8008094 <USBH_LL_GetSpeed>
 8006870:	4603      	mov	r3, r0
 8006872:	461a      	mov	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2205      	movs	r2, #5
 800687e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006880:	2100      	movs	r1, #0
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f001 fa2b 	bl	8007cde <USBH_AllocPipe>
 8006888:	4603      	mov	r3, r0
 800688a:	461a      	mov	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006890:	2180      	movs	r1, #128	; 0x80
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f001 fa23 	bl	8007cde <USBH_AllocPipe>
 8006898:	4603      	mov	r3, r0
 800689a:	461a      	mov	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	7919      	ldrb	r1, [r3, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80068b4:	b292      	uxth	r2, r2
 80068b6:	9202      	str	r2, [sp, #8]
 80068b8:	2200      	movs	r2, #0
 80068ba:	9201      	str	r2, [sp, #4]
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	4603      	mov	r3, r0
 80068c0:	2280      	movs	r2, #128	; 0x80
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f001 f9dc 	bl	8007c80 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	7959      	ldrb	r1, [r3, #5]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80068dc:	b292      	uxth	r2, r2
 80068de:	9202      	str	r2, [sp, #8]
 80068e0:	2200      	movs	r2, #0
 80068e2:	9201      	str	r2, [sp, #4]
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	4603      	mov	r3, r0
 80068e8:	2200      	movs	r2, #0
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 f9c8 	bl	8007c80 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068f0:	e114      	b.n	8006b1c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f918 	bl	8006b28 <USBH_HandleEnum>
 80068f8:	4603      	mov	r3, r0
 80068fa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80068fc:	7bbb      	ldrb	r3, [r7, #14]
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	f040 80fe 	bne.w	8006b02 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006914:	2b01      	cmp	r3, #1
 8006916:	d103      	bne.n	8006920 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2208      	movs	r2, #8
 800691c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800691e:	e0f0      	b.n	8006b02 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2207      	movs	r2, #7
 8006924:	701a      	strb	r2, [r3, #0]
      break;
 8006926:	e0ec      	b.n	8006b02 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 80e9 	beq.w	8006b06 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800693a:	2101      	movs	r1, #1
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2208      	movs	r2, #8
 8006944:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006946:	e0de      	b.n	8006b06 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800694e:	b29b      	uxth	r3, r3
 8006950:	4619      	mov	r1, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fc2c 	bl	80071b0 <USBH_SetCfg>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	f040 80d5 	bne.w	8006b0a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2209      	movs	r2, #9
 8006964:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006966:	e0d0      	b.n	8006b0a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800696e:	f003 0320 	and.w	r3, r3, #32
 8006972:	2b00      	cmp	r3, #0
 8006974:	d016      	beq.n	80069a4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006976:	2101      	movs	r1, #1
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fc3c 	bl	80071f6 <USBH_SetFeature>
 800697e:	4603      	mov	r3, r0
 8006980:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006982:	7bbb      	ldrb	r3, [r7, #14]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d103      	bne.n	8006992 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	220a      	movs	r2, #10
 800698e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006990:	e0bd      	b.n	8006b0e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006992:	7bbb      	ldrb	r3, [r7, #14]
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b03      	cmp	r3, #3
 8006998:	f040 80b9 	bne.w	8006b0e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	220a      	movs	r2, #10
 80069a0:	701a      	strb	r2, [r3, #0]
      break;
 80069a2:	e0b4      	b.n	8006b0e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	220a      	movs	r2, #10
 80069a8:	701a      	strb	r2, [r3, #0]
      break;
 80069aa:	e0b0      	b.n	8006b0e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 80ad 	beq.w	8006b12 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80069c0:	2300      	movs	r3, #0
 80069c2:	73fb      	strb	r3, [r7, #15]
 80069c4:	e016      	b.n	80069f4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80069c6:	7bfa      	ldrb	r2, [r7, #15]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	32de      	adds	r2, #222	; 0xde
 80069cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d0:	791a      	ldrb	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80069d8:	429a      	cmp	r2, r3
 80069da:	d108      	bne.n	80069ee <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80069dc:	7bfa      	ldrb	r2, [r7, #15]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	32de      	adds	r2, #222	; 0xde
 80069e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80069ec:	e005      	b.n	80069fa <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
 80069f0:	3301      	adds	r3, #1
 80069f2:	73fb      	strb	r3, [r7, #15]
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d0e5      	beq.n	80069c6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d016      	beq.n	8006a32 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	4798      	blx	r3
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d109      	bne.n	8006a2a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2206      	movs	r2, #6
 8006a1a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a22:	2103      	movs	r1, #3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a28:	e073      	b.n	8006b12 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	220d      	movs	r2, #13
 8006a2e:	701a      	strb	r2, [r3, #0]
      break;
 8006a30:	e06f      	b.n	8006b12 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	220d      	movs	r2, #13
 8006a36:	701a      	strb	r2, [r3, #0]
      break;
 8006a38:	e06b      	b.n	8006b12 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d017      	beq.n	8006a74 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	4798      	blx	r3
 8006a50:	4603      	mov	r3, r0
 8006a52:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006a54:	7bbb      	ldrb	r3, [r7, #14]
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d103      	bne.n	8006a64 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	220b      	movs	r2, #11
 8006a60:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a62:	e058      	b.n	8006b16 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006a64:	7bbb      	ldrb	r3, [r7, #14]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d154      	bne.n	8006b16 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	220d      	movs	r2, #13
 8006a70:	701a      	strb	r2, [r3, #0]
      break;
 8006a72:	e050      	b.n	8006b16 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	220d      	movs	r2, #13
 8006a78:	701a      	strb	r2, [r3, #0]
      break;
 8006a7a:	e04c      	b.n	8006b16 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d049      	beq.n	8006b1a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	4798      	blx	r3
      }
      break;
 8006a92:	e042      	b.n	8006b1a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7ff fd67 	bl	8006570 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d009      	beq.n	8006ac0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d005      	beq.n	8006ad6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ad0:	2105      	movs	r1, #5
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d107      	bne.n	8006af2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7ff fe20 	bl	8006730 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006af0:	e014      	b.n	8006b1c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 fa98 	bl	8008028 <USBH_LL_Start>
      break;
 8006af8:	e010      	b.n	8006b1c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006afa:	bf00      	nop
 8006afc:	e00e      	b.n	8006b1c <USBH_Process+0x3cc>
      break;
 8006afe:	bf00      	nop
 8006b00:	e00c      	b.n	8006b1c <USBH_Process+0x3cc>
      break;
 8006b02:	bf00      	nop
 8006b04:	e00a      	b.n	8006b1c <USBH_Process+0x3cc>
    break;
 8006b06:	bf00      	nop
 8006b08:	e008      	b.n	8006b1c <USBH_Process+0x3cc>
      break;
 8006b0a:	bf00      	nop
 8006b0c:	e006      	b.n	8006b1c <USBH_Process+0x3cc>
      break;
 8006b0e:	bf00      	nop
 8006b10:	e004      	b.n	8006b1c <USBH_Process+0x3cc>
      break;
 8006b12:	bf00      	nop
 8006b14:	e002      	b.n	8006b1c <USBH_Process+0x3cc>
      break;
 8006b16:	bf00      	nop
 8006b18:	e000      	b.n	8006b1c <USBH_Process+0x3cc>
      break;
 8006b1a:	bf00      	nop
  }
  return USBH_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop

08006b28 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af04      	add	r7, sp, #16
 8006b2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006b30:	2301      	movs	r3, #1
 8006b32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006b34:	2301      	movs	r3, #1
 8006b36:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	785b      	ldrb	r3, [r3, #1]
 8006b3c:	2b07      	cmp	r3, #7
 8006b3e:	f200 81c1 	bhi.w	8006ec4 <USBH_HandleEnum+0x39c>
 8006b42:	a201      	add	r2, pc, #4	; (adr r2, 8006b48 <USBH_HandleEnum+0x20>)
 8006b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b48:	08006b69 	.word	0x08006b69
 8006b4c:	08006c27 	.word	0x08006c27
 8006b50:	08006c91 	.word	0x08006c91
 8006b54:	08006d1f 	.word	0x08006d1f
 8006b58:	08006d89 	.word	0x08006d89
 8006b5c:	08006df9 	.word	0x08006df9
 8006b60:	08006e3f 	.word	0x08006e3f
 8006b64:	08006e85 	.word	0x08006e85
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006b68:	2108      	movs	r1, #8
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fa50 	bl	8007010 <USBH_Get_DevDesc>
 8006b70:	4603      	mov	r3, r0
 8006b72:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d130      	bne.n	8006bdc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	7919      	ldrb	r1, [r3, #4]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b9e:	b292      	uxth	r2, r2
 8006ba0:	9202      	str	r2, [sp, #8]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	9201      	str	r2, [sp, #4]
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2280      	movs	r2, #128	; 0x80
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f001 f867 	bl	8007c80 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	7959      	ldrb	r1, [r3, #5]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006bc6:	b292      	uxth	r2, r2
 8006bc8:	9202      	str	r2, [sp, #8]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	9201      	str	r2, [sp, #4]
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 f853 	bl	8007c80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006bda:	e175      	b.n	8006ec8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	f040 8172 	bne.w	8006ec8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bea:	3301      	adds	r3, #1
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	d903      	bls.n	8006c06 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	220d      	movs	r2, #13
 8006c02:	701a      	strb	r2, [r3, #0]
      break;
 8006c04:	e160      	b.n	8006ec8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	795b      	ldrb	r3, [r3, #5]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 f887 	bl	8007d20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	791b      	ldrb	r3, [r3, #4]
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f001 f881 	bl	8007d20 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	701a      	strb	r2, [r3, #0]
      break;
 8006c24:	e150      	b.n	8006ec8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006c26:	2112      	movs	r1, #18
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f9f1 	bl	8007010 <USBH_Get_DevDesc>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c32:	7bbb      	ldrb	r3, [r7, #14]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d103      	bne.n	8006c40 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c3e:	e145      	b.n	8006ecc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	f040 8142 	bne.w	8006ecc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c4e:	3301      	adds	r3, #1
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d903      	bls.n	8006c6a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	220d      	movs	r2, #13
 8006c66:	701a      	strb	r2, [r3, #0]
      break;
 8006c68:	e130      	b.n	8006ecc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	795b      	ldrb	r3, [r3, #5]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 f855 	bl	8007d20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	791b      	ldrb	r3, [r3, #4]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f001 f84f 	bl	8007d20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	701a      	strb	r2, [r3, #0]
      break;
 8006c8e:	e11d      	b.n	8006ecc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006c90:	2101      	movs	r1, #1
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fa68 	bl	8007168 <USBH_SetAddress>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c9c:	7bbb      	ldrb	r3, [r7, #14]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d132      	bne.n	8006d08 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006ca2:	2002      	movs	r0, #2
 8006ca4:	f001 fb24 	bl	80082f0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2203      	movs	r2, #3
 8006cb4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	7919      	ldrb	r1, [r3, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006cca:	b292      	uxth	r2, r2
 8006ccc:	9202      	str	r2, [sp, #8]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	9201      	str	r2, [sp, #4]
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2280      	movs	r2, #128	; 0x80
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 ffd1 	bl	8007c80 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	7959      	ldrb	r1, [r3, #5]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cf2:	b292      	uxth	r2, r2
 8006cf4:	9202      	str	r2, [sp, #8]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	9201      	str	r2, [sp, #4]
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2200      	movs	r2, #0
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 ffbd 	bl	8007c80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d06:	e0e3      	b.n	8006ed0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	f040 80e0 	bne.w	8006ed0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	220d      	movs	r2, #13
 8006d14:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	705a      	strb	r2, [r3, #1]
      break;
 8006d1c:	e0d8      	b.n	8006ed0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006d1e:	2109      	movs	r1, #9
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f99d 	bl	8007060 <USBH_Get_CfgDesc>
 8006d26:	4603      	mov	r3, r0
 8006d28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d103      	bne.n	8006d38 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2204      	movs	r2, #4
 8006d34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d36:	e0cd      	b.n	8006ed4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d38:	7bbb      	ldrb	r3, [r7, #14]
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	f040 80ca 	bne.w	8006ed4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d46:	3301      	adds	r3, #1
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d903      	bls.n	8006d62 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	220d      	movs	r2, #13
 8006d5e:	701a      	strb	r2, [r3, #0]
      break;
 8006d60:	e0b8      	b.n	8006ed4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	795b      	ldrb	r3, [r3, #5]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 ffd9 	bl	8007d20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	791b      	ldrb	r3, [r3, #4]
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 ffd3 	bl	8007d20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	701a      	strb	r2, [r3, #0]
      break;
 8006d86:	e0a5      	b.n	8006ed4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f965 	bl	8007060 <USBH_Get_CfgDesc>
 8006d96:	4603      	mov	r3, r0
 8006d98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d9a:	7bbb      	ldrb	r3, [r7, #14]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d103      	bne.n	8006da8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2205      	movs	r2, #5
 8006da4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006da6:	e097      	b.n	8006ed8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	f040 8094 	bne.w	8006ed8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006db6:	3301      	adds	r3, #1
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	d903      	bls.n	8006dd2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	220d      	movs	r2, #13
 8006dce:	701a      	strb	r2, [r3, #0]
      break;
 8006dd0:	e082      	b.n	8006ed8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	795b      	ldrb	r3, [r3, #5]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 ffa1 	bl	8007d20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	791b      	ldrb	r3, [r3, #4]
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 ff9b 	bl	8007d20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	701a      	strb	r2, [r3, #0]
      break;
 8006df6:	e06f      	b.n	8006ed8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d019      	beq.n	8006e36 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e0e:	23ff      	movs	r3, #255	; 0xff
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f949 	bl	80070a8 <USBH_Get_StringDesc>
 8006e16:	4603      	mov	r3, r0
 8006e18:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e1a:	7bbb      	ldrb	r3, [r7, #14]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d103      	bne.n	8006e28 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2206      	movs	r2, #6
 8006e24:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e26:	e059      	b.n	8006edc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e28:	7bbb      	ldrb	r3, [r7, #14]
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	d156      	bne.n	8006edc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2206      	movs	r2, #6
 8006e32:	705a      	strb	r2, [r3, #1]
      break;
 8006e34:	e052      	b.n	8006edc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2206      	movs	r2, #6
 8006e3a:	705a      	strb	r2, [r3, #1]
      break;
 8006e3c:	e04e      	b.n	8006edc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d019      	beq.n	8006e7c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e54:	23ff      	movs	r3, #255	; 0xff
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f926 	bl	80070a8 <USBH_Get_StringDesc>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e60:	7bbb      	ldrb	r3, [r7, #14]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d103      	bne.n	8006e6e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2207      	movs	r2, #7
 8006e6a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e6c:	e038      	b.n	8006ee0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e6e:	7bbb      	ldrb	r3, [r7, #14]
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d135      	bne.n	8006ee0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2207      	movs	r2, #7
 8006e78:	705a      	strb	r2, [r3, #1]
      break;
 8006e7a:	e031      	b.n	8006ee0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2207      	movs	r2, #7
 8006e80:	705a      	strb	r2, [r3, #1]
      break;
 8006e82:	e02d      	b.n	8006ee0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d017      	beq.n	8006ebe <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006e9a:	23ff      	movs	r3, #255	; 0xff
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f903 	bl	80070a8 <USBH_Get_StringDesc>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ea6:	7bbb      	ldrb	r3, [r7, #14]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d102      	bne.n	8006eb2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006eb0:	e018      	b.n	8006ee4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d115      	bne.n	8006ee4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	73fb      	strb	r3, [r7, #15]
      break;
 8006ebc:	e012      	b.n	8006ee4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec2:	e00f      	b.n	8006ee4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006ec4:	bf00      	nop
 8006ec6:	e00e      	b.n	8006ee6 <USBH_HandleEnum+0x3be>
      break;
 8006ec8:	bf00      	nop
 8006eca:	e00c      	b.n	8006ee6 <USBH_HandleEnum+0x3be>
      break;
 8006ecc:	bf00      	nop
 8006ece:	e00a      	b.n	8006ee6 <USBH_HandleEnum+0x3be>
      break;
 8006ed0:	bf00      	nop
 8006ed2:	e008      	b.n	8006ee6 <USBH_HandleEnum+0x3be>
      break;
 8006ed4:	bf00      	nop
 8006ed6:	e006      	b.n	8006ee6 <USBH_HandleEnum+0x3be>
      break;
 8006ed8:	bf00      	nop
 8006eda:	e004      	b.n	8006ee6 <USBH_HandleEnum+0x3be>
      break;
 8006edc:	bf00      	nop
 8006ede:	e002      	b.n	8006ee6 <USBH_HandleEnum+0x3be>
      break;
 8006ee0:	bf00      	nop
 8006ee2:	e000      	b.n	8006ee6 <USBH_HandleEnum+0x3be>
      break;
 8006ee4:	bf00      	nop
  }
  return Status;
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b082      	sub	sp, #8
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f804 	bl	8006f32 <USBH_HandleSof>
}
 8006f2a:	bf00      	nop
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b0b      	cmp	r3, #11
 8006f42:	d10a      	bne.n	8006f5a <USBH_HandleSof+0x28>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d005      	beq.n	8006f5a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	4798      	blx	r3
  }
}
 8006f5a:	bf00      	nop
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006f72:	bf00      	nop
}
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b083      	sub	sp, #12
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006f8e:	bf00      	nop
}
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f001 f838 	bl	800805e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	791b      	ldrb	r3, [r3, #4]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fe93 	bl	8007d20 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	795b      	ldrb	r3, [r3, #5]
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fe8d 	bl	8007d20 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af02      	add	r7, sp, #8
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007022:	78fb      	ldrb	r3, [r7, #3]
 8007024:	b29b      	uxth	r3, r3
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	4613      	mov	r3, r2
 800702a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800702e:	2100      	movs	r1, #0
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f864 	bl	80070fe <USBH_GetDescriptor>
 8007036:	4603      	mov	r3, r0
 8007038:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800703a:	7bfb      	ldrb	r3, [r7, #15]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10a      	bne.n	8007056 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800704c:	78fa      	ldrb	r2, [r7, #3]
 800704e:	b292      	uxth	r2, r2
 8007050:	4619      	mov	r1, r3
 8007052:	f000 f919 	bl	8007288 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007056:	7bfb      	ldrb	r3, [r7, #15]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af02      	add	r7, sp, #8
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	460b      	mov	r3, r1
 800706a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	331c      	adds	r3, #28
 8007070:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007072:	887b      	ldrh	r3, [r7, #2]
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800707c:	2100      	movs	r1, #0
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f83d 	bl	80070fe <USBH_GetDescriptor>
 8007084:	4603      	mov	r3, r0
 8007086:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007088:	7bfb      	ldrb	r3, [r7, #15]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d107      	bne.n	800709e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800708e:	887b      	ldrh	r3, [r7, #2]
 8007090:	461a      	mov	r2, r3
 8007092:	68b9      	ldr	r1, [r7, #8]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f989 	bl	80073ac <USBH_ParseCfgDesc>
 800709a:	4603      	mov	r3, r0
 800709c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800709e:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b088      	sub	sp, #32
 80070ac:	af02      	add	r7, sp, #8
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	607a      	str	r2, [r7, #4]
 80070b2:	461a      	mov	r2, r3
 80070b4:	460b      	mov	r3, r1
 80070b6:	72fb      	strb	r3, [r7, #11]
 80070b8:	4613      	mov	r3, r2
 80070ba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80070bc:	7afb      	ldrb	r3, [r7, #11]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80070c4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80070cc:	893b      	ldrh	r3, [r7, #8]
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	460b      	mov	r3, r1
 80070d2:	2100      	movs	r1, #0
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 f812 	bl	80070fe <USBH_GetDescriptor>
 80070da:	4603      	mov	r3, r0
 80070dc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80070de:	7dfb      	ldrb	r3, [r7, #23]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d107      	bne.n	80070f4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070ea:	893a      	ldrh	r2, [r7, #8]
 80070ec:	6879      	ldr	r1, [r7, #4]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 fb26 	bl	8007740 <USBH_ParseStringDesc>
  }

  return status;
 80070f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b084      	sub	sp, #16
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	607b      	str	r3, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	72fb      	strb	r3, [r7, #11]
 800710c:	4613      	mov	r3, r2
 800710e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	789b      	ldrb	r3, [r3, #2]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d11c      	bne.n	8007152 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007118:	7afb      	ldrb	r3, [r7, #11]
 800711a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800711e:	b2da      	uxtb	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2206      	movs	r2, #6
 8007128:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	893a      	ldrh	r2, [r7, #8]
 800712e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007130:	893b      	ldrh	r3, [r7, #8]
 8007132:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007136:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800713a:	d104      	bne.n	8007146 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f240 4209 	movw	r2, #1033	; 0x409
 8007142:	829a      	strh	r2, [r3, #20]
 8007144:	e002      	b.n	800714c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8b3a      	ldrh	r2, [r7, #24]
 8007150:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007152:	8b3b      	ldrh	r3, [r7, #24]
 8007154:	461a      	mov	r2, r3
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 fb3f 	bl	80077dc <USBH_CtlReq>
 800715e:	4603      	mov	r3, r0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	789b      	ldrb	r3, [r3, #2]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d10f      	bne.n	800719c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2205      	movs	r2, #5
 8007186:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007188:	78fb      	ldrb	r3, [r7, #3]
 800718a:	b29a      	uxth	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800719c:	2200      	movs	r2, #0
 800719e:	2100      	movs	r1, #0
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fb1b 	bl	80077dc <USBH_CtlReq>
 80071a6:	4603      	mov	r3, r0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	789b      	ldrb	r3, [r3, #2]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d10e      	bne.n	80071e2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2209      	movs	r2, #9
 80071ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	887a      	ldrh	r2, [r7, #2]
 80071d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80071e2:	2200      	movs	r2, #0
 80071e4:	2100      	movs	r1, #0
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 faf8 	bl	80077dc <USBH_CtlReq>
 80071ec:	4603      	mov	r3, r0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b082      	sub	sp, #8
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	460b      	mov	r3, r1
 8007200:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	789b      	ldrb	r3, [r3, #2]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d10f      	bne.n	800722a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2203      	movs	r2, #3
 8007214:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007216:	78fb      	ldrb	r3, [r7, #3]
 8007218:	b29a      	uxth	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800722a:	2200      	movs	r2, #0
 800722c:	2100      	movs	r1, #0
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fad4 	bl	80077dc <USBH_CtlReq>
 8007234:	4603      	mov	r3, r0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	460b      	mov	r3, r1
 8007248:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	789b      	ldrb	r3, [r3, #2]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d10f      	bne.n	8007272 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2202      	movs	r2, #2
 8007256:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007264:	78fb      	ldrb	r3, [r7, #3]
 8007266:	b29a      	uxth	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007272:	2200      	movs	r2, #0
 8007274:	2100      	movs	r1, #0
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fab0 	bl	80077dc <USBH_CtlReq>
 800727c:	4603      	mov	r3, r0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
	...

08007288 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	4613      	mov	r3, r2
 8007294:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	781a      	ldrb	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	785a      	ldrb	r2, [r3, #1]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	3302      	adds	r3, #2
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	3303      	adds	r3, #3
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	021b      	lsls	r3, r3, #8
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	4313      	orrs	r3, r2
 80072bc:	b29a      	uxth	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	791a      	ldrb	r2, [r3, #4]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	795a      	ldrb	r2, [r3, #5]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	799a      	ldrb	r2, [r3, #6]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	79da      	ldrb	r2, [r3, #7]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	79db      	ldrb	r3, [r3, #7]
 80072e6:	2b20      	cmp	r3, #32
 80072e8:	dc0f      	bgt.n	800730a <USBH_ParseDevDesc+0x82>
 80072ea:	2b08      	cmp	r3, #8
 80072ec:	db14      	blt.n	8007318 <USBH_ParseDevDesc+0x90>
 80072ee:	3b08      	subs	r3, #8
 80072f0:	4a2d      	ldr	r2, [pc, #180]	; (80073a8 <USBH_ParseDevDesc+0x120>)
 80072f2:	fa22 f303 	lsr.w	r3, r2, r3
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	bf14      	ite	ne
 80072fe:	2301      	movne	r3, #1
 8007300:	2300      	moveq	r3, #0
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	d102      	bne.n	800730e <USBH_ParseDevDesc+0x86>
 8007308:	e006      	b.n	8007318 <USBH_ParseDevDesc+0x90>
 800730a:	2b40      	cmp	r3, #64	; 0x40
 800730c:	d104      	bne.n	8007318 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	79da      	ldrb	r2, [r3, #7]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	71da      	strb	r2, [r3, #7]
      break;
 8007316:	e003      	b.n	8007320 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2240      	movs	r2, #64	; 0x40
 800731c:	71da      	strb	r2, [r3, #7]
      break;
 800731e:	bf00      	nop
  }

  if (length > 8U)
 8007320:	88fb      	ldrh	r3, [r7, #6]
 8007322:	2b08      	cmp	r3, #8
 8007324:	d939      	bls.n	800739a <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	3308      	adds	r3, #8
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	b29a      	uxth	r2, r3
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	3309      	adds	r3, #9
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	b29b      	uxth	r3, r3
 8007336:	021b      	lsls	r3, r3, #8
 8007338:	b29b      	uxth	r3, r3
 800733a:	4313      	orrs	r3, r2
 800733c:	b29a      	uxth	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	330a      	adds	r3, #10
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	b29a      	uxth	r2, r3
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	330b      	adds	r3, #11
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	b29b      	uxth	r3, r3
 8007352:	021b      	lsls	r3, r3, #8
 8007354:	b29b      	uxth	r3, r3
 8007356:	4313      	orrs	r3, r2
 8007358:	b29a      	uxth	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	330c      	adds	r3, #12
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	b29a      	uxth	r2, r3
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	330d      	adds	r3, #13
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	b29b      	uxth	r3, r3
 800736e:	021b      	lsls	r3, r3, #8
 8007370:	b29b      	uxth	r3, r3
 8007372:	4313      	orrs	r3, r2
 8007374:	b29a      	uxth	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	7b9a      	ldrb	r2, [r3, #14]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	7bda      	ldrb	r2, [r3, #15]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	7c1a      	ldrb	r2, [r3, #16]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	7c5a      	ldrb	r2, [r3, #17]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	745a      	strb	r2, [r3, #17]
  }
}
 800739a:	bf00      	nop
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	01000101 	.word	0x01000101

080073ac <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08c      	sub	sp, #48	; 0x30
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	4613      	mov	r3, r2
 80073b8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80073c0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	781a      	ldrb	r2, [r3, #0]
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	785a      	ldrb	r2, [r3, #1]
 80073e8:	6a3b      	ldr	r3, [r7, #32]
 80073ea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	3302      	adds	r3, #2
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	3303      	adds	r3, #3
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	021b      	lsls	r3, r3, #8
 80073fe:	b29b      	uxth	r3, r3
 8007400:	4313      	orrs	r3, r2
 8007402:	b29b      	uxth	r3, r3
 8007404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007408:	bf28      	it	cs
 800740a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800740e:	b29a      	uxth	r2, r3
 8007410:	6a3b      	ldr	r3, [r7, #32]
 8007412:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	791a      	ldrb	r2, [r3, #4]
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	795a      	ldrb	r2, [r3, #5]
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	799a      	ldrb	r2, [r3, #6]
 8007428:	6a3b      	ldr	r3, [r7, #32]
 800742a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	79da      	ldrb	r2, [r3, #7]
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	7a1a      	ldrb	r2, [r3, #8]
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	2b09      	cmp	r3, #9
 8007442:	d002      	beq.n	800744a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	2209      	movs	r2, #9
 8007448:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800744a:	88fb      	ldrh	r3, [r7, #6]
 800744c:	2b09      	cmp	r3, #9
 800744e:	f240 809d 	bls.w	800758c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007452:	2309      	movs	r3, #9
 8007454:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007456:	2300      	movs	r3, #0
 8007458:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800745a:	e081      	b.n	8007560 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800745c:	f107 0316 	add.w	r3, r7, #22
 8007460:	4619      	mov	r1, r3
 8007462:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007464:	f000 f99f 	bl	80077a6 <USBH_GetNextDesc>
 8007468:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746c:	785b      	ldrb	r3, [r3, #1]
 800746e:	2b04      	cmp	r3, #4
 8007470:	d176      	bne.n	8007560 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	2b09      	cmp	r3, #9
 8007478:	d002      	beq.n	8007480 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747c:	2209      	movs	r2, #9
 800747e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007484:	221a      	movs	r2, #26
 8007486:	fb02 f303 	mul.w	r3, r2, r3
 800748a:	3308      	adds	r3, #8
 800748c:	6a3a      	ldr	r2, [r7, #32]
 800748e:	4413      	add	r3, r2
 8007490:	3302      	adds	r3, #2
 8007492:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007494:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007496:	69f8      	ldr	r0, [r7, #28]
 8007498:	f000 f87e 	bl	8007598 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80074a6:	e043      	b.n	8007530 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80074a8:	f107 0316 	add.w	r3, r7, #22
 80074ac:	4619      	mov	r1, r3
 80074ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074b0:	f000 f979 	bl	80077a6 <USBH_GetNextDesc>
 80074b4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	785b      	ldrb	r3, [r3, #1]
 80074ba:	2b05      	cmp	r3, #5
 80074bc:	d138      	bne.n	8007530 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	795b      	ldrb	r3, [r3, #5]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d10f      	bne.n	80074e6 <USBH_ParseCfgDesc+0x13a>
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	799b      	ldrb	r3, [r3, #6]
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d10b      	bne.n	80074e6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	79db      	ldrb	r3, [r3, #7]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10f      	bne.n	80074f6 <USBH_ParseCfgDesc+0x14a>
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b09      	cmp	r3, #9
 80074dc:	d00b      	beq.n	80074f6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	2209      	movs	r2, #9
 80074e2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80074e4:	e007      	b.n	80074f6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80074e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	2b07      	cmp	r3, #7
 80074ec:	d004      	beq.n	80074f8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80074ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f0:	2207      	movs	r2, #7
 80074f2:	701a      	strb	r2, [r3, #0]
 80074f4:	e000      	b.n	80074f8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80074f6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80074f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007500:	3201      	adds	r2, #1
 8007502:	00d2      	lsls	r2, r2, #3
 8007504:	211a      	movs	r1, #26
 8007506:	fb01 f303 	mul.w	r3, r1, r3
 800750a:	4413      	add	r3, r2
 800750c:	3308      	adds	r3, #8
 800750e:	6a3a      	ldr	r2, [r7, #32]
 8007510:	4413      	add	r3, r2
 8007512:	3304      	adds	r3, #4
 8007514:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007518:	69b9      	ldr	r1, [r7, #24]
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f000 f86b 	bl	80075f6 <USBH_ParseEPDesc>
 8007520:	4603      	mov	r3, r0
 8007522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007526:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800752a:	3301      	adds	r3, #1
 800752c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	791b      	ldrb	r3, [r3, #4]
 8007534:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007538:	429a      	cmp	r2, r3
 800753a:	d204      	bcs.n	8007546 <USBH_ParseCfgDesc+0x19a>
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	885a      	ldrh	r2, [r3, #2]
 8007540:	8afb      	ldrh	r3, [r7, #22]
 8007542:	429a      	cmp	r2, r3
 8007544:	d8b0      	bhi.n	80074a8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	791b      	ldrb	r3, [r3, #4]
 800754a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800754e:	429a      	cmp	r2, r3
 8007550:	d201      	bcs.n	8007556 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007552:	2303      	movs	r3, #3
 8007554:	e01c      	b.n	8007590 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800755a:	3301      	adds	r3, #1
 800755c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007564:	2b01      	cmp	r3, #1
 8007566:	d805      	bhi.n	8007574 <USBH_ParseCfgDesc+0x1c8>
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	885a      	ldrh	r2, [r3, #2]
 800756c:	8afb      	ldrh	r3, [r7, #22]
 800756e:	429a      	cmp	r2, r3
 8007570:	f63f af74 	bhi.w	800745c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	791b      	ldrb	r3, [r3, #4]
 8007578:	2b02      	cmp	r3, #2
 800757a:	bf28      	it	cs
 800757c:	2302      	movcs	r3, #2
 800757e:	b2db      	uxtb	r3, r3
 8007580:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007584:	429a      	cmp	r2, r3
 8007586:	d201      	bcs.n	800758c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007588:	2303      	movs	r3, #3
 800758a:	e001      	b.n	8007590 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800758c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007590:	4618      	mov	r0, r3
 8007592:	3730      	adds	r7, #48	; 0x30
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781a      	ldrb	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	785a      	ldrb	r2, [r3, #1]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	789a      	ldrb	r2, [r3, #2]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	78da      	ldrb	r2, [r3, #3]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	791a      	ldrb	r2, [r3, #4]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	795a      	ldrb	r2, [r3, #5]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	799a      	ldrb	r2, [r3, #6]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	79da      	ldrb	r2, [r3, #7]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	7a1a      	ldrb	r2, [r3, #8]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	721a      	strb	r2, [r3, #8]
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b087      	sub	sp, #28
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	60f8      	str	r0, [r7, #12]
 80075fe:	60b9      	str	r1, [r7, #8]
 8007600:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	781a      	ldrb	r2, [r3, #0]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	785a      	ldrb	r2, [r3, #1]
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	789a      	ldrb	r2, [r3, #2]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	78da      	ldrb	r2, [r3, #3]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3304      	adds	r3, #4
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	b29a      	uxth	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	3305      	adds	r3, #5
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	b29b      	uxth	r3, r3
 8007636:	021b      	lsls	r3, r3, #8
 8007638:	b29b      	uxth	r3, r3
 800763a:	4313      	orrs	r3, r2
 800763c:	b29a      	uxth	r2, r3
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	799a      	ldrb	r2, [r3, #6]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	889b      	ldrh	r3, [r3, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d102      	bne.n	8007658 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007652:	2303      	movs	r3, #3
 8007654:	75fb      	strb	r3, [r7, #23]
 8007656:	e033      	b.n	80076c0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	889b      	ldrh	r3, [r3, #4]
 800765c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007660:	f023 0307 	bic.w	r3, r3, #7
 8007664:	b29a      	uxth	r2, r3
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	889b      	ldrh	r3, [r3, #4]
 800766e:	b21a      	sxth	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	3304      	adds	r3, #4
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	b299      	uxth	r1, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3305      	adds	r3, #5
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	b29b      	uxth	r3, r3
 8007680:	021b      	lsls	r3, r3, #8
 8007682:	b29b      	uxth	r3, r3
 8007684:	430b      	orrs	r3, r1
 8007686:	b29b      	uxth	r3, r3
 8007688:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800768c:	2b00      	cmp	r3, #0
 800768e:	d110      	bne.n	80076b2 <USBH_ParseEPDesc+0xbc>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3304      	adds	r3, #4
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	b299      	uxth	r1, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3305      	adds	r3, #5
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	b29b      	uxth	r3, r3
 80076a0:	021b      	lsls	r3, r3, #8
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	430b      	orrs	r3, r1
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	b21b      	sxth	r3, r3
 80076aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076ae:	b21b      	sxth	r3, r3
 80076b0:	e001      	b.n	80076b6 <USBH_ParseEPDesc+0xc0>
 80076b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076b6:	4313      	orrs	r3, r2
 80076b8:	b21b      	sxth	r3, r3
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d116      	bne.n	80076f8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	78db      	ldrb	r3, [r3, #3]
 80076ce:	f003 0303 	and.w	r3, r3, #3
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d005      	beq.n	80076e2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	78db      	ldrb	r3, [r3, #3]
 80076da:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d127      	bne.n	8007732 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	799b      	ldrb	r3, [r3, #6]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <USBH_ParseEPDesc+0xfc>
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	799b      	ldrb	r3, [r3, #6]
 80076ee:	2b10      	cmp	r3, #16
 80076f0:	d91f      	bls.n	8007732 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80076f2:	2303      	movs	r3, #3
 80076f4:	75fb      	strb	r3, [r7, #23]
 80076f6:	e01c      	b.n	8007732 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	78db      	ldrb	r3, [r3, #3]
 80076fc:	f003 0303 	and.w	r3, r3, #3
 8007700:	2b01      	cmp	r3, #1
 8007702:	d10a      	bne.n	800771a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	799b      	ldrb	r3, [r3, #6]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <USBH_ParseEPDesc+0x11e>
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	799b      	ldrb	r3, [r3, #6]
 8007710:	2b10      	cmp	r3, #16
 8007712:	d90e      	bls.n	8007732 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007714:	2303      	movs	r3, #3
 8007716:	75fb      	strb	r3, [r7, #23]
 8007718:	e00b      	b.n	8007732 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	78db      	ldrb	r3, [r3, #3]
 800771e:	f003 0303 	and.w	r3, r3, #3
 8007722:	2b03      	cmp	r3, #3
 8007724:	d105      	bne.n	8007732 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	799b      	ldrb	r3, [r3, #6]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800772e:	2303      	movs	r3, #3
 8007730:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007732:	7dfb      	ldrb	r3, [r7, #23]
}
 8007734:	4618      	mov	r0, r3
 8007736:	371c      	adds	r7, #28
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	4613      	mov	r3, r2
 800774c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3301      	adds	r3, #1
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b03      	cmp	r3, #3
 8007756:	d120      	bne.n	800779a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	1e9a      	subs	r2, r3, #2
 800775e:	88fb      	ldrh	r3, [r7, #6]
 8007760:	4293      	cmp	r3, r2
 8007762:	bf28      	it	cs
 8007764:	4613      	movcs	r3, r2
 8007766:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3302      	adds	r3, #2
 800776c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800776e:	2300      	movs	r3, #0
 8007770:	82fb      	strh	r3, [r7, #22]
 8007772:	e00b      	b.n	800778c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007774:	8afb      	ldrh	r3, [r7, #22]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4413      	add	r3, r2
 800777a:	781a      	ldrb	r2, [r3, #0]
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	3301      	adds	r3, #1
 8007784:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007786:	8afb      	ldrh	r3, [r7, #22]
 8007788:	3302      	adds	r3, #2
 800778a:	82fb      	strh	r3, [r7, #22]
 800778c:	8afa      	ldrh	r2, [r7, #22]
 800778e:	8abb      	ldrh	r3, [r7, #20]
 8007790:	429a      	cmp	r2, r3
 8007792:	d3ef      	bcc.n	8007774 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2200      	movs	r2, #0
 8007798:	701a      	strb	r2, [r3, #0]
  }
}
 800779a:	bf00      	nop
 800779c:	371c      	adds	r7, #28
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b085      	sub	sp, #20
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	881a      	ldrh	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	4413      	add	r3, r2
 80077bc:	b29a      	uxth	r2, r3
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4413      	add	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80077ce:	68fb      	ldr	r3, [r7, #12]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	4613      	mov	r3, r2
 80077e8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80077ea:	2301      	movs	r3, #1
 80077ec:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	789b      	ldrb	r3, [r3, #2]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d002      	beq.n	80077fc <USBH_CtlReq+0x20>
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d00f      	beq.n	800781a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80077fa:	e027      	b.n	800784c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	88fa      	ldrh	r2, [r7, #6]
 8007806:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2201      	movs	r2, #1
 800780c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2202      	movs	r2, #2
 8007812:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007814:	2301      	movs	r3, #1
 8007816:	75fb      	strb	r3, [r7, #23]
      break;
 8007818:	e018      	b.n	800784c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 f81c 	bl	8007858 <USBH_HandleControl>
 8007820:	4603      	mov	r3, r0
 8007822:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007824:	7dfb      	ldrb	r3, [r7, #23]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d002      	beq.n	8007830 <USBH_CtlReq+0x54>
 800782a:	7dfb      	ldrb	r3, [r7, #23]
 800782c:	2b03      	cmp	r3, #3
 800782e:	d106      	bne.n	800783e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2201      	movs	r2, #1
 8007834:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	761a      	strb	r2, [r3, #24]
      break;
 800783c:	e005      	b.n	800784a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	2b02      	cmp	r3, #2
 8007842:	d102      	bne.n	800784a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2201      	movs	r2, #1
 8007848:	709a      	strb	r2, [r3, #2]
      break;
 800784a:	bf00      	nop
  }
  return status;
 800784c:	7dfb      	ldrb	r3, [r7, #23]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
	...

08007858 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af02      	add	r7, sp, #8
 800785e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007860:	2301      	movs	r3, #1
 8007862:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007864:	2300      	movs	r3, #0
 8007866:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	7e1b      	ldrb	r3, [r3, #24]
 800786c:	3b01      	subs	r3, #1
 800786e:	2b0a      	cmp	r3, #10
 8007870:	f200 8156 	bhi.w	8007b20 <USBH_HandleControl+0x2c8>
 8007874:	a201      	add	r2, pc, #4	; (adr r2, 800787c <USBH_HandleControl+0x24>)
 8007876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787a:	bf00      	nop
 800787c:	080078a9 	.word	0x080078a9
 8007880:	080078c3 	.word	0x080078c3
 8007884:	0800792d 	.word	0x0800792d
 8007888:	08007953 	.word	0x08007953
 800788c:	0800798b 	.word	0x0800798b
 8007890:	080079b5 	.word	0x080079b5
 8007894:	08007a07 	.word	0x08007a07
 8007898:	08007a29 	.word	0x08007a29
 800789c:	08007a65 	.word	0x08007a65
 80078a0:	08007a8b 	.word	0x08007a8b
 80078a4:	08007ac9 	.word	0x08007ac9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f103 0110 	add.w	r1, r3, #16
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	795b      	ldrb	r3, [r3, #5]
 80078b2:	461a      	mov	r2, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f943 	bl	8007b40 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2202      	movs	r2, #2
 80078be:	761a      	strb	r2, [r3, #24]
      break;
 80078c0:	e139      	b.n	8007b36 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	795b      	ldrb	r3, [r3, #5]
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fcb7 	bl	800823c <USBH_LL_GetURBState>
 80078ce:	4603      	mov	r3, r0
 80078d0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d11e      	bne.n	8007916 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	7c1b      	ldrb	r3, [r3, #16]
 80078dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078e0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	8adb      	ldrh	r3, [r3, #22]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00a      	beq.n	8007900 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80078ea:	7b7b      	ldrb	r3, [r7, #13]
 80078ec:	2b80      	cmp	r3, #128	; 0x80
 80078ee:	d103      	bne.n	80078f8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2203      	movs	r2, #3
 80078f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078f6:	e115      	b.n	8007b24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2205      	movs	r2, #5
 80078fc:	761a      	strb	r2, [r3, #24]
      break;
 80078fe:	e111      	b.n	8007b24 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007900:	7b7b      	ldrb	r3, [r7, #13]
 8007902:	2b80      	cmp	r3, #128	; 0x80
 8007904:	d103      	bne.n	800790e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2209      	movs	r2, #9
 800790a:	761a      	strb	r2, [r3, #24]
      break;
 800790c:	e10a      	b.n	8007b24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2207      	movs	r2, #7
 8007912:	761a      	strb	r2, [r3, #24]
      break;
 8007914:	e106      	b.n	8007b24 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	2b04      	cmp	r3, #4
 800791a:	d003      	beq.n	8007924 <USBH_HandleControl+0xcc>
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	2b02      	cmp	r3, #2
 8007920:	f040 8100 	bne.w	8007b24 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	220b      	movs	r2, #11
 8007928:	761a      	strb	r2, [r3, #24]
      break;
 800792a:	e0fb      	b.n	8007b24 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007932:	b29a      	uxth	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6899      	ldr	r1, [r3, #8]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	899a      	ldrh	r2, [r3, #12]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	791b      	ldrb	r3, [r3, #4]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f93a 	bl	8007bbe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2204      	movs	r2, #4
 800794e:	761a      	strb	r2, [r3, #24]
      break;
 8007950:	e0f1      	b.n	8007b36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	791b      	ldrb	r3, [r3, #4]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fc6f 	bl	800823c <USBH_LL_GetURBState>
 800795e:	4603      	mov	r3, r0
 8007960:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d102      	bne.n	800796e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2209      	movs	r2, #9
 800796c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	2b05      	cmp	r3, #5
 8007972:	d102      	bne.n	800797a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007974:	2303      	movs	r3, #3
 8007976:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007978:	e0d6      	b.n	8007b28 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800797a:	7bbb      	ldrb	r3, [r7, #14]
 800797c:	2b04      	cmp	r3, #4
 800797e:	f040 80d3 	bne.w	8007b28 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	220b      	movs	r2, #11
 8007986:	761a      	strb	r2, [r3, #24]
      break;
 8007988:	e0ce      	b.n	8007b28 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6899      	ldr	r1, [r3, #8]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	899a      	ldrh	r2, [r3, #12]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	795b      	ldrb	r3, [r3, #5]
 8007996:	2001      	movs	r0, #1
 8007998:	9000      	str	r0, [sp, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f8ea 	bl	8007b74 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2206      	movs	r2, #6
 80079b0:	761a      	strb	r2, [r3, #24]
      break;
 80079b2:	e0c0      	b.n	8007b36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	795b      	ldrb	r3, [r3, #5]
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fc3e 	bl	800823c <USBH_LL_GetURBState>
 80079c0:	4603      	mov	r3, r0
 80079c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d103      	bne.n	80079d2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2207      	movs	r2, #7
 80079ce:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079d0:	e0ac      	b.n	8007b2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	2b05      	cmp	r3, #5
 80079d6:	d105      	bne.n	80079e4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	220c      	movs	r2, #12
 80079dc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80079de:	2303      	movs	r3, #3
 80079e0:	73fb      	strb	r3, [r7, #15]
      break;
 80079e2:	e0a3      	b.n	8007b2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d103      	bne.n	80079f2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2205      	movs	r2, #5
 80079ee:	761a      	strb	r2, [r3, #24]
      break;
 80079f0:	e09c      	b.n	8007b2c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	2b04      	cmp	r3, #4
 80079f6:	f040 8099 	bne.w	8007b2c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	220b      	movs	r2, #11
 80079fe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007a00:	2302      	movs	r3, #2
 8007a02:	73fb      	strb	r3, [r7, #15]
      break;
 8007a04:	e092      	b.n	8007b2c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	791b      	ldrb	r3, [r3, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f8d5 	bl	8007bbe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2208      	movs	r2, #8
 8007a24:	761a      	strb	r2, [r3, #24]

      break;
 8007a26:	e086      	b.n	8007b36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	791b      	ldrb	r3, [r3, #4]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fc04 	bl	800823c <USBH_LL_GetURBState>
 8007a34:	4603      	mov	r3, r0
 8007a36:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d105      	bne.n	8007a4a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	220d      	movs	r2, #13
 8007a42:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a48:	e072      	b.n	8007b30 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
 8007a4c:	2b04      	cmp	r3, #4
 8007a4e:	d103      	bne.n	8007a58 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	220b      	movs	r2, #11
 8007a54:	761a      	strb	r2, [r3, #24]
      break;
 8007a56:	e06b      	b.n	8007b30 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	2b05      	cmp	r3, #5
 8007a5c:	d168      	bne.n	8007b30 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	73fb      	strb	r3, [r7, #15]
      break;
 8007a62:	e065      	b.n	8007b30 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	795b      	ldrb	r3, [r3, #5]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	9200      	str	r2, [sp, #0]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2100      	movs	r1, #0
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f87f 	bl	8007b74 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	220a      	movs	r2, #10
 8007a86:	761a      	strb	r2, [r3, #24]
      break;
 8007a88:	e055      	b.n	8007b36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	795b      	ldrb	r3, [r3, #5]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fbd3 	bl	800823c <USBH_LL_GetURBState>
 8007a96:	4603      	mov	r3, r0
 8007a98:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d105      	bne.n	8007aac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	220d      	movs	r2, #13
 8007aa8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007aaa:	e043      	b.n	8007b34 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d103      	bne.n	8007aba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2209      	movs	r2, #9
 8007ab6:	761a      	strb	r2, [r3, #24]
      break;
 8007ab8:	e03c      	b.n	8007b34 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d139      	bne.n	8007b34 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	220b      	movs	r2, #11
 8007ac4:	761a      	strb	r2, [r3, #24]
      break;
 8007ac6:	e035      	b.n	8007b34 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	7e5b      	ldrb	r3, [r3, #25]
 8007acc:	3301      	adds	r3, #1
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	765a      	strb	r2, [r3, #25]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	7e5b      	ldrb	r3, [r3, #25]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d806      	bhi.n	8007aea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007ae8:	e025      	b.n	8007b36 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007af0:	2106      	movs	r1, #6
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	795b      	ldrb	r3, [r3, #5]
 8007b00:	4619      	mov	r1, r3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f90c 	bl	8007d20 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	791b      	ldrb	r3, [r3, #4]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f906 	bl	8007d20 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b1e:	e00a      	b.n	8007b36 <USBH_HandleControl+0x2de>

    default:
      break;
 8007b20:	bf00      	nop
 8007b22:	e008      	b.n	8007b36 <USBH_HandleControl+0x2de>
      break;
 8007b24:	bf00      	nop
 8007b26:	e006      	b.n	8007b36 <USBH_HandleControl+0x2de>
      break;
 8007b28:	bf00      	nop
 8007b2a:	e004      	b.n	8007b36 <USBH_HandleControl+0x2de>
      break;
 8007b2c:	bf00      	nop
 8007b2e:	e002      	b.n	8007b36 <USBH_HandleControl+0x2de>
      break;
 8007b30:	bf00      	nop
 8007b32:	e000      	b.n	8007b36 <USBH_HandleControl+0x2de>
      break;
 8007b34:	bf00      	nop
  }

  return status;
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b088      	sub	sp, #32
 8007b44:	af04      	add	r7, sp, #16
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b4e:	79f9      	ldrb	r1, [r7, #7]
 8007b50:	2300      	movs	r3, #0
 8007b52:	9303      	str	r3, [sp, #12]
 8007b54:	2308      	movs	r3, #8
 8007b56:	9302      	str	r3, [sp, #8]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	9301      	str	r3, [sp, #4]
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	2300      	movs	r3, #0
 8007b62:	2200      	movs	r2, #0
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 fb38 	bl	80081da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b088      	sub	sp, #32
 8007b78:	af04      	add	r7, sp, #16
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	4611      	mov	r1, r2
 8007b80:	461a      	mov	r2, r3
 8007b82:	460b      	mov	r3, r1
 8007b84:	80fb      	strh	r3, [r7, #6]
 8007b86:	4613      	mov	r3, r2
 8007b88:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d001      	beq.n	8007b98 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b98:	7979      	ldrb	r1, [r7, #5]
 8007b9a:	7e3b      	ldrb	r3, [r7, #24]
 8007b9c:	9303      	str	r3, [sp, #12]
 8007b9e:	88fb      	ldrh	r3, [r7, #6]
 8007ba0:	9302      	str	r3, [sp, #8]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	2300      	movs	r3, #0
 8007bac:	2200      	movs	r2, #0
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 fb13 	bl	80081da <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b088      	sub	sp, #32
 8007bc2:	af04      	add	r7, sp, #16
 8007bc4:	60f8      	str	r0, [r7, #12]
 8007bc6:	60b9      	str	r1, [r7, #8]
 8007bc8:	4611      	mov	r1, r2
 8007bca:	461a      	mov	r2, r3
 8007bcc:	460b      	mov	r3, r1
 8007bce:	80fb      	strh	r3, [r7, #6]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bd4:	7979      	ldrb	r1, [r7, #5]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	9303      	str	r3, [sp, #12]
 8007bda:	88fb      	ldrh	r3, [r7, #6]
 8007bdc:	9302      	str	r3, [sp, #8]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	2301      	movs	r3, #1
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	2300      	movs	r3, #0
 8007be8:	2201      	movs	r2, #1
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 faf5 	bl	80081da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007bf0:	2300      	movs	r3, #0

}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b088      	sub	sp, #32
 8007bfe:	af04      	add	r7, sp, #16
 8007c00:	60f8      	str	r0, [r7, #12]
 8007c02:	60b9      	str	r1, [r7, #8]
 8007c04:	4611      	mov	r1, r2
 8007c06:	461a      	mov	r2, r3
 8007c08:	460b      	mov	r3, r1
 8007c0a:	80fb      	strh	r3, [r7, #6]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c1e:	7979      	ldrb	r1, [r7, #5]
 8007c20:	7e3b      	ldrb	r3, [r7, #24]
 8007c22:	9303      	str	r3, [sp, #12]
 8007c24:	88fb      	ldrh	r3, [r7, #6]
 8007c26:	9302      	str	r3, [sp, #8]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	9301      	str	r3, [sp, #4]
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	2302      	movs	r3, #2
 8007c32:	2200      	movs	r2, #0
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 fad0 	bl	80081da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b088      	sub	sp, #32
 8007c48:	af04      	add	r7, sp, #16
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	4611      	mov	r1, r2
 8007c50:	461a      	mov	r2, r3
 8007c52:	460b      	mov	r3, r1
 8007c54:	80fb      	strh	r3, [r7, #6]
 8007c56:	4613      	mov	r3, r2
 8007c58:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c5a:	7979      	ldrb	r1, [r7, #5]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	9303      	str	r3, [sp, #12]
 8007c60:	88fb      	ldrh	r3, [r7, #6]
 8007c62:	9302      	str	r3, [sp, #8]
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	9301      	str	r3, [sp, #4]
 8007c68:	2301      	movs	r3, #1
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	2201      	movs	r2, #1
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 fab2 	bl	80081da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af04      	add	r7, sp, #16
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	4608      	mov	r0, r1
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	4603      	mov	r3, r0
 8007c90:	70fb      	strb	r3, [r7, #3]
 8007c92:	460b      	mov	r3, r1
 8007c94:	70bb      	strb	r3, [r7, #2]
 8007c96:	4613      	mov	r3, r2
 8007c98:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007c9a:	7878      	ldrb	r0, [r7, #1]
 8007c9c:	78ba      	ldrb	r2, [r7, #2]
 8007c9e:	78f9      	ldrb	r1, [r7, #3]
 8007ca0:	8b3b      	ldrh	r3, [r7, #24]
 8007ca2:	9302      	str	r3, [sp, #8]
 8007ca4:	7d3b      	ldrb	r3, [r7, #20]
 8007ca6:	9301      	str	r3, [sp, #4]
 8007ca8:	7c3b      	ldrb	r3, [r7, #16]
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	4603      	mov	r3, r0
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fa45 	bl	800813e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b082      	sub	sp, #8
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fa64 	bl	800819c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f836 	bl	8007d5c <USBH_GetFreePipe>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007cf4:	89fb      	ldrh	r3, [r7, #14]
 8007cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d00a      	beq.n	8007d14 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007cfe:	78fa      	ldrb	r2, [r7, #3]
 8007d00:	89fb      	ldrh	r3, [r7, #14]
 8007d02:	f003 030f 	and.w	r3, r3, #15
 8007d06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d0a:	6879      	ldr	r1, [r7, #4]
 8007d0c:	33e0      	adds	r3, #224	; 0xe0
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	440b      	add	r3, r1
 8007d12:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007d14:	89fb      	ldrh	r3, [r7, #14]
 8007d16:	b2db      	uxtb	r3, r3
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007d2c:	78fb      	ldrb	r3, [r7, #3]
 8007d2e:	2b0f      	cmp	r3, #15
 8007d30:	d80d      	bhi.n	8007d4e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007d32:	78fb      	ldrb	r3, [r7, #3]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	33e0      	adds	r3, #224	; 0xe0
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4413      	add	r3, r2
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007d44:	6879      	ldr	r1, [r7, #4]
 8007d46:	33e0      	adds	r3, #224	; 0xe0
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	440b      	add	r3, r1
 8007d4c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007d64:	2300      	movs	r3, #0
 8007d66:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007d68:	2300      	movs	r3, #0
 8007d6a:	73fb      	strb	r3, [r7, #15]
 8007d6c:	e00f      	b.n	8007d8e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007d6e:	7bfb      	ldrb	r3, [r7, #15]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	33e0      	adds	r3, #224	; 0xe0
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d102      	bne.n	8007d88 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	e007      	b.n	8007d98 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	73fb      	strb	r3, [r7, #15]
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	2b0f      	cmp	r3, #15
 8007d92:	d9ec      	bls.n	8007d6e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007d94:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007da8:	2201      	movs	r2, #1
 8007daa:	490e      	ldr	r1, [pc, #56]	; (8007de4 <MX_USB_HOST_Init+0x40>)
 8007dac:	480e      	ldr	r0, [pc, #56]	; (8007de8 <MX_USB_HOST_Init+0x44>)
 8007dae:	f7fe fba5 	bl	80064fc <USBH_Init>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007db8:	f7f8 fe42 	bl	8000a40 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007dbc:	490b      	ldr	r1, [pc, #44]	; (8007dec <MX_USB_HOST_Init+0x48>)
 8007dbe:	480a      	ldr	r0, [pc, #40]	; (8007de8 <MX_USB_HOST_Init+0x44>)
 8007dc0:	f7fe fc2a 	bl	8006618 <USBH_RegisterClass>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007dca:	f7f8 fe39 	bl	8000a40 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007dce:	4806      	ldr	r0, [pc, #24]	; (8007de8 <MX_USB_HOST_Init+0x44>)
 8007dd0:	f7fe fcae 	bl	8006730 <USBH_Start>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007dda:	f7f8 fe31 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007dde:	bf00      	nop
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	08007e05 	.word	0x08007e05
 8007de8:	200001f8 	.word	0x200001f8
 8007dec:	2000000c 	.word	0x2000000c

08007df0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007df4:	4802      	ldr	r0, [pc, #8]	; (8007e00 <MX_USB_HOST_Process+0x10>)
 8007df6:	f7fe fcab 	bl	8006750 <USBH_Process>
}
 8007dfa:	bf00      	nop
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	200001f8 	.word	0x200001f8

08007e04 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e10:	78fb      	ldrb	r3, [r7, #3]
 8007e12:	3b01      	subs	r3, #1
 8007e14:	2b04      	cmp	r3, #4
 8007e16:	d819      	bhi.n	8007e4c <USBH_UserProcess+0x48>
 8007e18:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <USBH_UserProcess+0x1c>)
 8007e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1e:	bf00      	nop
 8007e20:	08007e4d 	.word	0x08007e4d
 8007e24:	08007e3d 	.word	0x08007e3d
 8007e28:	08007e4d 	.word	0x08007e4d
 8007e2c:	08007e45 	.word	0x08007e45
 8007e30:	08007e35 	.word	0x08007e35
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e34:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <USBH_UserProcess+0x58>)
 8007e36:	2203      	movs	r2, #3
 8007e38:	701a      	strb	r2, [r3, #0]
  break;
 8007e3a:	e008      	b.n	8007e4e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e3c:	4b07      	ldr	r3, [pc, #28]	; (8007e5c <USBH_UserProcess+0x58>)
 8007e3e:	2202      	movs	r2, #2
 8007e40:	701a      	strb	r2, [r3, #0]
  break;
 8007e42:	e004      	b.n	8007e4e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e44:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <USBH_UserProcess+0x58>)
 8007e46:	2201      	movs	r2, #1
 8007e48:	701a      	strb	r2, [r3, #0]
  break;
 8007e4a:	e000      	b.n	8007e4e <USBH_UserProcess+0x4a>

  default:
  break;
 8007e4c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e4e:	bf00      	nop
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	200005d0 	.word	0x200005d0

08007e60 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b08a      	sub	sp, #40	; 0x28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e68:	f107 0314 	add.w	r3, r7, #20
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	605a      	str	r2, [r3, #4]
 8007e72:	609a      	str	r2, [r3, #8]
 8007e74:	60da      	str	r2, [r3, #12]
 8007e76:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e80:	d13a      	bne.n	8007ef8 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e82:	2300      	movs	r3, #0
 8007e84:	613b      	str	r3, [r7, #16]
 8007e86:	4b1e      	ldr	r3, [pc, #120]	; (8007f00 <HAL_HCD_MspInit+0xa0>)
 8007e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8a:	4a1d      	ldr	r2, [pc, #116]	; (8007f00 <HAL_HCD_MspInit+0xa0>)
 8007e8c:	f043 0301 	orr.w	r3, r3, #1
 8007e90:	6313      	str	r3, [r2, #48]	; 0x30
 8007e92:	4b1b      	ldr	r3, [pc, #108]	; (8007f00 <HAL_HCD_MspInit+0xa0>)
 8007e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	613b      	str	r3, [r7, #16]
 8007e9c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007e9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eac:	2300      	movs	r3, #0
 8007eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007eb0:	230a      	movs	r3, #10
 8007eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007eb4:	f107 0314 	add.w	r3, r7, #20
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4812      	ldr	r0, [pc, #72]	; (8007f04 <HAL_HCD_MspInit+0xa4>)
 8007ebc:	f7f9 fad6 	bl	800146c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ec0:	4b0f      	ldr	r3, [pc, #60]	; (8007f00 <HAL_HCD_MspInit+0xa0>)
 8007ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec4:	4a0e      	ldr	r2, [pc, #56]	; (8007f00 <HAL_HCD_MspInit+0xa0>)
 8007ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eca:	6353      	str	r3, [r2, #52]	; 0x34
 8007ecc:	2300      	movs	r3, #0
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	4b0b      	ldr	r3, [pc, #44]	; (8007f00 <HAL_HCD_MspInit+0xa0>)
 8007ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed4:	4a0a      	ldr	r2, [pc, #40]	; (8007f00 <HAL_HCD_MspInit+0xa0>)
 8007ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007eda:	6453      	str	r3, [r2, #68]	; 0x44
 8007edc:	4b08      	ldr	r3, [pc, #32]	; (8007f00 <HAL_HCD_MspInit+0xa0>)
 8007ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ee4:	60fb      	str	r3, [r7, #12]
 8007ee6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2100      	movs	r1, #0
 8007eec:	2043      	movs	r0, #67	; 0x43
 8007eee:	f7f9 fa16 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ef2:	2043      	movs	r0, #67	; 0x43
 8007ef4:	f7f9 fa2f 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ef8:	bf00      	nop
 8007efa:	3728      	adds	r7, #40	; 0x28
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	40023800 	.word	0x40023800
 8007f04:	40020000 	.word	0x40020000

08007f08 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe fff9 	bl	8006f0e <USBH_LL_IncTimer>
}
 8007f1c:	bf00      	nop
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7ff f831 	bl	8006f9a <USBH_LL_Connect>
}
 8007f38:	bf00      	nop
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7ff f83a 	bl	8006fc8 <USBH_LL_Disconnect>
}
 8007f54:	bf00      	nop
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	460b      	mov	r3, r1
 8007f66:	70fb      	strb	r3, [r7, #3]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fe ffeb 	bl	8006f62 <USBH_LL_PortEnabled>
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fe ffeb 	bl	8006f7e <USBH_LL_PortDisabled>
}
 8007fa8:	bf00      	nop
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d12a      	bne.n	8008018 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007fc2:	4a18      	ldr	r2, [pc, #96]	; (8008024 <USBH_LL_Init+0x74>)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a15      	ldr	r2, [pc, #84]	; (8008024 <USBH_LL_Init+0x74>)
 8007fce:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fd2:	4b14      	ldr	r3, [pc, #80]	; (8008024 <USBH_LL_Init+0x74>)
 8007fd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fd8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007fda:	4b12      	ldr	r3, [pc, #72]	; (8008024 <USBH_LL_Init+0x74>)
 8007fdc:	2208      	movs	r2, #8
 8007fde:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007fe0:	4b10      	ldr	r3, [pc, #64]	; (8008024 <USBH_LL_Init+0x74>)
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007fe6:	4b0f      	ldr	r3, [pc, #60]	; (8008024 <USBH_LL_Init+0x74>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007fec:	4b0d      	ldr	r3, [pc, #52]	; (8008024 <USBH_LL_Init+0x74>)
 8007fee:	2202      	movs	r2, #2
 8007ff0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ff2:	4b0c      	ldr	r3, [pc, #48]	; (8008024 <USBH_LL_Init+0x74>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007ff8:	480a      	ldr	r0, [pc, #40]	; (8008024 <USBH_LL_Init+0x74>)
 8007ffa:	f7f9 fbec 	bl	80017d6 <HAL_HCD_Init>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008004:	f7f8 fd1c 	bl	8000a40 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008008:	4806      	ldr	r0, [pc, #24]	; (8008024 <USBH_LL_Init+0x74>)
 800800a:	f7f9 ffd0 	bl	8001fae <HAL_HCD_GetCurrentFrame>
 800800e:	4603      	mov	r3, r0
 8008010:	4619      	mov	r1, r3
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7fe ff6c 	bl	8006ef0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	200005d4 	.word	0x200005d4

08008028 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800803e:	4618      	mov	r0, r3
 8008040:	f7f9 ff3f 	bl	8001ec2 <HAL_HCD_Start>
 8008044:	4603      	mov	r3, r0
 8008046:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008048:	7bfb      	ldrb	r3, [r7, #15]
 800804a:	4618      	mov	r0, r3
 800804c:	f000 f95c 	bl	8008308 <USBH_Get_USB_Status>
 8008050:	4603      	mov	r3, r0
 8008052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008054:	7bbb      	ldrb	r3, [r7, #14]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b084      	sub	sp, #16
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008074:	4618      	mov	r0, r3
 8008076:	f7f9 ff47 	bl	8001f08 <HAL_HCD_Stop>
 800807a:	4603      	mov	r3, r0
 800807c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800807e:	7bfb      	ldrb	r3, [r7, #15]
 8008080:	4618      	mov	r0, r3
 8008082:	f000 f941 	bl	8008308 <USBH_Get_USB_Status>
 8008086:	4603      	mov	r3, r0
 8008088:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800808a:	7bbb      	ldrb	r3, [r7, #14]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800809c:	2301      	movs	r3, #1
 800809e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7f9 ff8f 	bl	8001fca <HAL_HCD_GetCurrentSpeed>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d00c      	beq.n	80080cc <USBH_LL_GetSpeed+0x38>
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d80d      	bhi.n	80080d2 <USBH_LL_GetSpeed+0x3e>
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <USBH_LL_GetSpeed+0x2c>
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d003      	beq.n	80080c6 <USBH_LL_GetSpeed+0x32>
 80080be:	e008      	b.n	80080d2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80080c0:	2300      	movs	r3, #0
 80080c2:	73fb      	strb	r3, [r7, #15]
    break;
 80080c4:	e008      	b.n	80080d8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80080c6:	2301      	movs	r3, #1
 80080c8:	73fb      	strb	r3, [r7, #15]
    break;
 80080ca:	e005      	b.n	80080d8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80080cc:	2302      	movs	r3, #2
 80080ce:	73fb      	strb	r3, [r7, #15]
    break;
 80080d0:	e002      	b.n	80080d8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80080d2:	2301      	movs	r3, #1
 80080d4:	73fb      	strb	r3, [r7, #15]
    break;
 80080d6:	bf00      	nop
  }
  return  speed;
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7f9 ff22 	bl	8001f42 <HAL_HCD_ResetPort>
 80080fe:	4603      	mov	r3, r0
 8008100:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008102:	7bfb      	ldrb	r3, [r7, #15]
 8008104:	4618      	mov	r0, r3
 8008106:	f000 f8ff 	bl	8008308 <USBH_Get_USB_Status>
 800810a:	4603      	mov	r3, r0
 800810c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800810e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	460b      	mov	r3, r1
 8008122:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800812a:	78fa      	ldrb	r2, [r7, #3]
 800812c:	4611      	mov	r1, r2
 800812e:	4618      	mov	r0, r3
 8008130:	f7f9 ff29 	bl	8001f86 <HAL_HCD_HC_GetXferCount>
 8008134:	4603      	mov	r3, r0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800813e:	b590      	push	{r4, r7, lr}
 8008140:	b089      	sub	sp, #36	; 0x24
 8008142:	af04      	add	r7, sp, #16
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	4608      	mov	r0, r1
 8008148:	4611      	mov	r1, r2
 800814a:	461a      	mov	r2, r3
 800814c:	4603      	mov	r3, r0
 800814e:	70fb      	strb	r3, [r7, #3]
 8008150:	460b      	mov	r3, r1
 8008152:	70bb      	strb	r3, [r7, #2]
 8008154:	4613      	mov	r3, r2
 8008156:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008166:	787c      	ldrb	r4, [r7, #1]
 8008168:	78ba      	ldrb	r2, [r7, #2]
 800816a:	78f9      	ldrb	r1, [r7, #3]
 800816c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800816e:	9302      	str	r3, [sp, #8]
 8008170:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008174:	9301      	str	r3, [sp, #4]
 8008176:	f897 3020 	ldrb.w	r3, [r7, #32]
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	4623      	mov	r3, r4
 800817e:	f7f9 fb8c 	bl	800189a <HAL_HCD_HC_Init>
 8008182:	4603      	mov	r3, r0
 8008184:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008186:	7bfb      	ldrb	r3, [r7, #15]
 8008188:	4618      	mov	r0, r3
 800818a:	f000 f8bd 	bl	8008308 <USBH_Get_USB_Status>
 800818e:	4603      	mov	r3, r0
 8008190:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008192:	7bbb      	ldrb	r3, [r7, #14]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	bd90      	pop	{r4, r7, pc}

0800819c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081b6:	78fa      	ldrb	r2, [r7, #3]
 80081b8:	4611      	mov	r1, r2
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7f9 fbfc 	bl	80019b8 <HAL_HCD_HC_Halt>
 80081c0:	4603      	mov	r3, r0
 80081c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 f89e 	bl	8008308 <USBH_Get_USB_Status>
 80081cc:	4603      	mov	r3, r0
 80081ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80081da:	b590      	push	{r4, r7, lr}
 80081dc:	b089      	sub	sp, #36	; 0x24
 80081de:	af04      	add	r7, sp, #16
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	4608      	mov	r0, r1
 80081e4:	4611      	mov	r1, r2
 80081e6:	461a      	mov	r2, r3
 80081e8:	4603      	mov	r3, r0
 80081ea:	70fb      	strb	r3, [r7, #3]
 80081ec:	460b      	mov	r3, r1
 80081ee:	70bb      	strb	r3, [r7, #2]
 80081f0:	4613      	mov	r3, r2
 80081f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008202:	787c      	ldrb	r4, [r7, #1]
 8008204:	78ba      	ldrb	r2, [r7, #2]
 8008206:	78f9      	ldrb	r1, [r7, #3]
 8008208:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800820c:	9303      	str	r3, [sp, #12]
 800820e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008210:	9302      	str	r3, [sp, #8]
 8008212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	f897 3020 	ldrb.w	r3, [r7, #32]
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	4623      	mov	r3, r4
 800821e:	f7f9 fbef 	bl	8001a00 <HAL_HCD_HC_SubmitRequest>
 8008222:	4603      	mov	r3, r0
 8008224:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008226:	7bfb      	ldrb	r3, [r7, #15]
 8008228:	4618      	mov	r0, r3
 800822a:	f000 f86d 	bl	8008308 <USBH_Get_USB_Status>
 800822e:	4603      	mov	r3, r0
 8008230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008232:	7bbb      	ldrb	r3, [r7, #14]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	bd90      	pop	{r4, r7, pc}

0800823c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	460b      	mov	r3, r1
 8008246:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800824e:	78fa      	ldrb	r2, [r7, #3]
 8008250:	4611      	mov	r1, r2
 8008252:	4618      	mov	r0, r3
 8008254:	f7f9 fe83 	bl	8001f5e <HAL_HCD_HC_GetURBState>
 8008258:	4603      	mov	r3, r0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b082      	sub	sp, #8
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	460b      	mov	r3, r1
 800826c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008274:	2b01      	cmp	r3, #1
 8008276:	d103      	bne.n	8008280 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008278:	78fb      	ldrb	r3, [r7, #3]
 800827a:	4618      	mov	r0, r3
 800827c:	f000 f870 	bl	8008360 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008280:	20c8      	movs	r0, #200	; 0xc8
 8008282:	f7f8 ff4d 	bl	8001120 <HAL_Delay>
  return USBH_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	70fb      	strb	r3, [r7, #3]
 800829c:	4613      	mov	r3, r2
 800829e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082a6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80082a8:	78fb      	ldrb	r3, [r7, #3]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	212c      	movs	r1, #44	; 0x2c
 80082ae:	fb01 f303 	mul.w	r3, r1, r3
 80082b2:	4413      	add	r3, r2
 80082b4:	333b      	adds	r3, #59	; 0x3b
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d009      	beq.n	80082d0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80082bc:	78fb      	ldrb	r3, [r7, #3]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	212c      	movs	r1, #44	; 0x2c
 80082c2:	fb01 f303 	mul.w	r3, r1, r3
 80082c6:	4413      	add	r3, r2
 80082c8:	3354      	adds	r3, #84	; 0x54
 80082ca:	78ba      	ldrb	r2, [r7, #2]
 80082cc:	701a      	strb	r2, [r3, #0]
 80082ce:	e008      	b.n	80082e2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80082d0:	78fb      	ldrb	r3, [r7, #3]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	212c      	movs	r1, #44	; 0x2c
 80082d6:	fb01 f303 	mul.w	r3, r1, r3
 80082da:	4413      	add	r3, r2
 80082dc:	3355      	adds	r3, #85	; 0x55
 80082de:	78ba      	ldrb	r2, [r7, #2]
 80082e0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7f8 ff11 	bl	8001120 <HAL_Delay>
}
 80082fe:	bf00      	nop
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	4603      	mov	r3, r0
 8008310:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	2b03      	cmp	r3, #3
 800831a:	d817      	bhi.n	800834c <USBH_Get_USB_Status+0x44>
 800831c:	a201      	add	r2, pc, #4	; (adr r2, 8008324 <USBH_Get_USB_Status+0x1c>)
 800831e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008322:	bf00      	nop
 8008324:	08008335 	.word	0x08008335
 8008328:	0800833b 	.word	0x0800833b
 800832c:	08008341 	.word	0x08008341
 8008330:	08008347 	.word	0x08008347
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	73fb      	strb	r3, [r7, #15]
    break;
 8008338:	e00b      	b.n	8008352 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800833a:	2302      	movs	r3, #2
 800833c:	73fb      	strb	r3, [r7, #15]
    break;
 800833e:	e008      	b.n	8008352 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008340:	2301      	movs	r3, #1
 8008342:	73fb      	strb	r3, [r7, #15]
    break;
 8008344:	e005      	b.n	8008352 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008346:	2302      	movs	r3, #2
 8008348:	73fb      	strb	r3, [r7, #15]
    break;
 800834a:	e002      	b.n	8008352 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800834c:	2302      	movs	r3, #2
 800834e:	73fb      	strb	r3, [r7, #15]
    break;
 8008350:	bf00      	nop
  }
  return usb_status;
 8008352:	7bfb      	ldrb	r3, [r7, #15]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	4603      	mov	r3, r0
 8008368:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800836a:	79fb      	ldrb	r3, [r7, #7]
 800836c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800836e:	79fb      	ldrb	r3, [r7, #7]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d102      	bne.n	800837a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008374:	2300      	movs	r3, #0
 8008376:	73fb      	strb	r3, [r7, #15]
 8008378:	e001      	b.n	800837e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800837a:	2301      	movs	r3, #1
 800837c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	461a      	mov	r2, r3
 8008382:	2101      	movs	r1, #1
 8008384:	4803      	ldr	r0, [pc, #12]	; (8008394 <MX_DriverVbusFS+0x34>)
 8008386:	f7f9 fa0d 	bl	80017a4 <HAL_GPIO_WritePin>
}
 800838a:	bf00      	nop
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	40020800 	.word	0x40020800

08008398 <malloc>:
 8008398:	4b02      	ldr	r3, [pc, #8]	; (80083a4 <malloc+0xc>)
 800839a:	4601      	mov	r1, r0
 800839c:	6818      	ldr	r0, [r3, #0]
 800839e:	f000 b82b 	b.w	80083f8 <_malloc_r>
 80083a2:	bf00      	nop
 80083a4:	20000084 	.word	0x20000084

080083a8 <free>:
 80083a8:	4b02      	ldr	r3, [pc, #8]	; (80083b4 <free+0xc>)
 80083aa:	4601      	mov	r1, r0
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	f000 bb1d 	b.w	80089ec <_free_r>
 80083b2:	bf00      	nop
 80083b4:	20000084 	.word	0x20000084

080083b8 <sbrk_aligned>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	4e0e      	ldr	r6, [pc, #56]	; (80083f4 <sbrk_aligned+0x3c>)
 80083bc:	460c      	mov	r4, r1
 80083be:	6831      	ldr	r1, [r6, #0]
 80083c0:	4605      	mov	r5, r0
 80083c2:	b911      	cbnz	r1, 80083ca <sbrk_aligned+0x12>
 80083c4:	f000 fac4 	bl	8008950 <_sbrk_r>
 80083c8:	6030      	str	r0, [r6, #0]
 80083ca:	4621      	mov	r1, r4
 80083cc:	4628      	mov	r0, r5
 80083ce:	f000 fabf 	bl	8008950 <_sbrk_r>
 80083d2:	1c43      	adds	r3, r0, #1
 80083d4:	d00a      	beq.n	80083ec <sbrk_aligned+0x34>
 80083d6:	1cc4      	adds	r4, r0, #3
 80083d8:	f024 0403 	bic.w	r4, r4, #3
 80083dc:	42a0      	cmp	r0, r4
 80083de:	d007      	beq.n	80083f0 <sbrk_aligned+0x38>
 80083e0:	1a21      	subs	r1, r4, r0
 80083e2:	4628      	mov	r0, r5
 80083e4:	f000 fab4 	bl	8008950 <_sbrk_r>
 80083e8:	3001      	adds	r0, #1
 80083ea:	d101      	bne.n	80083f0 <sbrk_aligned+0x38>
 80083ec:	f04f 34ff 	mov.w	r4, #4294967295
 80083f0:	4620      	mov	r0, r4
 80083f2:	bd70      	pop	{r4, r5, r6, pc}
 80083f4:	200008dc 	.word	0x200008dc

080083f8 <_malloc_r>:
 80083f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083fc:	1ccd      	adds	r5, r1, #3
 80083fe:	f025 0503 	bic.w	r5, r5, #3
 8008402:	3508      	adds	r5, #8
 8008404:	2d0c      	cmp	r5, #12
 8008406:	bf38      	it	cc
 8008408:	250c      	movcc	r5, #12
 800840a:	2d00      	cmp	r5, #0
 800840c:	4607      	mov	r7, r0
 800840e:	db01      	blt.n	8008414 <_malloc_r+0x1c>
 8008410:	42a9      	cmp	r1, r5
 8008412:	d905      	bls.n	8008420 <_malloc_r+0x28>
 8008414:	230c      	movs	r3, #12
 8008416:	603b      	str	r3, [r7, #0]
 8008418:	2600      	movs	r6, #0
 800841a:	4630      	mov	r0, r6
 800841c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008420:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80084f4 <_malloc_r+0xfc>
 8008424:	f000 f868 	bl	80084f8 <__malloc_lock>
 8008428:	f8d8 3000 	ldr.w	r3, [r8]
 800842c:	461c      	mov	r4, r3
 800842e:	bb5c      	cbnz	r4, 8008488 <_malloc_r+0x90>
 8008430:	4629      	mov	r1, r5
 8008432:	4638      	mov	r0, r7
 8008434:	f7ff ffc0 	bl	80083b8 <sbrk_aligned>
 8008438:	1c43      	adds	r3, r0, #1
 800843a:	4604      	mov	r4, r0
 800843c:	d155      	bne.n	80084ea <_malloc_r+0xf2>
 800843e:	f8d8 4000 	ldr.w	r4, [r8]
 8008442:	4626      	mov	r6, r4
 8008444:	2e00      	cmp	r6, #0
 8008446:	d145      	bne.n	80084d4 <_malloc_r+0xdc>
 8008448:	2c00      	cmp	r4, #0
 800844a:	d048      	beq.n	80084de <_malloc_r+0xe6>
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	4631      	mov	r1, r6
 8008450:	4638      	mov	r0, r7
 8008452:	eb04 0903 	add.w	r9, r4, r3
 8008456:	f000 fa7b 	bl	8008950 <_sbrk_r>
 800845a:	4581      	cmp	r9, r0
 800845c:	d13f      	bne.n	80084de <_malloc_r+0xe6>
 800845e:	6821      	ldr	r1, [r4, #0]
 8008460:	1a6d      	subs	r5, r5, r1
 8008462:	4629      	mov	r1, r5
 8008464:	4638      	mov	r0, r7
 8008466:	f7ff ffa7 	bl	80083b8 <sbrk_aligned>
 800846a:	3001      	adds	r0, #1
 800846c:	d037      	beq.n	80084de <_malloc_r+0xe6>
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	442b      	add	r3, r5
 8008472:	6023      	str	r3, [r4, #0]
 8008474:	f8d8 3000 	ldr.w	r3, [r8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d038      	beq.n	80084ee <_malloc_r+0xf6>
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	42a2      	cmp	r2, r4
 8008480:	d12b      	bne.n	80084da <_malloc_r+0xe2>
 8008482:	2200      	movs	r2, #0
 8008484:	605a      	str	r2, [r3, #4]
 8008486:	e00f      	b.n	80084a8 <_malloc_r+0xb0>
 8008488:	6822      	ldr	r2, [r4, #0]
 800848a:	1b52      	subs	r2, r2, r5
 800848c:	d41f      	bmi.n	80084ce <_malloc_r+0xd6>
 800848e:	2a0b      	cmp	r2, #11
 8008490:	d917      	bls.n	80084c2 <_malloc_r+0xca>
 8008492:	1961      	adds	r1, r4, r5
 8008494:	42a3      	cmp	r3, r4
 8008496:	6025      	str	r5, [r4, #0]
 8008498:	bf18      	it	ne
 800849a:	6059      	strne	r1, [r3, #4]
 800849c:	6863      	ldr	r3, [r4, #4]
 800849e:	bf08      	it	eq
 80084a0:	f8c8 1000 	streq.w	r1, [r8]
 80084a4:	5162      	str	r2, [r4, r5]
 80084a6:	604b      	str	r3, [r1, #4]
 80084a8:	4638      	mov	r0, r7
 80084aa:	f104 060b 	add.w	r6, r4, #11
 80084ae:	f000 f829 	bl	8008504 <__malloc_unlock>
 80084b2:	f026 0607 	bic.w	r6, r6, #7
 80084b6:	1d23      	adds	r3, r4, #4
 80084b8:	1af2      	subs	r2, r6, r3
 80084ba:	d0ae      	beq.n	800841a <_malloc_r+0x22>
 80084bc:	1b9b      	subs	r3, r3, r6
 80084be:	50a3      	str	r3, [r4, r2]
 80084c0:	e7ab      	b.n	800841a <_malloc_r+0x22>
 80084c2:	42a3      	cmp	r3, r4
 80084c4:	6862      	ldr	r2, [r4, #4]
 80084c6:	d1dd      	bne.n	8008484 <_malloc_r+0x8c>
 80084c8:	f8c8 2000 	str.w	r2, [r8]
 80084cc:	e7ec      	b.n	80084a8 <_malloc_r+0xb0>
 80084ce:	4623      	mov	r3, r4
 80084d0:	6864      	ldr	r4, [r4, #4]
 80084d2:	e7ac      	b.n	800842e <_malloc_r+0x36>
 80084d4:	4634      	mov	r4, r6
 80084d6:	6876      	ldr	r6, [r6, #4]
 80084d8:	e7b4      	b.n	8008444 <_malloc_r+0x4c>
 80084da:	4613      	mov	r3, r2
 80084dc:	e7cc      	b.n	8008478 <_malloc_r+0x80>
 80084de:	230c      	movs	r3, #12
 80084e0:	603b      	str	r3, [r7, #0]
 80084e2:	4638      	mov	r0, r7
 80084e4:	f000 f80e 	bl	8008504 <__malloc_unlock>
 80084e8:	e797      	b.n	800841a <_malloc_r+0x22>
 80084ea:	6025      	str	r5, [r4, #0]
 80084ec:	e7dc      	b.n	80084a8 <_malloc_r+0xb0>
 80084ee:	605b      	str	r3, [r3, #4]
 80084f0:	deff      	udf	#255	; 0xff
 80084f2:	bf00      	nop
 80084f4:	200008d8 	.word	0x200008d8

080084f8 <__malloc_lock>:
 80084f8:	4801      	ldr	r0, [pc, #4]	; (8008500 <__malloc_lock+0x8>)
 80084fa:	f000 ba75 	b.w	80089e8 <__retarget_lock_acquire_recursive>
 80084fe:	bf00      	nop
 8008500:	20000a20 	.word	0x20000a20

08008504 <__malloc_unlock>:
 8008504:	4801      	ldr	r0, [pc, #4]	; (800850c <__malloc_unlock+0x8>)
 8008506:	f000 ba70 	b.w	80089ea <__retarget_lock_release_recursive>
 800850a:	bf00      	nop
 800850c:	20000a20 	.word	0x20000a20

08008510 <std>:
 8008510:	2300      	movs	r3, #0
 8008512:	b510      	push	{r4, lr}
 8008514:	4604      	mov	r4, r0
 8008516:	e9c0 3300 	strd	r3, r3, [r0]
 800851a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800851e:	6083      	str	r3, [r0, #8]
 8008520:	8181      	strh	r1, [r0, #12]
 8008522:	6643      	str	r3, [r0, #100]	; 0x64
 8008524:	81c2      	strh	r2, [r0, #14]
 8008526:	6183      	str	r3, [r0, #24]
 8008528:	4619      	mov	r1, r3
 800852a:	2208      	movs	r2, #8
 800852c:	305c      	adds	r0, #92	; 0x5c
 800852e:	f000 f9d3 	bl	80088d8 <memset>
 8008532:	4b05      	ldr	r3, [pc, #20]	; (8008548 <std+0x38>)
 8008534:	6263      	str	r3, [r4, #36]	; 0x24
 8008536:	4b05      	ldr	r3, [pc, #20]	; (800854c <std+0x3c>)
 8008538:	62a3      	str	r3, [r4, #40]	; 0x28
 800853a:	4b05      	ldr	r3, [pc, #20]	; (8008550 <std+0x40>)
 800853c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800853e:	4b05      	ldr	r3, [pc, #20]	; (8008554 <std+0x44>)
 8008540:	6224      	str	r4, [r4, #32]
 8008542:	6323      	str	r3, [r4, #48]	; 0x30
 8008544:	bd10      	pop	{r4, pc}
 8008546:	bf00      	nop
 8008548:	08008729 	.word	0x08008729
 800854c:	0800874b 	.word	0x0800874b
 8008550:	08008783 	.word	0x08008783
 8008554:	080087a7 	.word	0x080087a7

08008558 <stdio_exit_handler>:
 8008558:	4a02      	ldr	r2, [pc, #8]	; (8008564 <stdio_exit_handler+0xc>)
 800855a:	4903      	ldr	r1, [pc, #12]	; (8008568 <stdio_exit_handler+0x10>)
 800855c:	4803      	ldr	r0, [pc, #12]	; (800856c <stdio_exit_handler+0x14>)
 800855e:	f000 b869 	b.w	8008634 <_fwalk_sglue>
 8008562:	bf00      	nop
 8008564:	2000002c 	.word	0x2000002c
 8008568:	08008b91 	.word	0x08008b91
 800856c:	20000038 	.word	0x20000038

08008570 <cleanup_stdio>:
 8008570:	6841      	ldr	r1, [r0, #4]
 8008572:	4b0c      	ldr	r3, [pc, #48]	; (80085a4 <cleanup_stdio+0x34>)
 8008574:	4299      	cmp	r1, r3
 8008576:	b510      	push	{r4, lr}
 8008578:	4604      	mov	r4, r0
 800857a:	d001      	beq.n	8008580 <cleanup_stdio+0x10>
 800857c:	f000 fb08 	bl	8008b90 <_fflush_r>
 8008580:	68a1      	ldr	r1, [r4, #8]
 8008582:	4b09      	ldr	r3, [pc, #36]	; (80085a8 <cleanup_stdio+0x38>)
 8008584:	4299      	cmp	r1, r3
 8008586:	d002      	beq.n	800858e <cleanup_stdio+0x1e>
 8008588:	4620      	mov	r0, r4
 800858a:	f000 fb01 	bl	8008b90 <_fflush_r>
 800858e:	68e1      	ldr	r1, [r4, #12]
 8008590:	4b06      	ldr	r3, [pc, #24]	; (80085ac <cleanup_stdio+0x3c>)
 8008592:	4299      	cmp	r1, r3
 8008594:	d004      	beq.n	80085a0 <cleanup_stdio+0x30>
 8008596:	4620      	mov	r0, r4
 8008598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800859c:	f000 baf8 	b.w	8008b90 <_fflush_r>
 80085a0:	bd10      	pop	{r4, pc}
 80085a2:	bf00      	nop
 80085a4:	200008e0 	.word	0x200008e0
 80085a8:	20000948 	.word	0x20000948
 80085ac:	200009b0 	.word	0x200009b0

080085b0 <global_stdio_init.part.0>:
 80085b0:	b510      	push	{r4, lr}
 80085b2:	4b0b      	ldr	r3, [pc, #44]	; (80085e0 <global_stdio_init.part.0+0x30>)
 80085b4:	4c0b      	ldr	r4, [pc, #44]	; (80085e4 <global_stdio_init.part.0+0x34>)
 80085b6:	4a0c      	ldr	r2, [pc, #48]	; (80085e8 <global_stdio_init.part.0+0x38>)
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	4620      	mov	r0, r4
 80085bc:	2200      	movs	r2, #0
 80085be:	2104      	movs	r1, #4
 80085c0:	f7ff ffa6 	bl	8008510 <std>
 80085c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80085c8:	2201      	movs	r2, #1
 80085ca:	2109      	movs	r1, #9
 80085cc:	f7ff ffa0 	bl	8008510 <std>
 80085d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80085d4:	2202      	movs	r2, #2
 80085d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085da:	2112      	movs	r1, #18
 80085dc:	f7ff bf98 	b.w	8008510 <std>
 80085e0:	20000a18 	.word	0x20000a18
 80085e4:	200008e0 	.word	0x200008e0
 80085e8:	08008559 	.word	0x08008559

080085ec <__sfp_lock_acquire>:
 80085ec:	4801      	ldr	r0, [pc, #4]	; (80085f4 <__sfp_lock_acquire+0x8>)
 80085ee:	f000 b9fb 	b.w	80089e8 <__retarget_lock_acquire_recursive>
 80085f2:	bf00      	nop
 80085f4:	20000a21 	.word	0x20000a21

080085f8 <__sfp_lock_release>:
 80085f8:	4801      	ldr	r0, [pc, #4]	; (8008600 <__sfp_lock_release+0x8>)
 80085fa:	f000 b9f6 	b.w	80089ea <__retarget_lock_release_recursive>
 80085fe:	bf00      	nop
 8008600:	20000a21 	.word	0x20000a21

08008604 <__sinit>:
 8008604:	b510      	push	{r4, lr}
 8008606:	4604      	mov	r4, r0
 8008608:	f7ff fff0 	bl	80085ec <__sfp_lock_acquire>
 800860c:	6a23      	ldr	r3, [r4, #32]
 800860e:	b11b      	cbz	r3, 8008618 <__sinit+0x14>
 8008610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008614:	f7ff bff0 	b.w	80085f8 <__sfp_lock_release>
 8008618:	4b04      	ldr	r3, [pc, #16]	; (800862c <__sinit+0x28>)
 800861a:	6223      	str	r3, [r4, #32]
 800861c:	4b04      	ldr	r3, [pc, #16]	; (8008630 <__sinit+0x2c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1f5      	bne.n	8008610 <__sinit+0xc>
 8008624:	f7ff ffc4 	bl	80085b0 <global_stdio_init.part.0>
 8008628:	e7f2      	b.n	8008610 <__sinit+0xc>
 800862a:	bf00      	nop
 800862c:	08008571 	.word	0x08008571
 8008630:	20000a18 	.word	0x20000a18

08008634 <_fwalk_sglue>:
 8008634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008638:	4607      	mov	r7, r0
 800863a:	4688      	mov	r8, r1
 800863c:	4614      	mov	r4, r2
 800863e:	2600      	movs	r6, #0
 8008640:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008644:	f1b9 0901 	subs.w	r9, r9, #1
 8008648:	d505      	bpl.n	8008656 <_fwalk_sglue+0x22>
 800864a:	6824      	ldr	r4, [r4, #0]
 800864c:	2c00      	cmp	r4, #0
 800864e:	d1f7      	bne.n	8008640 <_fwalk_sglue+0xc>
 8008650:	4630      	mov	r0, r6
 8008652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008656:	89ab      	ldrh	r3, [r5, #12]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d907      	bls.n	800866c <_fwalk_sglue+0x38>
 800865c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008660:	3301      	adds	r3, #1
 8008662:	d003      	beq.n	800866c <_fwalk_sglue+0x38>
 8008664:	4629      	mov	r1, r5
 8008666:	4638      	mov	r0, r7
 8008668:	47c0      	blx	r8
 800866a:	4306      	orrs	r6, r0
 800866c:	3568      	adds	r5, #104	; 0x68
 800866e:	e7e9      	b.n	8008644 <_fwalk_sglue+0x10>

08008670 <_puts_r>:
 8008670:	6a03      	ldr	r3, [r0, #32]
 8008672:	b570      	push	{r4, r5, r6, lr}
 8008674:	6884      	ldr	r4, [r0, #8]
 8008676:	4605      	mov	r5, r0
 8008678:	460e      	mov	r6, r1
 800867a:	b90b      	cbnz	r3, 8008680 <_puts_r+0x10>
 800867c:	f7ff ffc2 	bl	8008604 <__sinit>
 8008680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008682:	07db      	lsls	r3, r3, #31
 8008684:	d405      	bmi.n	8008692 <_puts_r+0x22>
 8008686:	89a3      	ldrh	r3, [r4, #12]
 8008688:	0598      	lsls	r0, r3, #22
 800868a:	d402      	bmi.n	8008692 <_puts_r+0x22>
 800868c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800868e:	f000 f9ab 	bl	80089e8 <__retarget_lock_acquire_recursive>
 8008692:	89a3      	ldrh	r3, [r4, #12]
 8008694:	0719      	lsls	r1, r3, #28
 8008696:	d513      	bpl.n	80086c0 <_puts_r+0x50>
 8008698:	6923      	ldr	r3, [r4, #16]
 800869a:	b18b      	cbz	r3, 80086c0 <_puts_r+0x50>
 800869c:	3e01      	subs	r6, #1
 800869e:	68a3      	ldr	r3, [r4, #8]
 80086a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80086a4:	3b01      	subs	r3, #1
 80086a6:	60a3      	str	r3, [r4, #8]
 80086a8:	b9e9      	cbnz	r1, 80086e6 <_puts_r+0x76>
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	da2e      	bge.n	800870c <_puts_r+0x9c>
 80086ae:	4622      	mov	r2, r4
 80086b0:	210a      	movs	r1, #10
 80086b2:	4628      	mov	r0, r5
 80086b4:	f000 f87b 	bl	80087ae <__swbuf_r>
 80086b8:	3001      	adds	r0, #1
 80086ba:	d007      	beq.n	80086cc <_puts_r+0x5c>
 80086bc:	250a      	movs	r5, #10
 80086be:	e007      	b.n	80086d0 <_puts_r+0x60>
 80086c0:	4621      	mov	r1, r4
 80086c2:	4628      	mov	r0, r5
 80086c4:	f000 f8b0 	bl	8008828 <__swsetup_r>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d0e7      	beq.n	800869c <_puts_r+0x2c>
 80086cc:	f04f 35ff 	mov.w	r5, #4294967295
 80086d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086d2:	07da      	lsls	r2, r3, #31
 80086d4:	d405      	bmi.n	80086e2 <_puts_r+0x72>
 80086d6:	89a3      	ldrh	r3, [r4, #12]
 80086d8:	059b      	lsls	r3, r3, #22
 80086da:	d402      	bmi.n	80086e2 <_puts_r+0x72>
 80086dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086de:	f000 f984 	bl	80089ea <__retarget_lock_release_recursive>
 80086e2:	4628      	mov	r0, r5
 80086e4:	bd70      	pop	{r4, r5, r6, pc}
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	da04      	bge.n	80086f4 <_puts_r+0x84>
 80086ea:	69a2      	ldr	r2, [r4, #24]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	dc06      	bgt.n	80086fe <_puts_r+0x8e>
 80086f0:	290a      	cmp	r1, #10
 80086f2:	d004      	beq.n	80086fe <_puts_r+0x8e>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	6022      	str	r2, [r4, #0]
 80086fa:	7019      	strb	r1, [r3, #0]
 80086fc:	e7cf      	b.n	800869e <_puts_r+0x2e>
 80086fe:	4622      	mov	r2, r4
 8008700:	4628      	mov	r0, r5
 8008702:	f000 f854 	bl	80087ae <__swbuf_r>
 8008706:	3001      	adds	r0, #1
 8008708:	d1c9      	bne.n	800869e <_puts_r+0x2e>
 800870a:	e7df      	b.n	80086cc <_puts_r+0x5c>
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	250a      	movs	r5, #10
 8008710:	1c5a      	adds	r2, r3, #1
 8008712:	6022      	str	r2, [r4, #0]
 8008714:	701d      	strb	r5, [r3, #0]
 8008716:	e7db      	b.n	80086d0 <_puts_r+0x60>

08008718 <puts>:
 8008718:	4b02      	ldr	r3, [pc, #8]	; (8008724 <puts+0xc>)
 800871a:	4601      	mov	r1, r0
 800871c:	6818      	ldr	r0, [r3, #0]
 800871e:	f7ff bfa7 	b.w	8008670 <_puts_r>
 8008722:	bf00      	nop
 8008724:	20000084 	.word	0x20000084

08008728 <__sread>:
 8008728:	b510      	push	{r4, lr}
 800872a:	460c      	mov	r4, r1
 800872c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008730:	f000 f8fc 	bl	800892c <_read_r>
 8008734:	2800      	cmp	r0, #0
 8008736:	bfab      	itete	ge
 8008738:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800873a:	89a3      	ldrhlt	r3, [r4, #12]
 800873c:	181b      	addge	r3, r3, r0
 800873e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008742:	bfac      	ite	ge
 8008744:	6563      	strge	r3, [r4, #84]	; 0x54
 8008746:	81a3      	strhlt	r3, [r4, #12]
 8008748:	bd10      	pop	{r4, pc}

0800874a <__swrite>:
 800874a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800874e:	461f      	mov	r7, r3
 8008750:	898b      	ldrh	r3, [r1, #12]
 8008752:	05db      	lsls	r3, r3, #23
 8008754:	4605      	mov	r5, r0
 8008756:	460c      	mov	r4, r1
 8008758:	4616      	mov	r6, r2
 800875a:	d505      	bpl.n	8008768 <__swrite+0x1e>
 800875c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008760:	2302      	movs	r3, #2
 8008762:	2200      	movs	r2, #0
 8008764:	f000 f8d0 	bl	8008908 <_lseek_r>
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800876e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008772:	81a3      	strh	r3, [r4, #12]
 8008774:	4632      	mov	r2, r6
 8008776:	463b      	mov	r3, r7
 8008778:	4628      	mov	r0, r5
 800877a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800877e:	f000 b8f7 	b.w	8008970 <_write_r>

08008782 <__sseek>:
 8008782:	b510      	push	{r4, lr}
 8008784:	460c      	mov	r4, r1
 8008786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878a:	f000 f8bd 	bl	8008908 <_lseek_r>
 800878e:	1c43      	adds	r3, r0, #1
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	bf15      	itete	ne
 8008794:	6560      	strne	r0, [r4, #84]	; 0x54
 8008796:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800879a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800879e:	81a3      	strheq	r3, [r4, #12]
 80087a0:	bf18      	it	ne
 80087a2:	81a3      	strhne	r3, [r4, #12]
 80087a4:	bd10      	pop	{r4, pc}

080087a6 <__sclose>:
 80087a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087aa:	f000 b89d 	b.w	80088e8 <_close_r>

080087ae <__swbuf_r>:
 80087ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b0:	460e      	mov	r6, r1
 80087b2:	4614      	mov	r4, r2
 80087b4:	4605      	mov	r5, r0
 80087b6:	b118      	cbz	r0, 80087c0 <__swbuf_r+0x12>
 80087b8:	6a03      	ldr	r3, [r0, #32]
 80087ba:	b90b      	cbnz	r3, 80087c0 <__swbuf_r+0x12>
 80087bc:	f7ff ff22 	bl	8008604 <__sinit>
 80087c0:	69a3      	ldr	r3, [r4, #24]
 80087c2:	60a3      	str	r3, [r4, #8]
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	071a      	lsls	r2, r3, #28
 80087c8:	d525      	bpl.n	8008816 <__swbuf_r+0x68>
 80087ca:	6923      	ldr	r3, [r4, #16]
 80087cc:	b31b      	cbz	r3, 8008816 <__swbuf_r+0x68>
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	6922      	ldr	r2, [r4, #16]
 80087d2:	1a98      	subs	r0, r3, r2
 80087d4:	6963      	ldr	r3, [r4, #20]
 80087d6:	b2f6      	uxtb	r6, r6
 80087d8:	4283      	cmp	r3, r0
 80087da:	4637      	mov	r7, r6
 80087dc:	dc04      	bgt.n	80087e8 <__swbuf_r+0x3a>
 80087de:	4621      	mov	r1, r4
 80087e0:	4628      	mov	r0, r5
 80087e2:	f000 f9d5 	bl	8008b90 <_fflush_r>
 80087e6:	b9e0      	cbnz	r0, 8008822 <__swbuf_r+0x74>
 80087e8:	68a3      	ldr	r3, [r4, #8]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	60a3      	str	r3, [r4, #8]
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	6022      	str	r2, [r4, #0]
 80087f4:	701e      	strb	r6, [r3, #0]
 80087f6:	6962      	ldr	r2, [r4, #20]
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d004      	beq.n	8008808 <__swbuf_r+0x5a>
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	07db      	lsls	r3, r3, #31
 8008802:	d506      	bpl.n	8008812 <__swbuf_r+0x64>
 8008804:	2e0a      	cmp	r6, #10
 8008806:	d104      	bne.n	8008812 <__swbuf_r+0x64>
 8008808:	4621      	mov	r1, r4
 800880a:	4628      	mov	r0, r5
 800880c:	f000 f9c0 	bl	8008b90 <_fflush_r>
 8008810:	b938      	cbnz	r0, 8008822 <__swbuf_r+0x74>
 8008812:	4638      	mov	r0, r7
 8008814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008816:	4621      	mov	r1, r4
 8008818:	4628      	mov	r0, r5
 800881a:	f000 f805 	bl	8008828 <__swsetup_r>
 800881e:	2800      	cmp	r0, #0
 8008820:	d0d5      	beq.n	80087ce <__swbuf_r+0x20>
 8008822:	f04f 37ff 	mov.w	r7, #4294967295
 8008826:	e7f4      	b.n	8008812 <__swbuf_r+0x64>

08008828 <__swsetup_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	4b2a      	ldr	r3, [pc, #168]	; (80088d4 <__swsetup_r+0xac>)
 800882c:	4605      	mov	r5, r0
 800882e:	6818      	ldr	r0, [r3, #0]
 8008830:	460c      	mov	r4, r1
 8008832:	b118      	cbz	r0, 800883c <__swsetup_r+0x14>
 8008834:	6a03      	ldr	r3, [r0, #32]
 8008836:	b90b      	cbnz	r3, 800883c <__swsetup_r+0x14>
 8008838:	f7ff fee4 	bl	8008604 <__sinit>
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008842:	0718      	lsls	r0, r3, #28
 8008844:	d422      	bmi.n	800888c <__swsetup_r+0x64>
 8008846:	06d9      	lsls	r1, r3, #27
 8008848:	d407      	bmi.n	800885a <__swsetup_r+0x32>
 800884a:	2309      	movs	r3, #9
 800884c:	602b      	str	r3, [r5, #0]
 800884e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008852:	81a3      	strh	r3, [r4, #12]
 8008854:	f04f 30ff 	mov.w	r0, #4294967295
 8008858:	e034      	b.n	80088c4 <__swsetup_r+0x9c>
 800885a:	0758      	lsls	r0, r3, #29
 800885c:	d512      	bpl.n	8008884 <__swsetup_r+0x5c>
 800885e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008860:	b141      	cbz	r1, 8008874 <__swsetup_r+0x4c>
 8008862:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008866:	4299      	cmp	r1, r3
 8008868:	d002      	beq.n	8008870 <__swsetup_r+0x48>
 800886a:	4628      	mov	r0, r5
 800886c:	f000 f8be 	bl	80089ec <_free_r>
 8008870:	2300      	movs	r3, #0
 8008872:	6363      	str	r3, [r4, #52]	; 0x34
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800887a:	81a3      	strh	r3, [r4, #12]
 800887c:	2300      	movs	r3, #0
 800887e:	6063      	str	r3, [r4, #4]
 8008880:	6923      	ldr	r3, [r4, #16]
 8008882:	6023      	str	r3, [r4, #0]
 8008884:	89a3      	ldrh	r3, [r4, #12]
 8008886:	f043 0308 	orr.w	r3, r3, #8
 800888a:	81a3      	strh	r3, [r4, #12]
 800888c:	6923      	ldr	r3, [r4, #16]
 800888e:	b94b      	cbnz	r3, 80088a4 <__swsetup_r+0x7c>
 8008890:	89a3      	ldrh	r3, [r4, #12]
 8008892:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800889a:	d003      	beq.n	80088a4 <__swsetup_r+0x7c>
 800889c:	4621      	mov	r1, r4
 800889e:	4628      	mov	r0, r5
 80088a0:	f000 f9c4 	bl	8008c2c <__smakebuf_r>
 80088a4:	89a0      	ldrh	r0, [r4, #12]
 80088a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088aa:	f010 0301 	ands.w	r3, r0, #1
 80088ae:	d00a      	beq.n	80088c6 <__swsetup_r+0x9e>
 80088b0:	2300      	movs	r3, #0
 80088b2:	60a3      	str	r3, [r4, #8]
 80088b4:	6963      	ldr	r3, [r4, #20]
 80088b6:	425b      	negs	r3, r3
 80088b8:	61a3      	str	r3, [r4, #24]
 80088ba:	6923      	ldr	r3, [r4, #16]
 80088bc:	b943      	cbnz	r3, 80088d0 <__swsetup_r+0xa8>
 80088be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088c2:	d1c4      	bne.n	800884e <__swsetup_r+0x26>
 80088c4:	bd38      	pop	{r3, r4, r5, pc}
 80088c6:	0781      	lsls	r1, r0, #30
 80088c8:	bf58      	it	pl
 80088ca:	6963      	ldrpl	r3, [r4, #20]
 80088cc:	60a3      	str	r3, [r4, #8]
 80088ce:	e7f4      	b.n	80088ba <__swsetup_r+0x92>
 80088d0:	2000      	movs	r0, #0
 80088d2:	e7f7      	b.n	80088c4 <__swsetup_r+0x9c>
 80088d4:	20000084 	.word	0x20000084

080088d8 <memset>:
 80088d8:	4402      	add	r2, r0
 80088da:	4603      	mov	r3, r0
 80088dc:	4293      	cmp	r3, r2
 80088de:	d100      	bne.n	80088e2 <memset+0xa>
 80088e0:	4770      	bx	lr
 80088e2:	f803 1b01 	strb.w	r1, [r3], #1
 80088e6:	e7f9      	b.n	80088dc <memset+0x4>

080088e8 <_close_r>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	4d06      	ldr	r5, [pc, #24]	; (8008904 <_close_r+0x1c>)
 80088ec:	2300      	movs	r3, #0
 80088ee:	4604      	mov	r4, r0
 80088f0:	4608      	mov	r0, r1
 80088f2:	602b      	str	r3, [r5, #0]
 80088f4:	f7f8 fafb 	bl	8000eee <_close>
 80088f8:	1c43      	adds	r3, r0, #1
 80088fa:	d102      	bne.n	8008902 <_close_r+0x1a>
 80088fc:	682b      	ldr	r3, [r5, #0]
 80088fe:	b103      	cbz	r3, 8008902 <_close_r+0x1a>
 8008900:	6023      	str	r3, [r4, #0]
 8008902:	bd38      	pop	{r3, r4, r5, pc}
 8008904:	20000a1c 	.word	0x20000a1c

08008908 <_lseek_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	4d07      	ldr	r5, [pc, #28]	; (8008928 <_lseek_r+0x20>)
 800890c:	4604      	mov	r4, r0
 800890e:	4608      	mov	r0, r1
 8008910:	4611      	mov	r1, r2
 8008912:	2200      	movs	r2, #0
 8008914:	602a      	str	r2, [r5, #0]
 8008916:	461a      	mov	r2, r3
 8008918:	f7f8 fb10 	bl	8000f3c <_lseek>
 800891c:	1c43      	adds	r3, r0, #1
 800891e:	d102      	bne.n	8008926 <_lseek_r+0x1e>
 8008920:	682b      	ldr	r3, [r5, #0]
 8008922:	b103      	cbz	r3, 8008926 <_lseek_r+0x1e>
 8008924:	6023      	str	r3, [r4, #0]
 8008926:	bd38      	pop	{r3, r4, r5, pc}
 8008928:	20000a1c 	.word	0x20000a1c

0800892c <_read_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	4d07      	ldr	r5, [pc, #28]	; (800894c <_read_r+0x20>)
 8008930:	4604      	mov	r4, r0
 8008932:	4608      	mov	r0, r1
 8008934:	4611      	mov	r1, r2
 8008936:	2200      	movs	r2, #0
 8008938:	602a      	str	r2, [r5, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	f7f8 fa9e 	bl	8000e7c <_read>
 8008940:	1c43      	adds	r3, r0, #1
 8008942:	d102      	bne.n	800894a <_read_r+0x1e>
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	b103      	cbz	r3, 800894a <_read_r+0x1e>
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	bd38      	pop	{r3, r4, r5, pc}
 800894c:	20000a1c 	.word	0x20000a1c

08008950 <_sbrk_r>:
 8008950:	b538      	push	{r3, r4, r5, lr}
 8008952:	4d06      	ldr	r5, [pc, #24]	; (800896c <_sbrk_r+0x1c>)
 8008954:	2300      	movs	r3, #0
 8008956:	4604      	mov	r4, r0
 8008958:	4608      	mov	r0, r1
 800895a:	602b      	str	r3, [r5, #0]
 800895c:	f7f8 fafc 	bl	8000f58 <_sbrk>
 8008960:	1c43      	adds	r3, r0, #1
 8008962:	d102      	bne.n	800896a <_sbrk_r+0x1a>
 8008964:	682b      	ldr	r3, [r5, #0]
 8008966:	b103      	cbz	r3, 800896a <_sbrk_r+0x1a>
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	bd38      	pop	{r3, r4, r5, pc}
 800896c:	20000a1c 	.word	0x20000a1c

08008970 <_write_r>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	4d07      	ldr	r5, [pc, #28]	; (8008990 <_write_r+0x20>)
 8008974:	4604      	mov	r4, r0
 8008976:	4608      	mov	r0, r1
 8008978:	4611      	mov	r1, r2
 800897a:	2200      	movs	r2, #0
 800897c:	602a      	str	r2, [r5, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	f7f8 fa99 	bl	8000eb6 <_write>
 8008984:	1c43      	adds	r3, r0, #1
 8008986:	d102      	bne.n	800898e <_write_r+0x1e>
 8008988:	682b      	ldr	r3, [r5, #0]
 800898a:	b103      	cbz	r3, 800898e <_write_r+0x1e>
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	bd38      	pop	{r3, r4, r5, pc}
 8008990:	20000a1c 	.word	0x20000a1c

08008994 <__errno>:
 8008994:	4b01      	ldr	r3, [pc, #4]	; (800899c <__errno+0x8>)
 8008996:	6818      	ldr	r0, [r3, #0]
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	20000084 	.word	0x20000084

080089a0 <__libc_init_array>:
 80089a0:	b570      	push	{r4, r5, r6, lr}
 80089a2:	4d0d      	ldr	r5, [pc, #52]	; (80089d8 <__libc_init_array+0x38>)
 80089a4:	4c0d      	ldr	r4, [pc, #52]	; (80089dc <__libc_init_array+0x3c>)
 80089a6:	1b64      	subs	r4, r4, r5
 80089a8:	10a4      	asrs	r4, r4, #2
 80089aa:	2600      	movs	r6, #0
 80089ac:	42a6      	cmp	r6, r4
 80089ae:	d109      	bne.n	80089c4 <__libc_init_array+0x24>
 80089b0:	4d0b      	ldr	r5, [pc, #44]	; (80089e0 <__libc_init_array+0x40>)
 80089b2:	4c0c      	ldr	r4, [pc, #48]	; (80089e4 <__libc_init_array+0x44>)
 80089b4:	f000 f998 	bl	8008ce8 <_init>
 80089b8:	1b64      	subs	r4, r4, r5
 80089ba:	10a4      	asrs	r4, r4, #2
 80089bc:	2600      	movs	r6, #0
 80089be:	42a6      	cmp	r6, r4
 80089c0:	d105      	bne.n	80089ce <__libc_init_array+0x2e>
 80089c2:	bd70      	pop	{r4, r5, r6, pc}
 80089c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80089c8:	4798      	blx	r3
 80089ca:	3601      	adds	r6, #1
 80089cc:	e7ee      	b.n	80089ac <__libc_init_array+0xc>
 80089ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80089d2:	4798      	blx	r3
 80089d4:	3601      	adds	r6, #1
 80089d6:	e7f2      	b.n	80089be <__libc_init_array+0x1e>
 80089d8:	08008d34 	.word	0x08008d34
 80089dc:	08008d34 	.word	0x08008d34
 80089e0:	08008d34 	.word	0x08008d34
 80089e4:	08008d38 	.word	0x08008d38

080089e8 <__retarget_lock_acquire_recursive>:
 80089e8:	4770      	bx	lr

080089ea <__retarget_lock_release_recursive>:
 80089ea:	4770      	bx	lr

080089ec <_free_r>:
 80089ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089ee:	2900      	cmp	r1, #0
 80089f0:	d044      	beq.n	8008a7c <_free_r+0x90>
 80089f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089f6:	9001      	str	r0, [sp, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f1a1 0404 	sub.w	r4, r1, #4
 80089fe:	bfb8      	it	lt
 8008a00:	18e4      	addlt	r4, r4, r3
 8008a02:	f7ff fd79 	bl	80084f8 <__malloc_lock>
 8008a06:	4a1e      	ldr	r2, [pc, #120]	; (8008a80 <_free_r+0x94>)
 8008a08:	9801      	ldr	r0, [sp, #4]
 8008a0a:	6813      	ldr	r3, [r2, #0]
 8008a0c:	b933      	cbnz	r3, 8008a1c <_free_r+0x30>
 8008a0e:	6063      	str	r3, [r4, #4]
 8008a10:	6014      	str	r4, [r2, #0]
 8008a12:	b003      	add	sp, #12
 8008a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a18:	f7ff bd74 	b.w	8008504 <__malloc_unlock>
 8008a1c:	42a3      	cmp	r3, r4
 8008a1e:	d908      	bls.n	8008a32 <_free_r+0x46>
 8008a20:	6825      	ldr	r5, [r4, #0]
 8008a22:	1961      	adds	r1, r4, r5
 8008a24:	428b      	cmp	r3, r1
 8008a26:	bf01      	itttt	eq
 8008a28:	6819      	ldreq	r1, [r3, #0]
 8008a2a:	685b      	ldreq	r3, [r3, #4]
 8008a2c:	1949      	addeq	r1, r1, r5
 8008a2e:	6021      	streq	r1, [r4, #0]
 8008a30:	e7ed      	b.n	8008a0e <_free_r+0x22>
 8008a32:	461a      	mov	r2, r3
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	b10b      	cbz	r3, 8008a3c <_free_r+0x50>
 8008a38:	42a3      	cmp	r3, r4
 8008a3a:	d9fa      	bls.n	8008a32 <_free_r+0x46>
 8008a3c:	6811      	ldr	r1, [r2, #0]
 8008a3e:	1855      	adds	r5, r2, r1
 8008a40:	42a5      	cmp	r5, r4
 8008a42:	d10b      	bne.n	8008a5c <_free_r+0x70>
 8008a44:	6824      	ldr	r4, [r4, #0]
 8008a46:	4421      	add	r1, r4
 8008a48:	1854      	adds	r4, r2, r1
 8008a4a:	42a3      	cmp	r3, r4
 8008a4c:	6011      	str	r1, [r2, #0]
 8008a4e:	d1e0      	bne.n	8008a12 <_free_r+0x26>
 8008a50:	681c      	ldr	r4, [r3, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	6053      	str	r3, [r2, #4]
 8008a56:	440c      	add	r4, r1
 8008a58:	6014      	str	r4, [r2, #0]
 8008a5a:	e7da      	b.n	8008a12 <_free_r+0x26>
 8008a5c:	d902      	bls.n	8008a64 <_free_r+0x78>
 8008a5e:	230c      	movs	r3, #12
 8008a60:	6003      	str	r3, [r0, #0]
 8008a62:	e7d6      	b.n	8008a12 <_free_r+0x26>
 8008a64:	6825      	ldr	r5, [r4, #0]
 8008a66:	1961      	adds	r1, r4, r5
 8008a68:	428b      	cmp	r3, r1
 8008a6a:	bf04      	itt	eq
 8008a6c:	6819      	ldreq	r1, [r3, #0]
 8008a6e:	685b      	ldreq	r3, [r3, #4]
 8008a70:	6063      	str	r3, [r4, #4]
 8008a72:	bf04      	itt	eq
 8008a74:	1949      	addeq	r1, r1, r5
 8008a76:	6021      	streq	r1, [r4, #0]
 8008a78:	6054      	str	r4, [r2, #4]
 8008a7a:	e7ca      	b.n	8008a12 <_free_r+0x26>
 8008a7c:	b003      	add	sp, #12
 8008a7e:	bd30      	pop	{r4, r5, pc}
 8008a80:	200008d8 	.word	0x200008d8

08008a84 <__sflush_r>:
 8008a84:	898a      	ldrh	r2, [r1, #12]
 8008a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a8a:	4605      	mov	r5, r0
 8008a8c:	0710      	lsls	r0, r2, #28
 8008a8e:	460c      	mov	r4, r1
 8008a90:	d458      	bmi.n	8008b44 <__sflush_r+0xc0>
 8008a92:	684b      	ldr	r3, [r1, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dc05      	bgt.n	8008aa4 <__sflush_r+0x20>
 8008a98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	dc02      	bgt.n	8008aa4 <__sflush_r+0x20>
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aa6:	2e00      	cmp	r6, #0
 8008aa8:	d0f9      	beq.n	8008a9e <__sflush_r+0x1a>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ab0:	682f      	ldr	r7, [r5, #0]
 8008ab2:	6a21      	ldr	r1, [r4, #32]
 8008ab4:	602b      	str	r3, [r5, #0]
 8008ab6:	d032      	beq.n	8008b1e <__sflush_r+0x9a>
 8008ab8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	075a      	lsls	r2, r3, #29
 8008abe:	d505      	bpl.n	8008acc <__sflush_r+0x48>
 8008ac0:	6863      	ldr	r3, [r4, #4]
 8008ac2:	1ac0      	subs	r0, r0, r3
 8008ac4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ac6:	b10b      	cbz	r3, 8008acc <__sflush_r+0x48>
 8008ac8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008aca:	1ac0      	subs	r0, r0, r3
 8008acc:	2300      	movs	r3, #0
 8008ace:	4602      	mov	r2, r0
 8008ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ad2:	6a21      	ldr	r1, [r4, #32]
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b0      	blx	r6
 8008ad8:	1c43      	adds	r3, r0, #1
 8008ada:	89a3      	ldrh	r3, [r4, #12]
 8008adc:	d106      	bne.n	8008aec <__sflush_r+0x68>
 8008ade:	6829      	ldr	r1, [r5, #0]
 8008ae0:	291d      	cmp	r1, #29
 8008ae2:	d82b      	bhi.n	8008b3c <__sflush_r+0xb8>
 8008ae4:	4a29      	ldr	r2, [pc, #164]	; (8008b8c <__sflush_r+0x108>)
 8008ae6:	410a      	asrs	r2, r1
 8008ae8:	07d6      	lsls	r6, r2, #31
 8008aea:	d427      	bmi.n	8008b3c <__sflush_r+0xb8>
 8008aec:	2200      	movs	r2, #0
 8008aee:	6062      	str	r2, [r4, #4]
 8008af0:	04d9      	lsls	r1, r3, #19
 8008af2:	6922      	ldr	r2, [r4, #16]
 8008af4:	6022      	str	r2, [r4, #0]
 8008af6:	d504      	bpl.n	8008b02 <__sflush_r+0x7e>
 8008af8:	1c42      	adds	r2, r0, #1
 8008afa:	d101      	bne.n	8008b00 <__sflush_r+0x7c>
 8008afc:	682b      	ldr	r3, [r5, #0]
 8008afe:	b903      	cbnz	r3, 8008b02 <__sflush_r+0x7e>
 8008b00:	6560      	str	r0, [r4, #84]	; 0x54
 8008b02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b04:	602f      	str	r7, [r5, #0]
 8008b06:	2900      	cmp	r1, #0
 8008b08:	d0c9      	beq.n	8008a9e <__sflush_r+0x1a>
 8008b0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b0e:	4299      	cmp	r1, r3
 8008b10:	d002      	beq.n	8008b18 <__sflush_r+0x94>
 8008b12:	4628      	mov	r0, r5
 8008b14:	f7ff ff6a 	bl	80089ec <_free_r>
 8008b18:	2000      	movs	r0, #0
 8008b1a:	6360      	str	r0, [r4, #52]	; 0x34
 8008b1c:	e7c0      	b.n	8008aa0 <__sflush_r+0x1c>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	4628      	mov	r0, r5
 8008b22:	47b0      	blx	r6
 8008b24:	1c41      	adds	r1, r0, #1
 8008b26:	d1c8      	bne.n	8008aba <__sflush_r+0x36>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d0c5      	beq.n	8008aba <__sflush_r+0x36>
 8008b2e:	2b1d      	cmp	r3, #29
 8008b30:	d001      	beq.n	8008b36 <__sflush_r+0xb2>
 8008b32:	2b16      	cmp	r3, #22
 8008b34:	d101      	bne.n	8008b3a <__sflush_r+0xb6>
 8008b36:	602f      	str	r7, [r5, #0]
 8008b38:	e7b1      	b.n	8008a9e <__sflush_r+0x1a>
 8008b3a:	89a3      	ldrh	r3, [r4, #12]
 8008b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b40:	81a3      	strh	r3, [r4, #12]
 8008b42:	e7ad      	b.n	8008aa0 <__sflush_r+0x1c>
 8008b44:	690f      	ldr	r7, [r1, #16]
 8008b46:	2f00      	cmp	r7, #0
 8008b48:	d0a9      	beq.n	8008a9e <__sflush_r+0x1a>
 8008b4a:	0793      	lsls	r3, r2, #30
 8008b4c:	680e      	ldr	r6, [r1, #0]
 8008b4e:	bf08      	it	eq
 8008b50:	694b      	ldreq	r3, [r1, #20]
 8008b52:	600f      	str	r7, [r1, #0]
 8008b54:	bf18      	it	ne
 8008b56:	2300      	movne	r3, #0
 8008b58:	eba6 0807 	sub.w	r8, r6, r7
 8008b5c:	608b      	str	r3, [r1, #8]
 8008b5e:	f1b8 0f00 	cmp.w	r8, #0
 8008b62:	dd9c      	ble.n	8008a9e <__sflush_r+0x1a>
 8008b64:	6a21      	ldr	r1, [r4, #32]
 8008b66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b68:	4643      	mov	r3, r8
 8008b6a:	463a      	mov	r2, r7
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	47b0      	blx	r6
 8008b70:	2800      	cmp	r0, #0
 8008b72:	dc06      	bgt.n	8008b82 <__sflush_r+0xfe>
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b7a:	81a3      	strh	r3, [r4, #12]
 8008b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b80:	e78e      	b.n	8008aa0 <__sflush_r+0x1c>
 8008b82:	4407      	add	r7, r0
 8008b84:	eba8 0800 	sub.w	r8, r8, r0
 8008b88:	e7e9      	b.n	8008b5e <__sflush_r+0xda>
 8008b8a:	bf00      	nop
 8008b8c:	dfbffffe 	.word	0xdfbffffe

08008b90 <_fflush_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	690b      	ldr	r3, [r1, #16]
 8008b94:	4605      	mov	r5, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	b913      	cbnz	r3, 8008ba0 <_fflush_r+0x10>
 8008b9a:	2500      	movs	r5, #0
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	b118      	cbz	r0, 8008baa <_fflush_r+0x1a>
 8008ba2:	6a03      	ldr	r3, [r0, #32]
 8008ba4:	b90b      	cbnz	r3, 8008baa <_fflush_r+0x1a>
 8008ba6:	f7ff fd2d 	bl	8008604 <__sinit>
 8008baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d0f3      	beq.n	8008b9a <_fflush_r+0xa>
 8008bb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bb4:	07d0      	lsls	r0, r2, #31
 8008bb6:	d404      	bmi.n	8008bc2 <_fflush_r+0x32>
 8008bb8:	0599      	lsls	r1, r3, #22
 8008bba:	d402      	bmi.n	8008bc2 <_fflush_r+0x32>
 8008bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bbe:	f7ff ff13 	bl	80089e8 <__retarget_lock_acquire_recursive>
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	f7ff ff5d 	bl	8008a84 <__sflush_r>
 8008bca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bcc:	07da      	lsls	r2, r3, #31
 8008bce:	4605      	mov	r5, r0
 8008bd0:	d4e4      	bmi.n	8008b9c <_fflush_r+0xc>
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	059b      	lsls	r3, r3, #22
 8008bd6:	d4e1      	bmi.n	8008b9c <_fflush_r+0xc>
 8008bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bda:	f7ff ff06 	bl	80089ea <__retarget_lock_release_recursive>
 8008bde:	e7dd      	b.n	8008b9c <_fflush_r+0xc>

08008be0 <__swhatbuf_r>:
 8008be0:	b570      	push	{r4, r5, r6, lr}
 8008be2:	460c      	mov	r4, r1
 8008be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008be8:	2900      	cmp	r1, #0
 8008bea:	b096      	sub	sp, #88	; 0x58
 8008bec:	4615      	mov	r5, r2
 8008bee:	461e      	mov	r6, r3
 8008bf0:	da0d      	bge.n	8008c0e <__swhatbuf_r+0x2e>
 8008bf2:	89a3      	ldrh	r3, [r4, #12]
 8008bf4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008bf8:	f04f 0100 	mov.w	r1, #0
 8008bfc:	bf0c      	ite	eq
 8008bfe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008c02:	2340      	movne	r3, #64	; 0x40
 8008c04:	2000      	movs	r0, #0
 8008c06:	6031      	str	r1, [r6, #0]
 8008c08:	602b      	str	r3, [r5, #0]
 8008c0a:	b016      	add	sp, #88	; 0x58
 8008c0c:	bd70      	pop	{r4, r5, r6, pc}
 8008c0e:	466a      	mov	r2, sp
 8008c10:	f000 f848 	bl	8008ca4 <_fstat_r>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	dbec      	blt.n	8008bf2 <__swhatbuf_r+0x12>
 8008c18:	9901      	ldr	r1, [sp, #4]
 8008c1a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008c1e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008c22:	4259      	negs	r1, r3
 8008c24:	4159      	adcs	r1, r3
 8008c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c2a:	e7eb      	b.n	8008c04 <__swhatbuf_r+0x24>

08008c2c <__smakebuf_r>:
 8008c2c:	898b      	ldrh	r3, [r1, #12]
 8008c2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c30:	079d      	lsls	r5, r3, #30
 8008c32:	4606      	mov	r6, r0
 8008c34:	460c      	mov	r4, r1
 8008c36:	d507      	bpl.n	8008c48 <__smakebuf_r+0x1c>
 8008c38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	6123      	str	r3, [r4, #16]
 8008c40:	2301      	movs	r3, #1
 8008c42:	6163      	str	r3, [r4, #20]
 8008c44:	b002      	add	sp, #8
 8008c46:	bd70      	pop	{r4, r5, r6, pc}
 8008c48:	ab01      	add	r3, sp, #4
 8008c4a:	466a      	mov	r2, sp
 8008c4c:	f7ff ffc8 	bl	8008be0 <__swhatbuf_r>
 8008c50:	9900      	ldr	r1, [sp, #0]
 8008c52:	4605      	mov	r5, r0
 8008c54:	4630      	mov	r0, r6
 8008c56:	f7ff fbcf 	bl	80083f8 <_malloc_r>
 8008c5a:	b948      	cbnz	r0, 8008c70 <__smakebuf_r+0x44>
 8008c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c60:	059a      	lsls	r2, r3, #22
 8008c62:	d4ef      	bmi.n	8008c44 <__smakebuf_r+0x18>
 8008c64:	f023 0303 	bic.w	r3, r3, #3
 8008c68:	f043 0302 	orr.w	r3, r3, #2
 8008c6c:	81a3      	strh	r3, [r4, #12]
 8008c6e:	e7e3      	b.n	8008c38 <__smakebuf_r+0xc>
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	6020      	str	r0, [r4, #0]
 8008c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c78:	81a3      	strh	r3, [r4, #12]
 8008c7a:	9b00      	ldr	r3, [sp, #0]
 8008c7c:	6163      	str	r3, [r4, #20]
 8008c7e:	9b01      	ldr	r3, [sp, #4]
 8008c80:	6120      	str	r0, [r4, #16]
 8008c82:	b15b      	cbz	r3, 8008c9c <__smakebuf_r+0x70>
 8008c84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c88:	4630      	mov	r0, r6
 8008c8a:	f000 f81d 	bl	8008cc8 <_isatty_r>
 8008c8e:	b128      	cbz	r0, 8008c9c <__smakebuf_r+0x70>
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	f023 0303 	bic.w	r3, r3, #3
 8008c96:	f043 0301 	orr.w	r3, r3, #1
 8008c9a:	81a3      	strh	r3, [r4, #12]
 8008c9c:	89a3      	ldrh	r3, [r4, #12]
 8008c9e:	431d      	orrs	r5, r3
 8008ca0:	81a5      	strh	r5, [r4, #12]
 8008ca2:	e7cf      	b.n	8008c44 <__smakebuf_r+0x18>

08008ca4 <_fstat_r>:
 8008ca4:	b538      	push	{r3, r4, r5, lr}
 8008ca6:	4d07      	ldr	r5, [pc, #28]	; (8008cc4 <_fstat_r+0x20>)
 8008ca8:	2300      	movs	r3, #0
 8008caa:	4604      	mov	r4, r0
 8008cac:	4608      	mov	r0, r1
 8008cae:	4611      	mov	r1, r2
 8008cb0:	602b      	str	r3, [r5, #0]
 8008cb2:	f7f8 f928 	bl	8000f06 <_fstat>
 8008cb6:	1c43      	adds	r3, r0, #1
 8008cb8:	d102      	bne.n	8008cc0 <_fstat_r+0x1c>
 8008cba:	682b      	ldr	r3, [r5, #0]
 8008cbc:	b103      	cbz	r3, 8008cc0 <_fstat_r+0x1c>
 8008cbe:	6023      	str	r3, [r4, #0]
 8008cc0:	bd38      	pop	{r3, r4, r5, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20000a1c 	.word	0x20000a1c

08008cc8 <_isatty_r>:
 8008cc8:	b538      	push	{r3, r4, r5, lr}
 8008cca:	4d06      	ldr	r5, [pc, #24]	; (8008ce4 <_isatty_r+0x1c>)
 8008ccc:	2300      	movs	r3, #0
 8008cce:	4604      	mov	r4, r0
 8008cd0:	4608      	mov	r0, r1
 8008cd2:	602b      	str	r3, [r5, #0]
 8008cd4:	f7f8 f927 	bl	8000f26 <_isatty>
 8008cd8:	1c43      	adds	r3, r0, #1
 8008cda:	d102      	bne.n	8008ce2 <_isatty_r+0x1a>
 8008cdc:	682b      	ldr	r3, [r5, #0]
 8008cde:	b103      	cbz	r3, 8008ce2 <_isatty_r+0x1a>
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	bd38      	pop	{r3, r4, r5, pc}
 8008ce4:	20000a1c 	.word	0x20000a1c

08008ce8 <_init>:
 8008ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cea:	bf00      	nop
 8008cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cee:	bc08      	pop	{r3}
 8008cf0:	469e      	mov	lr, r3
 8008cf2:	4770      	bx	lr

08008cf4 <_fini>:
 8008cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf6:	bf00      	nop
 8008cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cfa:	bc08      	pop	{r3}
 8008cfc:	469e      	mov	lr, r3
 8008cfe:	4770      	bx	lr
